<?php

/**
 * @file
 * Functions to support theming in the mass.gov theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Url;
use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\mayflower\Helper;
use Drupal\mayflower\Prepare\Atoms;
use Drupal\mayflower\Prepare\Molecules;
use Drupal\mayflower\Prepare\Organisms;
use Drupal\mayflower\Prepare\Schemas;
use Drupal\Core\Site\Settings;

/**
 * Implements hook_theme_suggestions_alter().
 */
function mass_theme_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  // Build a map of paragraph types and the twig files they map to.
  $map = [
    'action_step_numbered_list' => 'steps_ordered',
    'activities' => 'image_promos',
    'image_promo' => 'image_promos',
    'callout_link' => 'callout_links',
  ];

  // Add the appropriate theme suggestions.
  if (array_key_exists($variables['elements']['#paragraph']->getType(), $map)) {
    $suggestions[] = $map[$variables['elements']['#paragraph']->getType()];
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function mass_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  // Build a map of paragraph types and the twig files they map to.
  $map = [
    'contact_information' => 'contact_us',
  ];

  // Add the appropriate theme suggestions.
  if (array_key_exists($variables['elements']['#node']->getType(), $map)) {
    $suggestions[] = $map[$variables['elements']['#node']->getType()];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout button paragraphs.
 */
function mass_theme_preprocess_callout_links(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];

  $variables = [
    'theme_hook_original' => $variables['theme_hook_original'],
    'calloutLinks' => Molecules::prepareCalloutLinks($paragraph),
  ];

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @see patterns/molecules/action-seq-list.twig
 */
function mass_theme_preprocess_action_seq_list(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];

  // Sets the variable structure required for action-seq-list.twig.
  $variables = [
    'theme_hook_original' => $variables['theme_hook_original'],
    'actionSeqLists' => Molecules::prepareActionSeqList($paragraph),
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @see @organisms/by-author/steps-ordered.twig
 */
function mass_theme_preprocess_steps_ordered(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];

  // Sets the variable structure required for action-seq-list.twig.
  $variables = [
    'theme_hook_original' => $variables['theme_hook_original'],
    'stepsOrdered' => Organisms::prepareStepsOrdered($paragraph),
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * The action activities pattern has been deprecated in favor of image promos.
 *
 * @see @organisms/by-author/image-promos.twig
 */
function mass_theme_preprocess_image_promos(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];

  $variables = [
    'theme_hook_original' => $variables['theme_hook_original'],
    'imagePromos' => Organisms::prepareImagePromos($paragraph->field_activities),
  ];
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function mass_theme_theme_suggestions_alter(array &$suggestions, array $variables) {
  $original_theme_hook = $variables['theme_hook_original'];

  // For the pilot static homepage, we need to be able to theme a specific node
  // as the front page.
  if ($node = \Drupal::routeMatch()->getParameter('node') && in_array('html__front', $suggestions)) {
    $node = \Drupal::routeMatch()->getParameter('node');
    $suggestions[] = 'html__node__' . $node->id();
  }

  if (isset($variables['element']) && isset($variables['element']['#id'])) {
    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);

    if (isset($variables['element']['#type']) && isset($variables['element']['#name']) && $variables['element']['#type'] == 'textfield') {
      $original_theme_hook = $variables['theme_hook_original'];

      $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#name']);
    }

    if (isset($variables['element']['#attributes']) && array_key_exists('data-theming-id', $variables['element']['#attributes'])) {
      $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#attributes']['data-theming-id']);
    }
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the How-to page.
 */
function mass_theme_preprocess_node_how_to_page(&$variables) {
  $node = $variables['node'];

  $taxonomy_terms = [];

  // Get service pages associated with this service detail page from view.
  $view_results = views_get_view_result('service_pages_associate_how_to_pages', 'associated_service_pages', $node->id());

  // Roll up link field.
  foreach ($view_results as $key => $row) {

    // Get link field.
    if (!empty($row->field_service_ref_actions_2_node_field_data_title) &&
      !empty($row->field_service_ref_actions_2_node_field_data_nid)) {
      $href = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->field_service_ref_actions_2_node_field_data_nid);
      $text = $row->field_service_ref_actions_2_node_field_data_title;
      $taxonomy_terms[] = [
        'href' => $href,
        'text' => $text,
      ];
    }

    // Get ref field.
    if (!empty($row->field_service_ref_actions_node_field_data_title) &&
      !empty($row->field_service_ref_actions_node_field_data_nid)) {
      $href = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->field_service_ref_actions_node_field_data_nid);
      $text = $row->field_service_ref_actions_node_field_data_title;
      $taxonomy_terms[] = [
        'href' => $href,
        'text' => $text,
      ];
    }
  }

  // Set static details properties.
  $variables['details'] = [
    'contentTitle' => t('The Details'),
  ];

  // Get the action type taxonomy term.
  if (Helper::isFieldPopulated($node, 'field_how_to_taxo_action_type')) {
    $taxonomy_term = $node->get('field_how_to_taxo_action_type')->referencedEntities()[0];
    $action_type = $taxonomy_term->get('name')->value;
  }

  // Set up optional contents for pageHeader prepare invocation.
  $optionalContents = [];

  // If callout time field is populated, add to optional content.
  if (Helper::isFieldPopulated($node, 'field_how_to_time')) {
    $optionalContents[] = [
      'path' => '@organisms/by-author/callout-time.twig',
      'data' => [
        'calloutTime' => Molecules::prepareCalloutTime($node, 'field_how_to_time'),
      ],
    ];
  }

  // If recommended quick actions field is populated, add to optional content.
  if (Helper::isFieldPopulated($node, 'field_how_to_link_1')) {
    $optionalContents[] = [
      'path' => '@organisms/by-author/key-actions.twig',
      'data' => [
        'keyActions' => Molecules::prepareKeyActions($node, 'field_how_to_link_1'),
      ],
    ];
  }

  // Set up widgets for prepare pageHeader invocation.
  $widgets = NULL;

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    // @todo Consider making divider site-builder configurable vs hard-coded
    "divider" => FALSE,
    'headerTags' => [
      'label' => t('More about:'),
      'taxonomyTerms' => array_unique($taxonomy_terms, SORT_REGULAR),
    ],
    "optionalContents" => $optionalContents,
    "widgets" => $widgets,
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  // Set up pageContent for details section.
  $pageContent = [];

  // Set up Sticky Nav with entries corresponding used to details sections.
  $stickyNav = [];

  // Set up the sidebar.
  $sidebar = [];

  // Build what you need section, if that field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_what_you_need')) {
    // Set up rich text elements for what you need.
    $richTextElements = [
      'rteElements' => [
        Atoms::prepareRawHtml($node, ['field' => 'field_how_to_what_you_need']),
      ],
    ];

    // Set up section title for heading, sticky nav.
    $what_you_need_title = t('What you need');

    // Set up heading for what you need.
    $compHeading_options = [
      'title' => $what_you_need_title,
      'sub' => TRUE,
    ];

    $compHeading = Atoms::prepareCompHeading($compHeading_options);

    $pageContent['intro'] = array_merge($compHeading, $richTextElements);

    // Set up corresponding sticky nav entry for what you need.
    $stickyNav[] = $what_you_need_title;

  }

  // Build methods tabular data if field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_ref_fees')) {
    // Set up section title for heading, sticky nav.
    $fees_title = t('Fees');

    // Set up options for how to ___.
    $tabularData_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => $fees_title,
        'sub' => TRUE,
      ],
    ];

    $pageContent['tabularData'] = Organisms::prepareTabularData($node, $tabularData_options);

    // Set up corresponding sticky nav entry for fees.
    $stickyNav[] = $fees_title;

  }

  // Build methods unordered list if field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_methods_5')) {
    // Set up title for section heading and sticky nav.
    $how_to_title = t('How to @action', ['@action' => $action_type]);

    // Set up options for how to ___.
    $unorderedSteps_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => $how_to_title,
        'sub' => TRUE,
      ],
    ];

    $stepsUnordered = Organisms::prepareStepsUnordered($node, $unorderedSteps_options);

    $pageContent['stepsUnordered'] = $stepsUnordered;

    // Set up corresponding sticky nav entry for how to ___.
    $stickyNav[] = $how_to_title;

  }

  // Build next steps order list if field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_next_steps')) {
    // Set up title for section and sticky nav.
    $next_steps_title = t('Next Steps');

    // Set up options for next steps.
    $orderedSteps_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => $next_steps_title,
        'sub' => TRUE,
      ],
    ];

    $stepsOrdered = Organisms::prepareStepsOrdered($node, $orderedSteps_options);

    $pageContent['stepsOrdered'] = $stepsOrdered;

    // Set up corresponding sticky nav entry for next steps.
    $stickyNav[] = $next_steps_title;

  }

  // Build more info section, if that field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_more_info')) {
    // Set up rich text elements for what you need.
    $richTextElements = [
      'rteElements' => [
        Atoms::prepareParagraph($node, ['field' => 'field_how_to_more_info']),
      ],
    ];

    // Set up title for more info section and sticky nav.
    $more_info_title = t('More Info');

    // Set up heading for More Info.
    $compHeading_options = [
      'title' => $more_info_title,
      'sub' => TRUE,
    ];

    $compHeading = Atoms::prepareCompHeading($compHeading_options);

    $pageContent['moreInfo'] = array_merge($compHeading, $richTextElements);

    // Set up corresponding sticky nav entry for More Info.
    $stickyNav[] = $more_info_title;

  }

  // Build downloads section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_files')) {
    // Set up title for downloads section and sticky nav.
    $downloads_title = t('Downloads');

    // Set up options for formDownloads prepare.
    $downloadLinks_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => $downloads_title,
        'sub' => TRUE,
      ],
    ];

    $pageContent['formDownloads'] = Organisms::prepareFormDownloads($node, $downloadLinks_options);

    // Set up corresponding sticky nav entry for Downloads.
    $stickyNav[] = $downloads_title;
  }

  // Build contact section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_contacts_3')) {
    // Set up title for contacts section and sticky nav.
    $contacts_title = t("Contact");

    // Set up options for contact list.
    $contactList_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => $contacts_title,
        'sub' => TRUE,
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
      ],
    ];

    $pageContent['contactList'] = Organisms::prepareContactList($node, $contactList_options);

    // Build sidebar.contactList, which is a subset of pageContent.ContactList.
    $sidebar['contactList'] = Helper::getPrimaryContactPhoneOnlineContactList($pageContent['contactList']);

    // Hide the top contact on mobile.
    $sidebar['contactList']['viewSpecific'] = TRUE;

    // Set up corresponding sticky nav entry for contacts.
    $stickyNav[] = $contacts_title;
  }

  // Build the sticky nav based on the array of titles.
  if (!empty($stickyNav)) {
    $variables['stickyNav'] = Molecules::prepareStickyNav($stickyNav);
  }

  // Make pageContent data structure available in template.
  $variables['pageContent'] = $pageContent;

  // Build related links section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_how_to_links_5')) {
    // Set up options for link list.
    $linkList_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => t('Related'),
      ],
      'stacked' => TRUE,
    ];

    $sidebar['linkList'] = Organisms::preparelinkList($node, 'field_how_to_links_5', $linkList_options);
  }

  // Make sidebar data structure available in template.
  $variables['sidebar'] = $sidebar;

}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Form page.
 */
function mass_theme_preprocess_node_form_page(&$variables) {
  $node = $variables['node'];

  $sidebar = [];

  // Create the map of all possible field names to use.
  $map = [
    'contact' => ['field_form_ref_contacts_3'],
    'payment' => ['field_form_payment_options'],
    'lede' => ['field_form_lede'],
    'needs' => ['field_form_you_will'],
    'icons' => ['field_form_payment_options'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    'category' => '',
    'divider' => FALSE,
    'headerTags' => '',
    'optionalContents' => '',
    'widgets' => '',
    'subTitle' => Helper::fieldValue($node, $fields['lede']),
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  if (Helper::isFieldPopulated($node, 'field_form_you_will')) {
    $formRequirements = [
      'rteTitle' => [
        'text' => t('You will need:')
      ],
    ];
    // Set up rich text elements for what you need.
    $youWillNeed['rteElements'] = [
      Atoms::prepareRawHtml($node, ['field' => 'field_form_you_will']),
    ];
    $formRequirements['richText'] = $youWillNeed;

    if (Helper::isFieldPopulated($node, $fields['icons'])) {
      $payment = [
        'title' => [
          'text' => t('Payment accepted:'),
        ],
        'locationIcons' => [
          'icons' => Molecules::prepareLocationIcons($node),
        ],
      ];
      $formRequirements['payment'] = $payment;
    }
  }

  if (Helper::isFieldPopulated($node, $fields['downloads']) || Helper::isFieldPopulated($node, $fields['links'])) {
    // Set up options for formDownloads prepare.
    $downloadLinks_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => t('Additional Resources'),
        'sub' => TRUE,
      ],
    ];
    $mainContent['formDownloads'] = Organisms::prepareFormDownloads($node, $downloadLinks_options);
  }

  // Build contact section, if field is populated.
  if (Helper::isFieldPopulated($node, $fields['contact'])) {
    // Set up options for contact list.
    $contactList_options = [
      'heading' => [
        'title' => t("Contact"),
        'sub' => TRUE,
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
      ],
    ];

    $mainContent['contactList'] = Organisms::prepareContactList($node, $contactList_options);
    // Build sidebar.contactList, which is a subset of pageContent.ContactList.
    // Prepare the quickActions data object.
    $sidebarContacts_options = [
      'groups' => [
        'accordion' => FALSE,
        'isExpanded' => FALSE,
      ],
    ];
    // Prepare the sidebarContact data object.
    $sideContent['contactList'] = Organisms::prepareContactList($node, $sidebarContacts_options);
    unset($sideContent['contactList']['compHeading']);
    $sideContent['contactList']['sidebarHeading']['title'] = t('Contact');
    $sidebar['contactList']['viewSpecific'] = FALSE;
  }

  $variables['formRequirements'] = $formRequirements;
  $variables['mainContent'] = $mainContent;
  $variables['sideContent'] = $sideContent;

  if (!empty($node->field_form_embed->value)) {
    $dom = new DOMDocument();
    @$dom->loadHTML($node->field_form_embed->value);
    $xpath = new DOMXPath($dom);

    // Validate we have a formstack url.
    $variables['form_url'] = $xpath->evaluate('string(//script/@src)');
    $variables['form_url_noscript'] = $xpath->evaluate('string(//noscript/a/@href)');

    // Validate we have a formstack ID.
    $id_url = $xpath->evaluate('string(//div/a/@href)');
    if ($id_url) {
      parse_str($id_url, $id_url_arr);
      if (array_key_exists('fa', $id_url_arr)) {
        $variables['form_id'] = preg_replace('~\D~', '', $id_url_arr['fa']);
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Org page.
 */
function mass_theme_preprocess_node_org_page(&$variables) {
  $node = $variables['node'];

  // Set static pageBanner properties to pass to prepare function.
  $pageBanner_options = [
    "size" => "large",
    "icon" => NULL,
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageBanner'] = Organisms::preparePageBanner($node, $pageBanner_options);

  // Set static actionHeader properties to pass to prepare function.
  $pageHeader_options = [
    // @todo Consider making this site-builder configurable vs hard-coded
    'divider' => TRUE,
  ];

  // Prepare optional content to pass to pageHeader.
  $optionalContents = [];

  // Build contact us optional contents.
  if (Helper::isFieldPopulated($node, 'field_ref_contact_info_1')) {
    $optionalContents = array_merge($optionalContents, Helper::buildPageHeaderOptionalContentsContactUs($node, 'field_ref_contact_info_1'));
  }

  // Send optional contents as a pageHeader option.
  $pageHeader_options['optionalContents'] = $optionalContents;

  // Prepare widgets that can be passed to the pageHeader.
  $widgets = [];

  // Prepare the option array for the organization image widget.
  $orgImage_options = [
    'style' => 'organization_logo',
    'height' => '',
    'width' => 230,
  ];

  // Prepares the organization logo to use the mayflower image component.
  if ($org_logo = Atoms::prepareImage($node, $orgImage_options)) {
    $widgets[] = [
      'path' => '@atoms/09-media/image.twig',
      'data' => [
        'image' => $org_logo,
      ],
    ];
  }

  // Send widgets as a pageHeader option.
  $pageHeader_options['widgets'] = $widgets;

  // Prepare the actionHeader data object.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  // Make stacked section data object available in twig template.
  $sections = [];

  $map = [
    'text' => ['body'],
    'social' => ['field_social_links'],
    'featuredActions' => ['field_ref_actions_3'],
    'allActions' => ['field_ref_actions_6'],
    'featuredTopics' => ['field_ref_card_view_6'],
    'relatedLinks' => ['field_ref_orgs'],
    'mappedLocations' => ['field_org_ref_locations'],
  ];

  // Determines which fieldnames to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  if (Helper::isFieldPopulated($node, $fields['text'])) {
    $sideBarSocial = '';

    if (Helper::isFieldPopulated($node, $fields['social'])) {
      $sideBarSocial = [
        [
          'path' => '@atoms/04-headings/sidebar-heading.twig',
          'data' => Atoms::prepareSidebarHeading(t('Social')),
        ],
        [
          'path' => '@molecules/icon-links.twig',
          'data' => Molecules::prepareIconLinks($node),
        ],
      ];
    }

    $richTextElements = [];

    if (Helper::isFieldPopulated($node, $fields['text'])) {
      $richTextElements[] = Atoms::prepareParagraph($node, ['field' => $fields['text']]);
    }

    $sections[] = [
      'title' => $node->$fields['text']->getFieldDefinition()->getLabel(),
      'pageContent' => [
        Helper::prepareRichTextElements($richTextElements),
      ],
      'sideBar' => $sideBarSocial,
    ];
  }

  if (Helper::isFieldPopulated($node, $fields['featuredActions']) || Helper::isFieldPopulated($node, $fields['allActions'])) {
    $action_finder_options = [
      'title' => t('What Would You Like to Do?'),
      'featuredHeading' => t('Featured:'),
      'generalHeading' => t('How-Tos & Guides:'),
    ];

    $sections[] = [
      'pageContent' => [
        [
          'path' => '@organisms/by-author/action-finder.twig',
          'data' => Organisms::prepareActionFinder($node, $action_finder_options),
        ],
      ],
    ];
  }

  if (Helper::isFieldPopulated($node, $fields['featuredTopics'])) {
    $sectionThreeUp = [
      'heading' => [
        'title' => $node->$fields['featuredTopics']->getFieldDefinition()->getLabel(),
      ],
    ];

    $sections[] = [
      'pageContent' => [
        [
          'path' => '@organisms/by-author/sections-three-up.twig',
          'data' => [
            'sectionThreeUp' => Organisms::prepareSectionThreeUp($node->$fields['featuredTopics'], $sectionThreeUp),
          ],
        ],
      ],
    ];
  }

  if (Helper::isFieldPopulated($node, $fields['mappedLocations'])) {
    $mappedLocations_options = [
      'heading' => [
        'title' => t('Locations'),
        'type' => 'compHeading',
      ],
      'locationDetailsLink' => [
        'display' => TRUE,
        'nid' => $node->id(),
        'path' => \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $node->id()),
      ],
    ];

    // We need a different Google map config for PL tpls.
    // $variables['#attached']['library'][] = 'mass_theme/mass-google-map-apis-location';.
    $sections[] = [
      'pageContent' => [
        [
          'path' => '@organisms/by-author/mapped-locations.twig',
          'data' => [
            'mappedLocations' => Organisms::prepareMappedLocations($node->field_org_ref_locations->referencedEntities(), $mappedLocations_options),
          ],
        ],
      ],
    ];
  }

  if (Helper::isFieldPopulated($node, $fields['relatedLinks'])) {
    $linkList_options = [
      'heading' => [
        'title' => t('Related Organizations'),
        'type' => 'compHeading',
      ],
    ];

    $sections[] = [
      'pageContent' => [
        [
          'path' => '@organisms/by-author/link-list.twig',
          'data' => [
            'linkList' => Organisms::prepareLinkList($node, $fields['relatedLinks'], $linkList_options),
          ],
        ],
      ],
    ];
  }

  // Get events associated with this org page from view.
  $view_results = views_get_view_result('event_listing', 'event_listing_block', $node->id());

  if (!empty($view_results)) {
    $events = [];
    // Roll up link field.
    foreach ($view_results as $key => $row) {
      $eventEntity = $row->_relationship_entities['reverse__node__field_event_ref_parents'];

      // Create the map of all possible field names to use.
      $event_map = [
        'date' => ['field_event_date'],
        'time' => ['field_event_time'],
        'lede' => ['field_event_lede'],
        'tags' => ['field_event_ref_parents'],
        'links' => ['field_event_links'],
        'image' => ['field_event_image'],
        'logo' => ['field_event_logo'],
        'downloads' => ['field_event_ref_downloads'],
        'contact' => ['field_event_contact_general'],
      ];

      // Determines which field names to use from the map.
      $event_fields = Helper::getMappedFields($eventEntity, $event_map);
      $headerDate_options = [];
      $events[] = Molecules::prepareEventTeaser($eventEntity, $event_fields, $headerDate_options);
    }

    $sections[] = [
      'pageContent' => [
        [
          'path' => '@organisms/by-author/event-listing.twig',
          'data' => [
            'eventListing' => [
              'grid' => TRUE,
              'compHeading' => [
                'title' => t('Upcoming Events'),
              ],
              'events' => $events,
            ],
          ],
        ],
      ],
    ];
  }

  // Build related links section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_event_ref_event_2')) {
    // Set up options for contact list.
    $eventList_options = [
      'heading' => [
        'title' => t('Related Events'),
        'centered' => TRUE,
      ],
    ];
    $bottomContent['eventListing'] = Organisms::prepareEventListing($node, 'field_event_ref_event_2', $eventList_options);
  }

  $variables['stackedRowSections'] = $sections;
  // Prepare the schema.governmentOrganization data object.
  $variables['schema'] = Schemas::prepareGovernmentOrganization($variables);
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Location page.
 */
function mass_theme_preprocess_node_location(&$variables) {
  $node = $variables['node'];

  // We need a different Google map config for PL tpls.
  // $variables['#attached']['library'][] = 'mass_theme/mass-google-map-apis-location';.
  // Set static actionHeader properties to pass to prepare function.
  $pageHeader_options = [
    'divider' => FALSE,
  ];

  // Prepare optional content to pass to pageHeader.
  $optionalContents = [];

  // Build contact us optional contents.
  if (Helper::isFieldPopulated($node, 'field_ref_contact_info_1')) {
    $optionalContents = array_merge($optionalContents, Helper::buildPageHeaderOptionalContentsContactUs($node, 'field_ref_contact_info_1'));
  }

  // Send optional contents as a pageHeader option.
  $pageHeader_options['optionalContents'] = $optionalContents;

  // Prepare widgets that can be passed to the pageHeader.
  $widgets = [];
  if ($node->field_location_icons->entity) {
    $widgets[] = [
      'path' => '@molecules/location-icons.twig',
      'data' => [
        'locationIcons' => [
          'icons' => Molecules::prepareLocationIcons($node),
        ],
      ],
    ];
  }
  // iFrames.
  if ($node->field_iframe->entity) {
    $widgets[] = [
      'path' => '@atoms/11-text/raw-html.twig',
      'data' => [
        'rawHtml' => [
          'content' => '<iframe src="' . $node->field_iframe->entity->field_url->uri . '" height="' . $node->field_iframe->entity->field_height->value . '" style="width:100%;"></iframe>',
        ],
      ],
    ];
  }

  // Send widgets as pageHeader option.
  $pageHeader_options['widgets'] = $widgets;

  // Prepare the actionHeader data object.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  // Prepare the locationBanner data object.
  $variables['locationBanner'] = Organisms::prepareLocationBanner($node);

  // Prepare the actionDetails data object.
  $variables['actionDetails'] = Organisms::prepareActionDetails($node);

  // Prepare the suggestedPages data object.
  $suggested_options = [
    'title' => t('Related Parks'),
    'style' => 'activities_image',
  ];
  $variables['suggestedPages'] = Organisms::prepareSuggestedPages($node, $suggested_options);

  // Prepare the quickActions data object.
  $quickActions_options = [
    'heading' => [
      'type' => 'coloredHeading',
      'title' => t('Quick Actions'),
      'color' => 'green',
    ],
  ];
  $variables['quickActions'] = Organisms::prepareQuickActions($node, $quickActions_options);

  // Prepare the quickActions data object.
  $sidebarContacts_options = [
    'heading' => [
      'type' => 'coloredHeading',
      'title' => t('Contacts'),
    ],
  ];

  // Prepare the sidebarContact data object.
  $variables['sidebarContact'] = Organisms::prepareSidebarContact($node, $sidebarContacts_options);
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Services page.
 */
function mass_theme_preprocess_node_topic_page(&$variables) {
  $node = $variables['node'];

  // Create the map of all possible field names to use.
  $map = [
    'icon' => ['field_topic_ref_icon'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  $icon = Helper::getReferenceField($node->$fields['icon'], 'field_sprite_name');

  if ($icon) {
    $icon = Helper::getIconPath($icon);
  }

  // Set static pageBanner properties to pass to prepare function.
  $pageBanner_options = [
    'icon' => $icon,
    'color' => ''
  ];

  if (Helper::isFieldPopulated($node, 'field_topic_type')) {
    $type = Helper::fieldValue($node, 'field_topic_type');
    if ($type == 'section landing') {
      $pageBanner_options = array_merge($pageBanner_options, ['size' => 'hero1600x400']);
    }
    else {
      $pageBanner_options = array_merge($pageBanner_options, ['size' => 'columns']);
    }
    $pageBanner_options = array_merge($pageBanner_options, ['type' => $type]);
  }
  else {
    $pageBanner_options = array_merge($pageBanner_options, ['size' => 'columns']);
    $pageBanner_options = array_merge($pageBanner_options, ['type' => 'topic']);
  }

  // Make pageBanner data structure available in twig template.
  $variables['pageBanner'] = Organisms::preparePageBanner($node, $pageBanner_options);

  foreach ($node->field_topic_content_cards as $index => $section) {
    $variables['numOfSections'] = ++$index;

    $sectionThreeUp_options = [
      'heading' => [
        'title' => $section->entity->field_content_card_category->value,
      ],
      'noCardLinks' => [
        ($node->field_topic_display_links->value == '1') ? 'topic_page' : [],
      ],
      'use4TopLinks' => [
        'topic_page',
      ],
      'useCallout' => [
        'service_page',
      ],
    ];

    $variables['pageContent'][$index]['sectionThreeUp'] = Organisms::prepareSectionThreeUp($section->entity, $sectionThreeUp_options, ['topic_cards' => ['field_content_card_link_cards']]);
  }

  $linkList_options = [
    'heading' => [
      'title' => t('Related Topics'),
      'type' => 'compHeading',
    ],
  ];

  $variables['linkList'] = Organisms::prepareLinkList($node, 'field_topic_ref_related_topics', $linkList_options);
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Event page.
 */
function mass_theme_preprocess_node_event(&$variables) {
  $node = $variables['node'];
  $sidebar = [];

  // Create the map of all possible field names to use.
  $map = [
    'date' => ['field_event_date'],
    'time' => ['field_event_time'],
    'tags' => ['field_event_ref_parents'],
    'links' => ['field_event_links'],
    'image' => ['field_event_image'],
    'logo' => ['field_event_logo'],
    'downloads' => ['field_event_ref_downloads'],
    'contact' => ['field_event_contact_general'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  $taxonomyTerms = [];
  // @TODO build at Related To links.

  if (!empty($node->$fields['tags'])) {
    foreach ($node->$fields['tags'] as $tag) {
      $taxonomyTerms[] = [
        'href' => $tag->entity->toURL()->toString(),
        'text' => Helper::fieldValue($tag->entity, 'title'),
      ];
    }
  }

  $optionalContents = [];

  // Build date and time optional contents.
  if (Helper::isFieldPopulated($node, 'field_event_date')) {
    // Create the map of all possible field names to use.
    $headerDate_options = [
      'headerDate' => TRUE,
    ];

    $optionalContents[] = [
      'path' => '@molecules/event-teaser.twig',
      'data' => [
        'eventTeaser' => Molecules::prepareEventTeaser($node, $fields, $headerDate_options),
      ],
    ];
  }

  // Build contact us optional contents.
  if (Helper::isFieldPopulated($node, 'field_event_ref_contact')) {
    // Prepare the option array header contact.
    $headerContact_options = [
      'onlyAddress' => TRUE,
    ];
    $optionalContents = array_merge($optionalContents, Helper::buildPageHeaderOptionalContentsContactUs($node, 'field_event_ref_contact', $headerContact_options));
  }

  // Build key action optional contents.
  if (Helper::isFieldPopulated($node, 'field_event_link_sign_up')) {
    $optionalContents[] = [
      'path' => '@organisms/by-author/key-actions.twig',
      'data' => [
        'keyActions' => Molecules::prepareKeyActions($node, 'field_event_link_sign_up'),
      ],
    ];
  }

  // Prepare widgets that can be passed to the pageHeader.
  $widgets = [];

  // Prepare the option array for image widget.
  $logo_options = [
    'style' => 'organization_logo',
    'height' => '',
    'width' => 230,
  ];

  // Prepares logo to use the mayflower image component.
  if ($image = Atoms::prepareImage($node, $logo_options, $fields['logo'])) {
    $widgets[] = [
      'path' => '@atoms/09-media/image.twig',
      'data' => [
        'image' => $image,
      ],
    ];
  }

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    'category' => '',
    'divider' => TRUE,
    'headerTags' => [
      'label' => t('Related to:'),
      'taxonomyTerms' => $taxonomyTerms,
    ],
    'optionalContents' => $optionalContents,
    'widgets' => $widgets,
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  $items = [];

  if (Helper::isFieldPopulated($node, 'field_event_rain_date')) {
    $items[] = [
      'label' => t('Rain date:'),
      'text' => Helper::fieldValue($node, 'field_event_rain_date'),
    ];
  }

  if (Helper::isFieldPopulated($node, 'field_event_fees')) {
    $items[] = [
      'label' => t('Fees:'),
      'text' => Helper::fieldValue($node, 'field_event_fees'),
    ];
  }

  if (Helper::isFieldPopulated($node, 'field_event_capacity')) {
    $items[] = [
      'label' => t('Capacity:'),
      'text' => Helper::fieldValue($node, 'field_event_capacity'),
    ];
  }

  $pageOverview_options = [
    'heading' => [
      'title' => t('Overview'),
    ],
    'image' => [
      'style' => '',
      'width' => 600,
      'height' => '',
    ],
  ];

  $pageOverview = Atoms::prepareCompHeading($pageOverview_options['heading']);
  $pageOverview['image'] = Atoms::prepareImage($node, $pageOverview_options['image'], $fields['image']);
  $pageOverview['labelledList'] = ['items' => $items];

  if (Helper::isFieldPopulated($node, 'field_event_description')) {
    // Set up rich text elements for what you need.
    $pageOverview['richText'] = [
      'rteElements' => [
        Atoms::prepareRawHtml($node, ['field' => 'field_event_description']),
      ],
    ];
  }

  $mainContent['pageOverview'] = $pageOverview;

  if (Helper::isFieldPopulated($node, 'field_event_you_will_need')) {
    $youWillNeed_options = [
      'heading' => [
        'title' => t('You will need'),
        'sub' => TRUE,
      ],
    ];
    $youWillNeed = Atoms::prepareCompHeading($youWillNeed_options['heading']);
    // Set up rich text elements for what you need.
    $youWillNeed['rteElements'] = [
      Atoms::prepareRawHtml($node, ['field' => 'field_event_you_will_need']),
    ];

    $mainContent['youWillNeed'] = $youWillNeed;
  }

  if (Helper::isFieldPopulated($node, $fields['downloads']) || Helper::isFieldPopulated($node, $fields['links'])) {
    // Set up options for formDownloads prepare.
    $downloadLinks_options = [
      'heading' => [
        'type' => 'compHeading',
        'title' => t('Additional Resources'),
        'sub' => TRUE,
      ],
    ];
    $mainContent['formDownloads'] = Organisms::prepareFormDownloads($node, $downloadLinks_options);
  }

  // Build contact section, if field is populated.
  if (Helper::isFieldPopulated($node, $fields['contact'])) {
    // Set up options for contact list.
    $contactList_options = [
      'heading' => [
        'title' => t("Contact"),
        'sub' => TRUE,
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
      ],
    ];

    $mainContent['contactList'] = Organisms::prepareContactList($node, $contactList_options);
    // Build sidebar.contactList, which is a subset of pageContent.ContactList.
    // Prepare the quickActions data object.
    $sidebarContacts_options = [
      'groups' => [
        'accordion' => FALSE,
        'isExpanded' => FALSE,
      ],
    ];
    // Prepare the sidebarContact data object.
    $sideContent['contactList'] = Organisms::prepareContactList($node, $sidebarContacts_options);
    unset($sideContent['contactList']['compHeading']);
    $sideContent['contactList']['sidebarHeading']['title'] = t('Contact');
    $sidebar['contactList']['viewSpecific'] = TRUE;
  }

  // Build related links section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_event_ref_event_2')) {
    // Set up options for contact list.
    $eventList_options = [
      'heading' => [
        'title' => t('Related Events'),
        'centered' => TRUE,
      ],
    ];
    $bottomContent['eventListing'] = Organisms::prepareEventListing($node, 'field_event_ref_event_2', $eventList_options);
  }

  $variables['mainContent'] = $mainContent;
  $variables['sideContent'] = $sideContent;
  $variables['bottomContent'] = $bottomContent;
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Services page.
 */
function mass_theme_preprocess_node_service_page(&$variables) {
  $node = $variables['node'];

  // Set static pageBanner properties to pass to prepare function.
  $pageBanner_options = [
    "size" => "overlay",
    "icon" => NULL,
    "color" => "blue",
  ];

  // Make pageBanner data structure available in twig template.
  $variables['pageBanner'] = Organisms::preparePageBanner($node, $pageBanner_options);

  // Prepare components that can be passed to  introPageContent.
  $intro_page_content = [];

  // Prepare the teaser text, if the field is populated.
  if ($node->field_service_body->getValue()) {
    $intro_page_content['teaserText'] = Organisms::prepareTeaserText($node->field_service_body);
  }

  // Prepare the video atom, if the field is populated.
  if ($node->field_service_video->entity) {

    // Set static options for video.
    // @TODO confirm height parameter should be null
    $video_options = [
      "height" => NULL,
      "width" => "480",
      "position" => "right",
    ];

    // Append video data structure to the introPageContent data structure.
    $intro_page_content['video'] = Atoms::prepareVideo($node->field_service_video->entity, $video_options);
  }

  // Prepare the First Time? key actions component, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_service_ref_guide_page_1') || Helper::isFieldPopulated($node, 'field_service_eligibility_info')) {

    // Set up static options for key actions component.
    // @TODO see if we can use this field label instead of hard coding text.
    $keyActions_options = [
      'heading' => [
        'title' => t('First time?'),
      ],
    ];

    // Append the keyActions data structure to introPageContent.
    $intro_page_content['keyActions'] = Organisms::prepareKeyActions($node, 'field_service_ref_guide_page_1', $keyActions_options);
    $eligibilityInfo = Organisms::prepareKeyActions($node, 'field_service_eligibility_info', $keyActions_options);

    foreach ($eligibilityInfo['links'] as $index => $eligibilityLink) {
      $eligibilityLink['text'] = t('Check eligibility');
      $intro_page_content['keyActions']['links'][] = $eligibilityLink;
    }
  }

  // Make the introPageContent data structure available in twig template.
  $variables['introPageContent'] = $intro_page_content;

  // Prepare the introduction sidebar.
  $intro_sidebar = [];

  // Prepare the option array for the service logo widget.
  $serviceImage_options = [
    'style' => 'organization_logo',
    'height' => '',
    'width' => 230,
  ];

  // Prepare the service logo, if the logo field is populated.
  if ($service_logo = Atoms::prepareImage($node, $serviceImage_options)) {
    $intro_sidebar['logo'] = $service_logo;
  }

  // Prepare the sidebar social media widget.
  if (Helper::isFieldPopulated($node, 'field_services_social_links')) {
    $intro_sidebar['social'] = array_merge(Atoms::prepareSidebarHeading(t('Social')), Molecules::prepareIconLinks($node));
  }

  // Make the introSidebar data structure available in twig template.
  $variables['introSidebar'] = $intro_sidebar;

  if (Helper::isFieldPopulated($node, 'field_service_ref_actions_2') || Helper::isFieldPopulated($node, 'field_service_ref_actions')) {
    // Prepare the "What you need to know" action finder.
    $do_action_finder_options = [
      'title' => "What Would You Like to Do?",
      'featuredHeading' => "Featured:",
      'generalHeading' => "All tasks:",
      'hideFilter' => TRUE,
    ];

    // Create the field map for this action finder.
    // @TODO simplify maps and Helpers::getMappedFields by making 1 dimensional.
    $do_action_map = [
      'featured_actions' => ['field_service_ref_actions_2'],
      'all_actions' => ['field_service_ref_actions'],
    ];

    // Only send doActionFinder data structure to twig template if populated.
    if ($do_action_finder = Organisms ::prepareActionFinder($node, $do_action_finder_options, $do_action_map)) {
      $variables['doActionFinder'] = $do_action_finder;
    };
  }

  if (Helper::isFieldPopulated($node, 'field_service_key_info_links_6')) {
    // Prepare the "What you need to know" action finder.
    $learn_action_finder_options = [
      'title' => t("What you need to know"),
      'featuredHeading' => "",
      'generalHeading' => "",
      'hideFilter' => TRUE,
    ];

    // Create the field map for this action finder.
    $learn_action_map = [
      'all_actions' => ['field_service_key_info_links_6'],
    ];

    // Send learnActionFinder data structure to twig template only if populated.
    if ($learn_action_finder = Organisms ::prepareActionFinder($node, $learn_action_finder_options, $learn_action_map)) {
      $variables['learnActionFinder'] = $learn_action_finder;
    };
  }

  // Make the mappedLocations data structure available in twig template.
  if (Helper::isFieldPopulated($node, 'field_service_ref_locations')) {
    $mappedLocations_options = [
      'heading' => [
        'title' => t('Locations'),
        'type' => 'compHeading',
      ],
      'locationDetailsLink' => [
        'display' => TRUE,
        'nid' => $node->id(),
        'path' => \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $node->id()),
      ],
    ];
    $variables['mappedLocations'] = Organisms ::prepareMappedLocations($node->field_service_ref_locations->referencedEntities(), $mappedLocations_options);
  }

  // Get events associated with this service page from view.
  $view_results = views_get_view_result('event_listing', 'event_listing_block', $node->id());

  if (!empty($view_results)) {
    $events = [];
    // Roll up link field.
    foreach ($view_results as $key => $row) {
      $eventEntity = $row->_relationship_entities['reverse__node__field_event_ref_parents'];

      // Create the map of all possible field names to use.
      $event_map = [
        'date' => ['field_event_date'],
        'time' => ['field_event_time'],
        'lede' => ['field_event_lede'],
        'tags' => ['field_event_ref_parents'],
        'links' => ['field_event_links'],
        'image' => ['field_event_image'],
        'logo' => ['field_event_logo'],
        'downloads' => ['field_event_ref_downloads'],
        'contact' => ['field_event_contact_general'],
      ];

      // Determines which field names to use from the map.
      $event_fields = Helper::getMappedFields($eventEntity, $event_map);
      $headerDate_options = [
        'title' => t('Upcoming Events'),
      ];
      $events[] = Molecules::prepareEventTeaser($eventEntity, $event_fields, $headerDate_options);
    }
    $variables['eventListing'] = Atoms::prepareCompHeading($headerDate_options);
    $variables['eventListing']['grid'] = 'true';
    $variables['eventListing']['events'] = $events;
  }

  // Prepare the split columns data structure (send only if there is content).
  $split_columns = [];

  // Prepare Related Services link list data structure.
  if (Helper::isFieldPopulated($node, 'field_service_ref_services_6')) {
    // Set up link list static options.
    // @TODO consider making the title the field label value.
    $linkList_options = [
      'heading' => [
        'title' => t('Related Services'),
        'type' => 'sidebarHeading',
      ],
      'stacked' => TRUE,
    ];

    // Populate the first column.
    $split_columns['columns'][]['items'][] = [
      'path' => '@organisms/by-author/link-list.twig',
      'data' => [
        'linkList' => Organisms::prepareLinkList($node, 'field_service_ref_services_6', $linkList_options),
      ],
    ];
  }

  // Build Additional Resources sidebar heading and action downloads.
  if (Helper::isFieldPopulated($node, 'field_service_file') || Helper::isFieldPopulated($node, 'field_service_links')) {

    $download_options = [
      'heading' => [
        'type' => 'sidebarHeading',
        'title' => t('Additional Resources'),
      ],
    ];

    $split_columns['columns'][]['items'][] =
      [
        'path' => '@organisms/by-author/form-downloads.twig',
        'data' => [
          'formDownloads' => Organisms::prepareFormDownloads($node, $download_options),
        ],
      ];
  }

  // Make the mappedLocations data structure available in twig template.
  $variables['splitColumns'] = $split_columns;
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepares variables for the Service Details page.
 */
function mass_theme_preprocess_node_service_details(&$variables) {
  $node = $variables['node'];

  $taxonomy_terms = [];

  // Get service pages associated with this service detail page from view.
  $view_results = views_get_view_result('service_pages_associate_service_detail', 'associated_service_pages', $node->id());

  // Roll up link field.
  foreach ($view_results as $key => $row) {
    // Get link field.
    if (!empty($row->field_service_key_info_links_6_node_field_data_title) &&
      !empty($row->field_service_key_info_links_6_node_field_data_nid)) {
      $href = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->field_service_key_info_links_6_node_field_data_nid);
      $text = $row->field_service_key_info_links_6_node_field_data_title;
      $taxonomy_terms[] = [
        'href' => $href,
        'text' => $text,
      ];
    }

    // Get ref field.
    if (!empty($row->field_service_eligibility_info_node_field_data_title) &&
      !empty($row->field_service_eligibility_info_node_field_data_nid)) {
      $href = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->field_service_eligibility_info_node_field_data_nid);
      $text = $row->field_service_eligibility_info_node_field_data_title;
      $taxonomy_terms[] = [
        'href' => $href,
        'text' => $text,
      ];
    }
  }

  // Create the map of all possible field names to use.
  $map = [
    'sections' => ['field_service_detail_sections'],
    'links' => ['field_service_detail_links_5'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    "divider" => FALSE,
    'headerTags' => [
      'label' => t('More about:'),
      'taxonomyTerms' => array_unique($taxonomy_terms, SORT_REGULAR),
    ],
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  $pageContent = [];
  $sideBar = [];

  foreach ($node->$fields['sections'] as $index => $section) {
    $variables['numOfSections'] = ++$index;
    $sectionEntity = $section->entity;

    // Create the map of the field names to use.
    $map_ref = [
      'title' => ['field_section_title'],
      'body' => ['field_section_body'],
      'links' => ['field_section_links'],
      'downloads' => ['field_section_downloads'],
      'video_id' => ['field_video_id'],
      'video_source' => ['field_video_source'],
    ];

    // Determines which field names to use from the map.
    $field = Helper::getMappedFields($sectionEntity, $map_ref);

    if (Helper::isFieldPopulated($sectionEntity, $field['video_id']) && Helper::isFieldPopulated($sectionEntity, $field['video_source'])) {
      $pageContent[$index]['video'] = [
        'src' => '//www.' . $sectionEntity->$field['video_source']->value . '.com/embed/' . $sectionEntity->$field['video_id']->value,
      ];
    }

    if (Helper::isFieldPopulated($sectionEntity, $field['title'])) {
      $compHeading_options = [
        'title' => Helper::fieldValue($sectionEntity, $field['title']),
      ];
      $pageContent[$index]['title'] = Atoms::prepareCompHeading($compHeading_options);
    }

    if (Helper::isFieldPopulated($sectionEntity, $field['body'])) {
      // Set up rich text elements for what you need.
      $pageContent[$index]['richText'] = [
        'rteElements' => [
          Atoms::prepareRawHtml($sectionEntity, ['field' => 'field_section_body']),
        ],
      ];
    }

    if (Helper::isFieldPopulated($sectionEntity, $field['downloads']) || Helper::isFieldPopulated($sectionEntity, $field['links'])) {
      // Set up options for formDownloads prepare.
      $downloadLinks_options = [
        'heading' => [
          'type' => 'compHeading',
          'title' => t('Additional Resources'),
          'sub' => TRUE,
        ],
      ];
      $pageContent[$index]['formDownloads'] = Organisms::prepareFormDownloads($sectionEntity, $downloadLinks_options);
    }
  }

  // Make pageContent data structure available in template.
  $variables['pageContent'] = $pageContent;

  // Build related links section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_service_detail_links_5')) {
    // Set up options for link list.
    $linkList_options = [
      'heading' => [
        'type' => 'sidebarHeading',
        'title' => t('Related'),
      ],
      'stacked' => TRUE,
    ];

    $variables['sidebar']['linkList'] = Organisms::preparelinkList($node, 'field_service_detail_links_5', $linkList_options);
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the News page.
 */
function mass_theme_preprocess_node_news(&$variables) {
  $node = $variables['node'];
  $sidebar = [];
  $ap_conformity = FALSE;
  // Create the map of all possible field names to use.
  $map = [
    'body' => ['field_news_body'],
    'location' => ['field_news_location'],
    'video' => ['field_news_video'],
    'signees' => ['field_news_signees'],
    'contact' => ['field_news_media_contac'],
    'links' => ['field_news_links'],
    'sections' => ['field_news_sections'],
    'news_type' => ['field_news_type'],
    'featured_image' => ['field_news_image'],
  ];

  // Determines which field names to use from the map.
  $field = Helper::getMappedFields($node, $map);

  $taxonomyTerms = [];

  if (!empty($node->$field['signees']->entity)) {
    $org_fields = [
      'link' => ['field_state_org_ref_org'],
      'title' => ['field_external_org_name'],
      'lede' => ['field_state_org_description', 'field_external_org_description'],
      'image' => ['field_state_org_photo_url'],
    ];

    $taxonomyTerms = [];

    $signee_ref = Helper::getReferencedEntitiesFromField($node, $field['signees']);

    foreach ($signee_ref as $signee_entity) {
      $org_data = Helper::getMappedFields($signee_entity, $org_fields);
      if ($signee_entity != NULL) {
        if ($signee_entity->getParagraphType()->id == 'state_organization') {
          $taxonomyTerms[] = [
            'href' => $signee_entity->$org_data['link']->entity->toURL()->toString(),
            'text' => Helper::fieldValue($signee_entity->$org_data['link']->entity, 'title'),
          ];

          $promo_options = [
            'title' => Helper::fieldValue($signee_entity->$org_data['link']->entity, 'title'),
          ];
        }
        else {
          $promo_options = [
            'title' => Helper::fieldValue($signee_entity, $org_data['title']),
          ];
        }
      }
      $org_fields + ['link' => TRUE];
      $pageContent['personalMessage']['imagePromos'][] = Molecules::prepareImagePromo($signee_entity, $org_data, $promo_options);
    }
  }

  // Get select News Type Label.
  $allowed_news_types = $node->getFieldDefinition('field_news_type')->getFieldStorageDefinition()->getSetting('allowed_values');
  $type_value = $node->field_news_type->value;

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    'category' => $allowed_news_types[$type_value],
    'divider' => FALSE,
    'headerTags' => [
      'label' => t('Related to:'),
      'taxonomyTerms' => $taxonomyTerms,
    ],
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  $pageContent['pressStatus'] = Molecules::preparePressStatus($node);

  if (Helper::isFieldPopulated($node, $field['featured_image'])) {
    if (!empty($node->$field['featured_image']->entity)) {
      // Set up image element.
      $pageContent['figure']['image'] = [
        'alt' => $node->$field['featured_image']->alt,
        'src' => Helper::getFieldImageUrl($node, '', $field['featured_image']),
      ];
    }
  }

  if (Helper::isFieldPopulated($node, $field['video'])) {
    if (!empty($node->$field['video']->entity)) {
      // Set up video element.
      $videoEntity = $node->$field['video']->entity;
      $pageContent['video'] = [
        'src' => '//www.' . $videoEntity->field_video_source->value . '.com/embed/' . $videoEntity->field_video_id->value,
      ];
    }
  }

  if (Helper::isFieldPopulated($node, $field['body'])) {
    $body = '';
    if (Helper::isFieldPopulated($node, $field['location'])) {
      $location = Helper::fieldValue($node, $field['location']) . ' &mdash; ';
      $body_array = explode('<p>', Helper::fieldValue($node, $field['body']));
      $body_array[1] = $location . $body_array[1];
      $body = implode($body_array, '<p>');
    }
    else {
      $body = Helper::fieldValue($node, $field['location']);
    }

    if (Helper::fieldValue($node, $field['news_type']) == 'press_release') {
      $ap_conformity = TRUE;
    }

    // Set up rich text element.
    $pageContent['richText'] = [
      'rteElements' => [
        [
          'path' => '@atoms/11-text/raw-html.twig',
          'data' => [
            'rawHtml' => [
              'content' => $body,
            ],
          ],
        ],
        [
          'path' => '@atoms/11-text/paragraph.twig',
          'data' => [
            'paragraph' => [
              'text' => '###',
            ],
          ],
        ],
      ],
    ];

    if ($ap_conformity) {
      // AP style conformity.
      $pageContent['richText']['rteElements'][] = [
        'path' => '@atoms/11-text/paragraph.twig',
        'data' => [
          'paragraph' => [
            'text' => '###',
          ],
        ],
      ];
    }
  }

  // Only display Sections for News.
  if (Helper::fieldValue($node, $field['news_type']) == 'news') {
    foreach ($node->$field['sections'] as $index => $section) {
      $variables['numOfSections'] = ++$index;
      $sectionEntity = $section->entity;

      // Create the map of the field names to use.
      $section_with_heading_fields_ref = [
        'title' => ['field_section_title'],
        'body' => ['field_section_body'],
        'links' => ['field_section_links'],
        'actions' => ['field_section_key_actions'],
        'downloads' => ['field_section_downloads'],
      ];

      // Determines which field names to use from the map.
      $section_fields = Helper::getMappedFields($sectionEntity, $section_with_heading_fields_ref);

      if (Helper::isFieldPopulated($sectionEntity, $section_fields['title'])) {
        $compHeading_options = [
          'title' => Helper::fieldValue($sectionEntity, $section_fields['title']),
        ];
        $pageContent[$index]['title'] = Atoms::prepareCompHeading($compHeading_options);
      }

      if (Helper::isFieldPopulated($sectionEntity, $section_fields['body'])) {
        // Set up rich text elements for what you need.
        $pageContent[$index]['richText'] = [
          'rteElements' => [
            Atoms::prepareRawHtml($sectionEntity, ['field' => 'field_section_body']),
          ],
        ];
      }

      if (Helper::isFieldPopulated($sectionEntity, $section_fields['actions'])) {
        $keyActions_options = [
          'heading' => [
            'title' => t('Key Actions'),
          ],
        ];

        // Append the keyActions data structure to introPageContent.
        $pageContent[$index]['keyActions'] = Organisms::prepareKeyActions($sectionEntity, $section_fields['actions'], $keyActions_options);
      }

      if (Helper::isFieldPopulated($sectionEntity, $section_fields['downloads']) || Helper::isFieldPopulated($sectionEntity, $section_fields['links'])) {
        // Set up options for formDownloads prepare.
        $downloadLinks_options = [
          'heading' => [
            'type' => 'compHeading',
            'title' => t('Additional Resources'),
            'sub' => TRUE,
          ],
        ];
        $pageContent[$index]['formDownloads'] = Organisms::prepareFormDownloads($sectionEntity, $downloadLinks_options);
      }
    }
  }

  // Build contact section, if field is populated.
  if (Helper::isFieldPopulated($node, $field['contact'])) {
    // Set up options for contact list.
    $contactList_options = [
      'heading' => [
        'title' => t("Media Contact"),
      ],
      'groups' => [
        'accordion' => TRUE,
        'isExpanded' => FALSE,
      ],
    ];

    $pageContent['contactList'] = Organisms::prepareContactList($node, $contactList_options);

    // Build sidebar.contactList, which is a subset of pageContent.ContactList.
    $sidebar['contactList'] = Helper::getPrimaryContactPhoneOnlineContactList($pageContent['contactList']);
    unset($sidebar['contactList']['compHeading']);
    $sidebar['contactList']['sidebarHeading']['title'] = t('Media Contact');
    $sidebar['contactList']['viewSpecific'] = TRUE;
  }

  // Build related links section, if field is populated.
  if (Helper::isFieldPopulated($node, $field['links'])) {
    // Set up options for link list.
    $pressListing_options = [
      'heading' => [
        'type' => 'sidebarHeading',
        'title' => t('Related'),
      ],
      'stacked' => TRUE,
      'useEyebrow' => [
        'news',
        'regulation',
      ],
      'category' => $allowed_news_types[$type_value],
    ];

    $sidebar['pressListing'] = Organisms::preparePressListing($node, $field['links'], $pressListing_options);
  }

  $variables['pageContent'] = $pageContent;
  $variables['sidebar'] = $sidebar;
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Guide page.
 */
function mass_theme_preprocess_node_guide_page(&$variables) {
  $node = $variables['node'];

  // Create the map of all possible field names to use.
  $map = [
    'sections' => ['field_guide_page_sections'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  // Set static illustratedHeader properties to pass to prepare function.
  $illustratedHeader_options = [];

  // Make illustratedHeader data object available in twig template.
  $variables['illustratedHeader'] = Organisms::prepareIllustratedHeader($node, $illustratedHeader_options);

  // Make stacked section data object available in twig template.
  foreach ($node->$fields['sections'] as $section) {
    $pageContent = [];
    $sideBar = [];

    $sectionEntity = $section->entity;

    // Create the map of all possible field names to use.
    $map_ref = [
      'title' => ['field_guide_section_name'],
      'time' => ['field_guide_section_time'],
      'body' => ['field_guide_section_body'],
      'stat' => ['field_guide_section_stat'],
      'alert' => ['field_guide_section_alert_text'],
      'actions' => ['field_guide_section_links_4'],
      'downloads' => ['field_guide_section_downloads'],
      'contacts' => ['field_guide_ref_contacts_3'],
      'links' => ['field_guide_section_link'],
      'heading' => [
        'field_guide_section_heading_1',
        'field_guide_section_heading_2',
        'field_guide_section_heading_3',
      ],
    ];

    // Determines which field names to use from the map.
    $field = Helper::getMappedFields($sectionEntity, $map_ref);

    if (Helper::isFieldPopulated($sectionEntity, $field['time'])) {
      $pageContent[] = [
        'path' => '@organisms/by-author/callout-time.twig',
        'data' => [
          'calloutTime' => Molecules::prepareCalloutTime($sectionEntity, $field['time']),
        ],
      ];
    }

    if (isset($field['body']) && Helper::isFieldPopulated($sectionEntity, $field['body'])) {
      $elements = [];
      if (Helper::isFieldPopulated($sectionEntity, $field['stat'])) {
        $stat_options = [
          'pull' => 'right',
        ];
        $elements[] = Molecules::prepareCalloutStats($sectionEntity, $field['stat'], $stat_options);
      }
      $elements[] = Atoms::prepareRawHtml($sectionEntity, ['field' => $field['body']]);
      $pageContent[] = Helper::prepareRichTextElements($elements);
    }

    if (isset($field['heading']) && Helper::isFieldPopulated($sectionEntity, $field['heading'])) {
      $pageContent[] = Organisms::prepareSplitColumns($sectionEntity);
    }

    if (Helper::isFieldPopulated($sectionEntity, $field['alert'])) {
      $pageContent[] = Molecules::prepareCalloutAlert($sectionEntity, $field['alert']);
    }

    if (Helper::isFieldPopulated($sectionEntity, $field['actions'])) {
      $actions_options = [
        'heading' => [
          'type' => 'compHeading',
          'title' => t('Key Actions'),
          'sub' => TRUE,
        ],
      ];
      $pageContent[] = [
        'path' => '@organisms/by-author/key-actions.twig',
        'data' => [
          'keyActions' => Molecules::prepareKeyActions($sectionEntity, $field['actions'], $actions_options),
        ],
      ];
    }

    if (Helper::isFieldPopulated($sectionEntity, $field['downloads']) ||
      Helper::isFieldPopulated($sectionEntity, $field['links'])) {

      $downloads_options = [
        'heading' => [
          'type' => 'compHeading',
          'title' => t('Additional Resources'),
        ],
      ];
      $pageContent[] =
        [
          'path' => '@organisms/by-author/form-downloads.twig',
          'data' => [
            'formDownloads' => Organisms::prepareFormDownloads($sectionEntity, $downloads_options),
          ],
        ];
    }
    if (isset($field['contacts']) && Helper::isFieldPopulated($sectionEntity, $field['contacts'])) {
      $sideBar[] = [
        'path' => '@atoms/04-headings/sidebar-heading.twig',
        'data' => [
          'sidebarHeading' => [
            'title' => t('Key Agencies'),
          ],
        ],
      ];

      // Prepare the quickActions data object.
      $sidebarContacts_options = [
        'heading' => [
          'type' => 'coloredHeading',
          'title' => t('Contacts'),
        ],
      ];

      $contact_items = Organisms::prepareSidebarContact($sectionEntity, $sidebarContacts_options);

      foreach ($contact_items['items'] as $contact) {
        $sideBar[] = [
          'path' => '@molecules/contact-us.twig',
          'data' => $contact,
        ];
      }
    }

    $sections[] = [
      'title' => Helper::fieldValue($sectionEntity, $field['title']),
      'id' => Helper::createIdTitle(Helper::fieldValue($sectionEntity, $field['title'])),
      'pageContent' => $pageContent,
      'sideBar' => $sideBar,
    ];
  }

  $variables['stackedRowSections'] = $sections;

  // Jump link options.
  $jumplink_options = [
    'title' => t('In this guide'),
  ];
  $variables['jumpLinks'] = Organisms::prepareJumpLinks($sections, $jumplink_options);

  // Prepare the suggestedPages data object.
  $suggested_options = [
    'title' => t('Related Guides'),
    'style' => 'thumbnail_130x160',
    'view' => 'guide',
  ];
  $variables['suggestedPages'] = Organisms::prepareSuggestedPages($node, $suggested_options);
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Location Details page.
 */
function mass_theme_preprocess_node_location_details(&$variables) {
  $node = $variables['node'];

  // Create the map of all possible field names to use.
  $map = [
    'sections' => ['field_location_details_sections'],
    'links' => ['field_location_details_links_5'],
  ];

  // Determines which field names to use from the map.
  $fields = Helper::getMappedFields($node, $map);

  // Set static pageHeader properties to pass to prepare function.
  $pageHeader_options = [
    "divider" => FALSE,
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageHeader'] = Organisms::preparePageHeader($node, $pageHeader_options);

  $pageContent = [];
  $sideBar = [];

  foreach ($node->$fields['sections'] as $index => $section) {
    $variables['numOfSections'] = ++$index;
    $sectionEntity = $section->entity;

    // Create the map of the field names to use.
    $map_ref = [
      'title' => ['field_section_title'],
      'body' => ['field_section_body'],
      'downloads' => ['field_section_downloads'],
      'links' => ['field_section_links'],
      'video_id' => ['field_video_id'],
      'video_source' => ['field_video_source'],
      'address' => ['field_address_text'],
      'map' => ['field_lat_long'],
    ];

    // Determines which field names to use from the map.
    $field = Helper::getMappedFields($sectionEntity, $map_ref);

    if (Helper::isFieldPopulated($sectionEntity, $field['video_id']) && Helper::isFieldPopulated($sectionEntity, $field['video_source'])) {
      $pageContent[$index]['video'] = [
        'src' => '//www.' . $sectionEntity->$field['video_source']->value . '.com/embed/' . $sectionEntity->$field['video_id']->value,
      ];
    }

    if (Helper::isFieldPopulated($sectionEntity, $field['title'])) {
      $compHeading_options = [
        'title' => Helper::fieldValue($sectionEntity, $field['title']),
      ];
      $pageContent[$index]['title'] = Atoms::prepareCompHeading($compHeading_options);
    }

    if (Helper::isFieldPopulated($sectionEntity, $field['body'])) {
      // Set up rich text elements for what you need.
      $pageContent[$index]['richText'] = [
        'rteElements' => [
          Atoms::prepareRawHtml($sectionEntity, ['field' => 'field_section_body']),
        ],
      ];
    }

    if (Helper::isFieldPopulated($sectionEntity, $field['downloads']) || Helper::isFieldPopulated($sectionEntity, $field['links'])) {
      // Set up options for formDownloads prepare.
      $downloadLinks_options = [
        'heading' => [
          'type' => 'compHeading',
          'title' => t('Additional Resources'),
          'sub' => TRUE,
        ],
      ];
      $pageContent[$index]['formDownloads'] = Organisms::prepareFormDownloads($sectionEntity, $downloadLinks_options);
    }

    if (Helper::isFieldPopulated($sectionEntity, $field['map']) && Helper::isFieldPopulated($sectionEntity, $field['address'])) {
      $pageContent[$index]['actionMap'] = Molecules::prepareGoogleMap([0 => $sectionEntity->$field['map']], $sectionEntity->$field['address']->value);
    }
  }

  // Make pageContent data structure available in template.
  $variables['pageContent'] = $pageContent;

  // Build related links section, if field is populated.
  if (Helper::isFieldPopulated($node, 'field_location_details_links_5')) {
    // Set up options for link list.
    $linkList_options = [
      'heading' => [
        'type' => 'sidebarHeading',
        'title' => t('Related'),
      ],
      'stacked' => TRUE,
    ];

    $variables['sidebar']['linkList'] = Organisms::preparelinkList($node, 'field_location_details_links_5', $linkList_options);
  }
}

/**
 * Implements hook_library_info_alter().
 */
function mass_theme_library_info_alter(&$libraries) {
  if (isset($libraries['google-map-field-renderer'])) {
    // Remove google map field style.
    unset($libraries['google-map-field-renderer']['css']['theme']['css/google-map-field-renderer.css']);
  }
}

/**
 * Implements hook_preprocess_block().
 */
function mass_theme_preprocess_block(&$variables) {
  // Get base_path into our block.twig templates
  // http://data.agaric.com/how-get-base-path-your-drupal-8-site-twig-template
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_menu().
 */
function mass_theme_preprocess_menu(&$variables) {
  // Use this formatting for Utility nav.
  if (array_key_exists('menu_name', $variables) && $variables['menu_name'] == 'utility') {
    // Get Theme settings languages if available.
    if (theme_get_setting('languages', 'mass_theme')) {
      $variables['languages'] = implode(',', array_filter(theme_get_setting('languages', 'mass_theme')));
    }

    foreach ($variables['items'] as &$item) {
      $ref_node = $item['url']->getRouteParameters();
      // Load it up and get the field.
      if ($node = Node::load($ref_node['node'])) {
        // Get aria label field value.
        $aria_label = '';
        if ($node->hasField('field_aria_label') && $node->get('field_aria_label')->value) {
          $aria_label = $node->get('field_aria_label')->value;
        }
        $icon = '';
        // Get icon.
        if ($node->hasField('field_icon_term') && array_key_exists('0', $node->get('field_icon_term')->referencedEntities())) {
          $icon = $node->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
        }
        // Get links.
        $links = [];
        if ($node->hasField('field_links')) {
          foreach ($node->get('field_links') as $link) {
            $links[] = [
              'type' => UrlHelper::isExternal($link->uri) ? 'external' : 'internal',
              'text' => $link->title,
              'href' => UrlHelper::isExternal($link->uri) ? $link->uri : Url::fromUri($link->uri),
            ];
          }
        }
        $items[] = [
          'text'      => $item['title'],
          'ariaLabelText' => $aria_label,
          'icon'      => icon_path($icon),
          'closeText' => t('Close'),
          'panel'     => [
            'description' => [
              'richText' => [
                'rteElements' => [
                  [
                    'path' => '@atoms/11-text/paragraph.twig',
                    'data' => [
                      'paragraph' => [
                        'text' => $node->hasField('body') ? strip_tags($node->body->value, '<br><a><b>') : '',
                      ],
                    ],
                  ],
                ],
              ],
            ],
            'links' => $links,
          ],
        ];
      }
    }
    $variables['items'] = $items;
  }
  // Use this formatting for Main Nav aka Topic Nav.
  if (array_key_exists('menu_name', $variables) && $variables['menu_name'] == 'main') {
    $mainNav = [];
    foreach ($variables['items'] as &$item) {
      $subNav = [];
      foreach ($item['below'] as $link) {
        $subNav[] = [
          'href' => $link['url'],
          'text' => $link['title'],
        ];
      }
      $mainNav[] = [
        'href'   => $item['url'],
        'text'   => $item['title'],
        'active' => $item['in_active_trail'],
        'subNav' => $subNav,
      ];
    }
    $variables['mainNav'] = $mainNav;
  }
}

/**
 * Implements mass_theme_add_regions_to_node().
 *
 * Add regions to node templates.
 */
function mass_theme_add_regions_to_node($allowed_regions, &$variables) {
  // Retrieve active theme.
  $theme = \Drupal::theme()->getActiveTheme()->getName();

  // Retrieve theme regions.
  $available_regions = system_region_list($theme, 'REGIONS_ALL');

  // Validate allowed regions with available regions.
  $regions = array_intersect(array_keys($available_regions), $allowed_regions);

  // For each region.
  foreach ($regions as $key => $region) {

    // Load region blocks.
    $blocks = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->loadByProperties(['theme' => $theme, 'region' => $region]);

    // Capture viewable blocks and their settings to $build.
    $build = [];
    foreach ($blocks as $key => $block) {
      if ($block->access('view')) {
        $block = Block::load($key);
        $block_content = \Drupal::entityTypeManager()
          ->getViewBuilder('block')
          ->view($block);
        $build[$key] = $block_content;
      }
    }

    // Add build to region.
    $variables[$region] = $build;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function mass_theme_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Retrieve view mode.
  $view_mode = $variables['view_mode'];

  // Array of allowed view modes (for performance so as to not execute on
  // unneeded nodes).
  $allowed_view_modes = ['full'];

  // If current view mode is in allowed view modes list, pass to
  // mass_theme_add_regions_to_node().
  // This has the effect of making blocks in the specified theme regions
  // available to be rendered by the node template as, e.g. "pre_content".
  // @see templates/content/node.html.twig
  if (in_array($view_mode, $allowed_view_modes)) {
    // Allowed regions (for performance so as to not execute for unneeded
    // region).
    $allowed_regions = ['pre_content', 'post_content', 'section_topics'];
    mass_theme_add_regions_to_node($allowed_regions, $variables);
  }

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_node_page() or foo_preprocess_section_landing().
  $function = __FUNCTION__ . '_' . $node->getType();
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Preprocess our Section Landing node content.
 */
function mass_theme_preprocess_node_section_landing(&$variables) {
  $node = $variables['node'];

  // This is a required icon field, but lets check.
  if (array_key_exists('0', $node->get('field_icon_term')->referencedEntities())) {
    $icon = $node->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
    $variables['icon_path'] = icon_path($icon);
  }

  if ($node->field_featured_image->entity) {
    $variables['hero800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_image->entity->getFileUri());
  }

  // TODO: determine if we need another ImageStyle.
  if ($node->field_featured_mobile_image->entity) {
    $variables['mobile800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_mobile_image->entity->getFileUri());
  }

  // Get our subtopics (sections) view.
  $view_results = views_get_view_result('ordered_topics', 'ordered_topic_list_block', $node->id());
  $sections = [];
  // Roll this up and give the twig tpl what it expects.
  foreach ($view_results as $key => $row) {
    $icon_path = '';
    $links = [];
    // Wrap up our links for each subtopic.
    if ($row->_entity->hasField('field_common_content')) {
      foreach ($row->_entity->get('field_common_content')->referencedEntities() as $link) {
        $is_external = FALSE;
        if ($link->getType() == 'action') {
          if (isset($link->get('field_external_url')[0])) {
            $is_external = TRUE;
          }
        }
        // If we have an external URL, lets use that instead of internal paths.
        if ($is_external) {
          $external_link = $link->get('field_external_url')->first()->getValue();
          $link_path = $external_link['uri'];
        }
        else {
          $link_path = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $link->get('nid')->value);
        }
        $links[] = ['text' => $link->get('title')->value, 'href' => $link_path];
      }
    }

    // Wrap up each section with links.
    if (isset($row->_entity->get('field_icon_term')->referencedEntities()[0])) {
      $icon = $row->_entity->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
      $icon_path = icon_path($icon);
    }
    $sections[] = [
      'id' => $row->_entity->get('nid')->value,
      'catIcon' => [
        'icon' => $icon_path,
        'small' => 'true',
      ],
      'title' => [
        'href' => \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->_entity->get('nid')->value),
        'text' => $row->_entity->get('title')->value,
      ],
      'description' => $row->_entity->get('field_lede')->value,
      'links' => $links,
    ];
  }
  // Send to twig.
  $variables['sections'] = $sections;
}

/**
 * Implements hook_preprocess_node().
 *
 * Node action alterations.
 */
function mass_theme_preprocess_node_action(&$variables) {
  $node = $variables['node'];

  if ($variables['view_mode'] == 'full') {
    $field_action_parent = $node->get('field_action_parent');
    $taxonomy_terms = [];
    foreach ($field_action_parent->referencedEntities() as $term) {
      $link_path = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $term->get('nid')->value);
      $taxonomy_terms[] = ['url' => $link_path, 'term' => $term->get('title')->value];
    }
    $variables['taxonomyTerms'] = $taxonomy_terms;

    $field_action_sidebar = $node->get('field_action_sidebar');

    // Get the subheads for the sidebar and filter out the quick action.
    if ($field_action_sidebar->count() > 0) {
      $delta = 0;
      $quick_actions_section = FALSE;
      $quick_actions = [];

      foreach ($field_action_sidebar->referencedEntities() as $paragraph) {
        $paragraph->getType();
        if ($paragraph->getType() == 'subhead') {
          $title = $paragraph->field_title->value;
          if ($title == 'Quick Actions') {
            $quick_actions_section = TRUE;
          }
          else {
            $quick_actions_section = FALSE;
          }
        }
        if ($quick_actions_section == TRUE) {
          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
          $build = $view_builder->view($paragraph, 'sidebar');
          $quick_actions[] = $build;
        }
        $delta++;
      }
      $variables['quick_actions'] = $quick_actions;
    }
  }

  if ($variables['view_mode'] == 'teaser_simple' || $variables['view_mode'] == 'teaser') {
    $field_external_link = $node->get('field_external_url');

    // If we have an external URL, lets use that instead of internal paths.
    if ($field_external_link->count() > 0) {
      $link = $field_external_link->first()->getValue();
      $variables['link_url'] = $variables['link_url'] = Url::fromUri($link['uri']);
      $variables['link_title'] = $variables['label'];
      $variables['link_type'] = 'external';
    }
    else {
      $variables['link_type'] = 'internal';
      $variables['link_title'] = $variables['label'];
      $variables['link_url'] = $variables['url'];
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Node stacked layout alterations.
 */
function mass_theme_preprocess_node_stacked_layout(&$variables) {
  $node = $variables['node'];
  $image_field = $node->get('field_photo');
  $field_related_content = $node->get('field_related_content');

  foreach ($node->get('field_bands')->referencedEntities() as $paragraph) {
    if ($paragraph->getType() == 'search_band') {
      // If we have a search band, lets our node object and node template know.
      $variables['search_band'] = TRUE;
    }
  }

  if ($image_field->count() > 0) {
    $values = $image_field->getValue();
    $variables['image_url'] = Helper::getFieldImageUrl($node, 'illustrated_header', 'field_photo');
    $variables['image_alt'] = $values[0]['alt'];
    $variables['image_url_teaser_simple'] = Helper::getFieldImageUrl($node, 'thumbnail_130x160', 'field_photo');
  }

  if ($field_related_content->count() > 0) {
    $items = $field_related_content->referencedEntities();
  }

  if (!empty($items)) {
    $related_content = [];
    foreach ($items as $item) {
      $related_content[] = [
        'link' => [
          'type' => 'internal',
          'quickaction' => 'FALSE',
          'href' => $item->url(),
          'text' => $item->getTitle(),
          'image' => Helper::getFieldImageUrl($item, 'thumbnail_130x160', 'field_photo'),
          'label' => trim($item->get('field_label')->value) == 'Guide' ? 'Guide:' : '',
        ],
      ];
    }
    $variables['related_content'] = $related_content;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Node stacked layout alterations.
 */
function mass_theme_preprocess_node_2up_stacked_band(&$variables) {
  $node = $variables['node'];

  $label_clean = strtolower($node->getTitle());
  $label_clean = Html::cleanCssIdentifier($label_clean);
  $variables['label_clean'] = $label_clean;
}

/**
 * Implements hook_preprocess_node().
 *
 * Node stacked layout alterations.
 */
function mass_theme_preprocess_node_1up_stacked_band(&$variables) {
  $node = $variables['node'];

  $label_clean = strtolower($node->getTitle());
  $label_clean = Html::cleanCssIdentifier($label_clean);
  $variables['label_clean'] = $label_clean;
}

/**
 * Implements hook_preprocess_node().
 *
 * Node subtopic alterations.
 */
function mass_theme_preprocess_node_subtopic(&$variables) {
  $node = $variables['node'];

  $variables['desktop_finder_image'] = Helper::getFieldImageUrl($node, 'action_finder', 'field_featured_image');
  $variables['mobile_finder_image'] = Helper::getFieldImageUrl($node, 'action_finder_mobile', 'field_featured_mobile_image');
  if (empty($variables['mobile_finder_image'])) {
    $variables['mobile_finder_image'] = Helper::getFieldImageUrl($node, 'action_finder_mobile', 'field_featured_image');
  }

  // Load Instance of the secondary menu block with variables.
  $all_actions_view = \Drupal::entityTypeManager()->getStorage('block')->load('views_block__subtopics_all_actions_block_1');
  if (!empty($all_actions_view)) {
    $all_actions_view_content = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($all_actions_view);
    if ($all_actions_view_content) {
      // Add block content to build array.
      $variables['content']['all_actions_view'] = $all_actions_view_content;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Preprocess our Topic node content.
 */
function mass_theme_preprocess_node_topic(&$variables) {
  $node = $variables['node'];
  $icon_terms = $node->get('field_icon_term');

  // Get path_alias for breadcrumb in twig template.
  $variables['path_alias'] = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $node->get('field_section')->entity->nid->value);

  if ($icon_terms->count() > 0) {
    $terms = $icon_terms->referencedEntities();
    $term = current($terms);
    $variables['icon'] = icon_path($term->get('field_sprite_name')->value);
  }

  if ($node->field_featured_image->entity) {
    $variables['hero800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_image->entity->getFileUri());
  }

  if ($variables['view_mode'] == 'full') {
    // Get our callout links view.
    $view_results = views_get_view_result('callout_links', 'block_callout_links', $node->id());
    $callout_links = [];

    // Roll this up and give the twig tpl what it expects.
    foreach ($view_results as $key => $row) {

      // Common contact can be Actions or Subtopics,
      // so we need to check for the field.
      if ($row->_relationship_entities['field_common_content']->hasField('field_external_url')) {
        $external_url = $row->_relationship_entities['field_common_content']->get('field_external_url')->getValue();
      }
      $callout_links[] = [
        'calloutLink' => [
          'type'        => (!empty($external_url[0]['uri'])) ? 'external' : '',
          'quickaction' => 'FALSE',
          'href'        => (!empty($external_url[0]['uri'])) ? $external_url[0]['uri'] : \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->_relationship_entities['field_common_content']->get('nid')->value),
          'text'        => $row->_relationship_entities['field_common_content']->get('title')->value,
        ],
      ];
    }
    // Send to twig.
    $variables['calloutLinks'] = $callout_links;

    // Get our subtopics (sections) view.
    $view_results = views_get_view_result('subtopics', 'ordered_subtopic_list_block', $node->id());
    $sections = [];
    // Roll up the list of subtopics and give the twig tpl the links it expects.
    foreach ($view_results as $key => $row) {
      $links = [];
      // Wrap up our links for each subtopic.
      foreach ($row->_entity->get('field_topic_callout_links') as $link) {
        // Set default value.
        $link_path = Url::fromUri($link->uri);

        // If this is a link to a node, check for an external_url.
        // @todo: find a better way to test for node links.
        if (Unicode::strpos($link->uri, 'entity:node/') !== FALSE) {
          $nid = explode('/', $link->uri)[1];
          $linked_node = Node::load($nid);
          // Check that we have a node and that it has an external_url field.
          if ($linked_node && $linked_node->hasField('field_external_url')) {
            $external_link = $linked_node->get('field_external_url')->uri;
            // Check the external url field value is not empty.
            if (!empty($external_link)) {
              $link_path = $external_link;
            }
          }
        }
        $links[] = ['text' => $link->title, 'href' => $link_path];
      }
      // Wrap up each section with links.
      $sections[] = [
        'id' => $row->_entity->get('nid')->value,
        'title' => [
          'href' => \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->_entity->get('nid')->value),
          'text' => $row->_entity->get('title')->value,
        ],
        'description' => $row->_entity->get('field_lede')->value,
        'links' => $links,
      ];
    }
    // Send to twig.
    $variables['sections'] = $sections;
  }

  if ($variables['view_mode'] == 'teaser') {
    // Get our subtopics from view.
    $view_results = views_get_view_result('subtopics', 'section_links', $node->id());
    $links = [];
    // Roll this up for our twig template.
    foreach ($view_results as $key => $row) {
      $links[] = [
        'href' => \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->node_nid),
        'text' => $row->_entity->get('title')->value,
      ];
    }
    // Send to twig.
    $variables['links'] = $links;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Node alert (banner) alterations.
 */
function mass_theme_preprocess_node_emergency_alerts(&$variables) {
  if ('teaser' == $variables['view_mode']) {
    $node = $variables['node'];

    // Create and populate the data object which the template is expecting.
    $emergency_alerts = [];
    // Set alert id = node updated time.
    $emergency_alerts['id'] = $node->get('changed')->value;

    // Set banner accordion button text (css will format).
    $emergency_alerts['buttonAlert']['hideText'] = 'hide';
    $emergency_alerts['buttonAlert']['showText'] = 'show';
    $emergency_alerts['buttonAlert']['text'] = 'alerts';

    // Set alert banner headline = node title.
    $emergency_alerts['emergencyHeader']['title'] = $node->get('title')->value;

    // Get the alert paragraph field.
    $field_alert = $node->get('field_alert');

    // Iterate through alert paragraph instances.
    // Populate alerts array with individual alert content.
    if ($field_alert->count() > 0) {
      $delta = 0;
      $alerts = [];

      foreach ($field_alert->referencedEntities() as $paragraph) {

        // Format the alert timestamp to match new date format that meets spec.
        $raw_timestamp_str = $paragraph->get('field_emergency_alert_timestamp')->value;
        // Tell PHP that the timestamp is currently in UTC.
        $dateTime = new DateTime($raw_timestamp_str, new DateTimeZone('UTC'));
        $timezone = 'America/New_York';
        $dateTime->setTimeZone(new DateTimeZone($timezone));
        $timestamp = $dateTime->format('m.d.y, g:i a');

        // Get the alert optional "read more" link.
        $url = $paragraph->get('field_emergency_alert_link')->first();
        $link = '';
        if ($url) {
          $href = $url->getUrl()->toString();
          // Get the uuid of the alert instance.
          $alert_instance_id = $paragraph->get('id')->first()->value;

          // Target individual alert on alert landing page links.
          if ('/alerts' == $href) {
            $href .= '#' . $alert_instance_id;
          }

          // Populate optional alert "Read More" link data object.
          $link = [
            'chevron' => 'true',
            'text' => $url->getValue()['title'],
            'href' => $href,
            'type' => (UrlHelper::isExternal($url->getUrl()->toString())) ? 'external' : 'internal',
          ];
        }

        $alerts[] = [
          'message' => $paragraph->get('field_emergency_alert_message')->value,
          'timeStamp' => $timestamp,
          'link' => $link,
        ];

        $delta++;
      }

      $emergency_alerts['alerts'] = $alerts;

      // Make emergency alerts data object available in template.
      $variables['emergencyAlerts'] = $emergency_alerts;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Various global preprocessing.
 */
function mass_theme_preprocess_html(&$variables) {
  // Add Schema.org markup for body.
  $variables['deployment_identifier'] = Settings::get('deployment_identifier');
  if (isset($variables['node_type'])) {
    $variables['attributes']['vocab'][] = 'http://schema.org/';
    $variables['attributes']['typeof'][] = 'WebPage';
    // Add a body class for Action nodes.
    if ($variables['node_type'] == 'action') {
      $variables['attributes']['class'][] = 'action-page';
    }
  }

  if (isset($variables['root_path']) && $variables['root_path'] == 'search') {
    $variables['attributes']['class'][] = 'search-results-page';
  }

  // Add a variable for the emergency alerts banner view for front template.
  $is_front_page = \Drupal::service('path.matcher')->isFrontPage();

  if ($is_front_page) {
    $variables['alerts_banner_view'] = views_embed_view('emergency_alert', 'block_banner');
    // Add a body class if this is the front.
    $variables['attributes']['class'][] = 'is-front';
  }
  else {
    $variables['attributes']['class'][] = 'not-front';
  }

  // Add social media links for the organization info in page-meta.html.twig.
  $social_menu = \Drupal::menuTree()->load('social', new MenuTreeParameters());
  /** @var \Drupal\Core\Menu\MenuLinkTreeElement $menu_item */
  foreach ($social_menu as $menu_item) {
    $socialMedia[] = $menu_item->link->getUrlObject()->getUri();
  }

  // The colored state seal to be used by search engines.
  // Normally we would use theme_get_setting('logo.url')
  $logoSrc = "/images/stateseal-color.png";
  $hostname = \Drupal::request()->getSchemeAndHttpHost();
  // Pass Schema.org markup data to page-meta.html.twig.
  $metadata = [
    'id' => $hostname . "/#organization",
    'urlDomain' => $hostname,
    'socialMediaLinks' => json_encode($socialMedia, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT),
    'urlPath' => \Drupal::request()->getBaseUrl() . \Drupal::request()->getPathInfo(),
    'logoSrc' => $logoSrc,
    'siteName' => 'Mass.gov',
    'siteAltName' => 'The Official Website of the Commonwealth of Massachusetts',
    'siteDescription' => '',
    'siteKeywords' => '',
    'siteCopyright' => 'Commonwealth of Massachusetts',
    'orgName' => 'Commonwealth of Massachusetts',
    'schemaPageType' => $is_front_page ? 'Home' : '',
  ];
  Helper::addMetatagData($metadata);

  $variables['pageMetaData'] = $metadata;
}

/**
 * Implements hook_preprocess_page().
 *
 * Remove page search if we're using our search band in stacked layout.
 */
function mass_theme_preprocess_page(&$variables) {
  // Get Theme settings languages if available.
  if (theme_get_setting('languages', 'mass_theme')) {
    $variables['languages'] = implode(',', array_filter(theme_get_setting('languages', 'mass_theme')));
  }

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $node = $variables['node'];

    // When loading a revision only the nid is returned. We need the object.
    if (ctype_digit($node)) {
      $node = Node::load($node);
    }

    // Trap errors.
    if (!is_null($node)) {
      // Get the node bundle (content type).
      $bundle = $node->bundle();

      // Map out classes to be added to <main> based on bundle.
      $map = [
        'service_page' => 'ma__services',
        'location' => 'ma__details',
        'how_to_page' => 'ma__details',
      ];

      // Send main_class variable to page.
      if (array_key_exists($bundle, $map)) {
        $variables['main_class'] = $map[$bundle];
      }

      // If we're using search band, lets tell page twig about it.
      if ($node->hasField('field_bands') && $node->get('field_bands')->count() > 0) {
        foreach ($node->get('field_bands')->referencedEntities() as $paragraph) {
          if ($paragraph->getType() == 'search_band') {
            $variables['hideHeaderSearch'] = TRUE;
          }
        }
      }
    }
  }

  $social_menu = \Drupal::menuTree()->load('social', new MenuTreeParameters());
  $footerSocialLinks = [];
  foreach ($social_menu as $menu_item) {
    $icon = icon_path(strtolower($menu_item->link->getTitle()));
    $footerSocialLinks[] = [
      'altText' => t('Follow us on :service', [':service' => $menu_item->link->getTitle()]),
      'href' => $menu_item->link->getUrlObject(),
      'icon' => $icon,
      'linkType' => strtolower($menu_item->link->getTitle()),
    ];
  }
  $variables['footerSocialLinks'] = [
    'items' => $footerSocialLinks,
  ];

}

/**
 * Implements hook_preprocess_field().
 */
function mass_theme_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];

  // Get the subheads for the action jump menu.
  if ($element['#field_name'] == 'field_action_details') {
    $delta = 0;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      if ($paragraph->getType() == 'subhead') {
        $title = $paragraph->field_title->value;
        $key = strtolower($title);
        $key = Html::cleanCssIdentifier($key);
        $variables['subheads'][$key] = $title;
      }
      $delta++;
    }
  }

  // Get the subheads for the sidebar and filter out the quick action.
  if ($element['#field_name'] == 'field_action_sidebar') {
    $delta = 0;
    $quick_actions_section = FALSE;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      $paragraph->getType();
      if ($paragraph->getType() == 'subhead') {
        $title = $paragraph->field_title->value;
        if ($title == 'Quick Actions') {
          $quick_actions_section = TRUE;
        }
        else {
          $quick_actions_section = FALSE;
        }
      }
      if ($quick_actions_section == TRUE) {
        unset($variables['items'][$delta]);
      }
      $delta++;
    }
  }

  // Get the subheads for the action jump menu.
  if ($element['#field_name'] == 'field_bands') {
    $delta = 0;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      // Check paragraph type.
      if ($paragraph->getType() == 'subhead') {
        // Get data from paragraph type field.
        $title_field = $paragraph->get('field_title');
        // Get the titles of a stack-layout for jump menu.
        if (!empty($title_field)) {
          $title = $title_field->getValue();
          $key = strtolower($title[0]['value']);
          $key = Html::cleanCssIdentifier($key);
          $variables['subheads'][$key] = $title[0]['value'];
        }
      }
      $delta++;
    }

    // Rebuild this array to include subheads into bands.
    $delta = 0;
    $bands = [];
    $subhead = [];
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      // Check paragraph type for subhead.
      if ($paragraph->getType() == 'subhead') {
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
        $build = $view_builder->view($paragraph, 'stacked');
        $subhead = $build;
      }
      // Check paragraph type for stacked band.
      if ($paragraph->getType() == '1up_stacked_band' || $paragraph->getType() == '2up_stacked_band' || $paragraph->getType() == 'action_set' || $paragraph->getType() == 'search_band') {
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
        $band = $view_builder->view($paragraph, 'stacked');
        $bands[$delta][] = $subhead;
        $bands[$delta][] = $band;
        // Since we've entered our subhead, clear it out.
        $subhead = [];
      }

      // If we have a search band, lets hide jump links.
      if ($paragraph->getType() == 'search_band') {
        $variables['search_band'] = TRUE;
      }

      $delta++;
    }
    $use_alt_header = FALSE;
    if (isset($element['#object']->get('field_use_alt_header')[0])) {
      $use_alt_header = $element['#object']->field_use_alt_header->get(0)->value;
    }
    $variables['use_alt_header'] = $use_alt_header;
    $variables['bands'] = $bands;
  }

  // If our Callout Link (Link field) references an internal node,
  // use the "External URL" field on that node, for the link,
  // if it exists.
  if ($element['#field_name'] == 'field_topic_callout_links') {
    $variables['external_link_url'] = '';
    $delta = 0;
    while (!empty($element[$delta])) {
      // Run only if this is an internal link.
      if ($element[$delta]['#url']->isExternal() == FALSE) {
        // Get the nid of the referenced internal node.
        $ref_node = $element[$delta]['#url']->getRouteParameters();
        // Load it up and get the field.
        if ($node = Node::load($ref_node['node'])) {
          // Run only on Action nodes.
          if ($node->getType() == "action" && $node->hasField('field_external_url')) {
            $external_url = $node->get('field_external_url')->uri;
            if (!empty($external_url)) {
              // Send this url to our template.
              $variables['external_link_url'] = Url::fromUri($external_url);
            }
          }
        }
      }
      $delta++;
    }
  }
  if (($element['#view_mode'] == 'sidebar' || $element['#view_mode'] == 'stacked_sidebar') && $element['#bundle'] == 'related_link') {
    $links = [];
    $delta = 0;
    // Wrap up our related links.
    while (!empty($element[$delta]) && !isset($element[$delta]['#type'])) {
      $url = $element[$delta]['#url_title'];
      // Check if referenced nodes are external urls.
      if ($element[$delta]['#url']->isRouted()) {
        $nid = $element[$delta]['#url']->getRouteParameters()['node'];
        $node = \Drupal::entityManager()->getStorage('node')->load($nid);
        if (!is_null($node) && $node->hasField('field_external_url') && !empty($node->get('field_external_url')->uri)) {
          $url = $node->get('field_external_url')->uri;
        }
      }

      $links[] = [
        'link' => [
          'text' => $element[$delta]['#title'],
          'href' => $url,
          'type' => (UrlHelper::isExternal($url)) ? 'external' : 'internal',
        ],
      ];
      $delta++;
    }
    // Send array to twig.
    $variables['relatedActions'] = $links;
  }

  if (($element['#view_mode'] == 'sidebar' || $element['#view_mode'] == 'stacked_sidebar') && $element['#bundle'] == 'contact_group') {
    $groups = [];
    $order = [];
    $delta = 0;

    // Wrap up our contact groups.
    while (!empty($element[$delta])) {

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'phone') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our phone numbers.
        $phone_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $element[$delta]['#paragraph']->get('field_phone')->value,
          'rawVal' => $element[$delta]['#paragraph']->get('field_phone')->value,
          'link' => str_replace(['+', '-'], '', filter_var($element[$delta]['#paragraph']->get('field_phone')->value, FILTER_SANITIZE_NUMBER_INT)),
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'fax') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our fax numbers.
        $fax_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $element[$delta]['#paragraph']->get('field_phone')->value,
          'rawVal' => $element[$delta]['#paragraph']->get('field_phone')->value,
          'link' => $element[$delta]['#paragraph']->get('field_phone')->value,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'online') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our online links.
        $value = $link = NULL;
        if (!empty($element[$delta]['#paragraph']->get('field_link')->first())) {
          $value = $element[$delta]['#paragraph']->get('field_link')->first()->getValue()['title'];
          $link = $element[$delta]['#paragraph']->get('field_link')->first()->getValue()['uri'];
        }

        $online_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $value,
          'rawVal' => '',
          'link' => $link,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'branch_location') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our branch location links.
        $value = $link = NULL;
        if (!empty($element[$delta]['#paragraph']->get('field_branch_locations')->first())) {
          $value = $element[$delta]['#paragraph']->get('field_branch_locations')->first()->getValue()['title'];
          $link = $element[$delta]['#paragraph']->get('field_branch_locations')->first()->getValue()['uri'];
        }

        $branch_location_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $value,
          'rawVal' => '',
          'link' => $link,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => 'online',
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'email') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our emails.
        $email_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $element[$delta]['#paragraph']->get('field_email')->value,
          'rawVal' => $element[$delta]['#paragraph']->get('field_email')->value,
          'link' => $element[$delta]['#paragraph']->get('field_email')->value,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'mail') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;

        // Wrap up all our addresses.
        $address_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $element[$delta]['#paragraph']->get('field_address')->value,
          'rawVal' => '',
          'link' => 'https://maps.google.com/?q=' . urlencode($element[$delta]['#paragraph']->get('field_address')->value),
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => 'address',
        ];
        $delta++;
        continue;
      }

      // No type? or type "other"? Try to process what we have.
      if (!isset($element[$delta]['#paragraph']->get('field_type')->value) || $element[$delta]['#paragraph']->get('field_type')->value == 'other') {
        $order[$delta] = 'other';
        // Wrap up all our other stuff. Anything goes!
        $value = '';
        $link = '';
        if ($element[$delta]['#paragraph']->get('field_link')->first() !== NULL) {
          $value = $element[$delta]['#paragraph']->get('field_link')->first()->getValue()['title'];
          $link = $element[$delta]['#paragraph']->get('field_link')->first()->getValue()['uri'];
        }
        $other_details[] = [
          'label' => $element[$delta]['#paragraph']->get('field_label')->value,
          'value' => $element[$delta]['#paragraph']->get('field_phone')->value .
          $value .
          $element[$delta]['#paragraph']->get('field_email')->value .
          $element[$delta]['#paragraph']->get('field_address')->value,
          'rawVal' => '',
          'link' => $element[$delta]['#paragraph']->get('field_phone')->value .
          $link .
          $element[$delta]['#paragraph']->get('field_email')->value,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type' => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      // If all else fails, increment or we spin out of control.
      $delta++;
    }

    $order = array_unique($order);

    // Render our groups in order.
    foreach ($order as $value) {
      // Do we have phone numbers? If so, display them under one icon.
      if (!empty($phone_details) && $value == 'phone') {
        $groups[] = [
          'icon' => '@atoms/05-icons/svg-phone.twig',
          'name' => 'Phone',
          'items' => $phone_details,
        ];
      }
      // Do we have fax numbers? If so, display them under one icon.
      if (!empty($fax_details) && $value == 'fax') {
        $groups[] = [
          'icon' => '@atoms/05-icons/svg-fax-icon.twig',
          'name' => 'Fax',
          'items' => $fax_details,
        ];
      }
      // Do we have emails? If so, display them under one icon.
      if (!empty($email_details) && $value == 'email') {
        $groups[] = [
          'icon' => '@atoms/05-icons/svg-laptop.twig',
          'name' => 'Online',
          'items' => $email_details,
        ];
      }
      // Do we have online links? If so, display them under one icon.
      if (!empty($online_details) && $value == 'online') {
        $groups[] = [
          'icon' => '@atoms/05-icons/svg-laptop.twig',
          'name' => 'Online',
          'items' => $online_details,
        ];
      }
      // Do we have branch location links? If so, display them under one icon.
      if (!empty($branch_location_details) && $value == 'branch_location') {
        $groups[] = [
          'icon' => '@atoms/05-icons/svg-profile.twig',
          'name' => 'Branch Location',
          'items' => $branch_location_details,
        ];
      }
      // Do we have address? If so, display them under one icon.
      if (!empty($address_details) && $value == 'mail') {
        $groups[] = [
          'icon' => '@atoms/05-icons/svg-mail.twig',
          'name' => 'Address',
          'items' => $address_details,
        ];
      }
      // Do we have other details? If so, display them under one icon.
      if (!empty($other_details) && $value == 'other') {
        $groups[] = [
          'icon' => '@atoms/05-icons/svg-marker.twig',
          'name' => 'Other',
          'items' => $other_details,
        ];
      }
    }
    // Send to twig template.
    $variables['contactGroups'] = $groups;
  }

  // Populate helpful links array.
  if ($element['#field_name'] == 'field_helpful_links') {
    $helpful_links = [];
    $helpful_links['compHeading'] = [
      'title' => $element['#title'],
      'sub' => 'true',
      'color' => 'yellow',
    ];
    $links = [];
    $delta = 0;
    // Wrap up our helpful links.
    while (!empty($element[$delta]) && !isset($element[$delta]['#type'])) {
      $links[] = [
        'chevron' => 'true',
        'text' => $element[$delta]['#title'],
        'href' => $element[$delta]['#url_title'],
      ];
      $delta++;
    }
    $helpful_links['items'] = $links;
    // Send array to twig.
    $variables['helpfulLinks'] = $helpful_links;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Various global preprocessing.
 */
function mass_theme_preprocess_taxonomy_term(&$variables) {
  $term = $variables['term'];
  $vocab = $term->bundle();

  if ($vocab == 'icons') {
    $field_sprite_type = $term->get('field_sprite_type');

    if ($field_sprite_type->count() > 0) {
      $svg_type = $field_sprite_type->first()->getValue();
      $variables['svg_type'] = $svg_type['value'];
    }

    $field_sprite_name = $term->get('field_sprite_name');

    if ($field_sprite_name->count() > 0) {
      $sprite_name = $field_sprite_name->first()->getValue();
      $variables['sprite_name'] = $sprite_name['value'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_node_page() or foo_preprocess_section_landing().
  $function = __FUNCTION__ . '__' . $paragraph->getType();
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__related_content(&$variables) {
  $paragraph = $variables['paragraph'];

  $field_related_content_items = $paragraph->get('field_related_content');

  // Get Related items.
  if ($field_related_content_items->count() > 0) {
    $related_items = $field_related_content_items->referencedEntities();
  }

  if (!empty($related_items)) {
    $nodes = [];
    $types = [];
    $total_count = count($related_items);

    foreach ($related_items as $id => $item) {
      /** @var Drupal\node\Entity\Node $item */
      // Default icon for content without icons but using the Topic card.
      $item->{'icon'} = '@atoms/05-icons/svg-marker.twig';
      $item->{'node_path'} = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $item->get('nid')->value);
      $item->{'image_thumbnail_url'} = $item->hasField('field_photo') ? Helper::getFieldImageUrl($item, 'thumbnail_130x160', 'field_photo') : '';

      // For Stacked Layout, if label or acronym is Guide then the label
      // should be "Guide:".
      if ($item->getType() == 'stacked_layout') {
        $label = $item->get('field_label')->isEmpty() ? '' : $item->get('field_label')->value;
        $item->{'label_text'} = $label == 'Guide' ? 'Guide:' : '';
      }

      // Grab our icon.
      // Topics have an icon field.
      if ($item->hasField('field_icon_term') && array_key_exists('0', $item->get('field_icon_term')->referencedEntities())) {
        $icon = $item->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
        $item->{'icon'} = icon_path($icon);
      }
      // Subtopics don't have an icons field, so lets use its topic parent ref.
      // field_topic_parent references to Stacked Layout and Topic content.
      // Only Topic content has field_icon_term field.
      if ($item->hasField('field_topic_parent') && !$item->get('field_topic_parent')->isEmpty()) {
        $icon = _mass_theme_get_topic_parent_icon($item);
        $item->{'icon'} = icon_path($icon);
      }

      // Topics don't have topic callouts, so we use common content for links.
      if ($item->hasField('field_common_content')) {
        $links = [];
        foreach ($item->get('field_common_content')->referencedEntities() as $link) {
          // Get aliased path.
          $link_path = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $link->get('nid')->value);
          if ($link && $link->hasField('field_external_url')) {
            $external_link = $link->get('field_external_url')->uri;
            // Check the external url field value is not empty.
            if (!empty($external_link)) {
              $link_path = $external_link;
            }
          }
          $links[] = ['text' => $link->getTitle(), 'href' => $link_path];
        }
        // Get links for our topic cards.
        $item->{'links'} = $links;
      }

      // Subtopics have topic callout links.
      if ($item->hasField('field_topic_callout_links')) {
        $links = [];
        foreach ($item->get('field_topic_callout_links') as $link) {
          $link_path = Url::fromUri($link->uri);
          if (Unicode::strpos($link->uri, 'entity:node/') !== FALSE) {
            $nid = explode('/', $link->uri)[1];
            $linked_node = Node::load($nid);
            // Check that we have a node and that it has an external_url field.
            if ($linked_node && $linked_node->hasField('field_external_url')) {
              $external_link = $linked_node->get('field_external_url')->uri;
              // Check the external url field value is not empty.
              if (!empty($external_link)) {
                $link_path = $external_link;
              }
            }
          }
          $links[] = ['text' => $link->title, 'href' => $link_path];
        }
        // Get links for our topic cards.
        $item->{'links'} = $links;
      }

      $nodes[] = $item;
      $types[] = $item->getType();
    }
  }

  $contentTypes = \Drupal::service('entity.manager')->getStorage('node_type')->loadMultiple();

  $contentTypesList = [];

  // Get our content types list.
  foreach ($contentTypes as $contentType) {
    $contentTypesList[$contentType->id()] = 0;
  }

  // Merge in our content types with totals so we don't have to check indexs.
  $total_type_with_count = array_merge($contentTypesList, array_count_values($types));

  $variables['layout'] = _get_layout($total_type_with_count, $total_count);
  $variables['items'] = $nodes;
}

/**
 * Provide the desired design layout for related things.
 *
 * @param array $total_type_with_count
 *   A list of all content types with counts of how many.
 * @param int $total_count
 *   The total count of referenced nodes.
 *
 * @return string
 *   The twig layout to be used.
 */
function _get_layout(array $total_type_with_count, $total_count) {
  // If all content is "stacked_layout", we use "bullets".
  if (
    $total_type_with_count['stacked_layout'] == $total_count ||
    $total_type_with_count['org_page'] == $total_count
  ) {
    return 'bullets';
  }

  // If all content is Right Rail, use actionCards.
  // If content is Right Rail and Stacked Layout, use actionCards.
  if (
    $total_type_with_count['action'] == $total_count ||
    $total_type_with_count['action'] + $total_type_with_count['stacked_layout'] == $total_count ||
    $total_type_with_count['action'] + $total_type_with_count['how_to_page'] + $total_type_with_count['service_details'] == $total_count ||
    $total_type_with_count['action'] + $total_type_with_count['how_to_page'] + $total_type_with_count['stacked_layout'] + $total_type_with_count['guide_page'] == $total_count
  ) {
    return 'actionCards';
  }

  // Tests for using Topic Card layout.
  if (
    $total_type_with_count['topic'] + $total_type_with_count['subtopic'] == $total_count ||
    $total_type_with_count['topic'] + $total_type_with_count['subtopic'] + $total_type_with_count['stacked_layout'] == $total_count ||
    $total_type_with_count['topic'] + $total_type_with_count['subtopic'] + $total_type_with_count['topic_page'] + $total_type_with_count['service_page'] == $total_count ||
    $total_type_with_count['topic'] + $total_type_with_count['subtopic'] + $total_type_with_count['topic_page'] + $total_type_with_count['stacked_layout'] == $total_count
  ) {
    return 'topicCards';
  }

  return 'bullets';
}

/**
 * Return the parent topic icon.
 *
 * It solves the case when a direct parent doesn't have a field_icon_term.
 * Recursively look for the right node with the icon or return empty string
 * if there is no one.
 *
 * @param Drupal\node\Entity\Node $item
 *   The node to get value from.
 *
 * @return string
 *   Return icon or empty string.
 */
function _mass_theme_get_topic_parent_icon(Node $item) {
  /** @var Drupal\Core\Field\EntityReferenceFieldItemList $parents */
  $parents = $item->get('field_topic_parent');
  foreach ($parents->referencedEntities() as $parent) {
    if ($parent->getType() == 'topic') {
      return $parent->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
    }
  }

  // If no topic found, then look for parents of parent.
  foreach ($parents->referencedEntities() as $parent) {
    if ($parent->hasField('field_topic_parent') && !$parent->get('field_topic_parent')->isEmpty()) {
      _mass_theme_get_topic_parent_icon($parent);
    }
  }

  // If no topic parent was found return empty string.
  return '';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__action_set(&$variables) {
  $paragraph = $variables['paragraph'];

  $field_featured_items = $paragraph->get('field_featured_content');
  $featured_links = [];
  $image_url = '';

  // Get field labels for twig.
  $variables['featuredHeading'] = $field_featured_items->getFieldDefinition()->getLabel();

  // Get Featured links.
  if ($field_featured_items->count() > 0) {
    $featured_items = $field_featured_items->referencedEntities();
  }

  if (!empty($featured_items)) {
    foreach ($featured_items as $id => $item) {
      $image_url = '';
      $external_url = '';
      if ($item->hasField('field_external_url')) {
        $external_url = $item->get('field_external_url')->uri;
      }

      $featured_links[] = [
        'image' => $item->hasField('field_photo') ? Helper::getFieldImageUrl($item, 'thumbnail_130x160', 'field_photo') : '',
        'text' => $item->getTitle(),
        'type' => $external_url ? 'external' : 'internal',
        'href' => $external_url ? $external_url : $item->toURL()->toString(),
      ];
    }

    $variables['featuredLinks'] = $featured_links;
  }

  $field_link_items = $paragraph->get('field_related_content');
  $links = [];

  $variables['generalHeading'] = $field_link_items->getFieldDefinition()->getLabel();

  // Get All Actions & Guides links.
  if ($field_link_items->count() > 0) {
    $link_items = $field_link_items->referencedEntities();
  }

  if (!empty($link_items)) {
    foreach ($link_items as $id => $item) {
      $image_url = '';
      $external_url = '';
      if ($item->hasField('field_external_url')) {
        $external_url = $item->get('field_external_url')->uri;
      }

      $links[] = [
        'image' => $item->hasField('field_photo') ? Helper::getFieldImageUrl($item, 'thumbnail_130x160', 'field_photo') : '',
        'text' => $item->getTitle(),
        'type' => $external_url ? 'external' : 'internal',
        'href' => $external_url ? $external_url : $item->toURL()->toString(),
      ];
    }

    $variables['links'] = $links;

    if (!empty($paragraph->get('field_link_single')->uri)) {
      $seeAll = [
        'type' => UrlHelper::isExternal($paragraph->get('field_link_single')->uri) ? 'external' : 'internal',
        'href' => Url::fromUri($paragraph->get('field_link_single')->uri),
        'text' => $paragraph->get('field_link_single')->title,
        'info' => '',
      ];
      $variables['seeAll'] = $seeAll;
    }
  }

  // Get our background image.
  if ($paragraph->get('field_image')->entity) {
    $variables['bgWide'] = ImageStyle::load('hero800x400')->buildUrl($paragraph->get('field_image')->entity->getFileUri());
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process 3 up text.
 */
function mass_theme_preprocess_paragraph__3_up_content(&$variables) {
  $paragraph = $variables['paragraph'];
  $rows = $paragraph->get('field_3_up_rows');
  $list = [];

  if ($rows->count() > 0) {
    $items = $rows->referencedEntities();
  }

  if (!empty($items)) {
    foreach ($items as $id => $item) {
      $field_content = $item->get('field_content')->view('full');
      // Break out our paragraphs and render the field - it might have an image.
      $paragraph_tags = explode("<p>", str_replace("</p>", "", render($field_content)));

      // Reset our array.
      $paragraphs = [];
      foreach ($paragraph_tags as $paragraph_tag) {
        if (!empty($paragraph_tag)) {
          $paragraphs[] = [
            'path' => '@atoms/11-text/raw-html.twig',
            'data' => [
              'rawHtml' => [
                'content' => trim(str_replace("<p>", "", $paragraph_tag)),
              ],
            ],
          ];
        }
      }

      $list[] = [
        'items' => [
          [
            'path' => '@atoms/04-headings/column-heading.twig',
            'data' => [
              'columnHeading' => [
                'text' => $item->get('field_heading')->value,
                'href' => '',
                'info' => '',
              ],
            ],
          ],
          [
            'path' => '@organisms/by-author/rich-text.twig',
            'data' => [
              'richText' => [
                'rteElements' => $paragraphs,
              ],
            ],
          ],
        ],
      ];
    }
  }

  $variables['splitColumns']['columns'] = $list;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__action_step_numbered_list(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_action_step_numbered_items = $paragraph->get('field_action_step_numbered_items');
  $list = [];

  if ($field_action_step_numbered_items->count() > 0) {
    $items = $field_action_step_numbered_items->referencedEntities();
  }

  if (!empty($items)) {
    foreach ($items as $id => $item) {
      $list[$id] = [];
      $field_title = $item->get('field_title');
      $field_content = $item->get('field_content');

      if ($field_title->count() > 0) {
        $title = $field_title->first()->getValue();
        $list[$id]['title'] = $title['value'];
      }

      if ($field_content->count() > 0) {
        $content = $field_content->first()->view('full');
        $list[$id]['rteElements'][] = [
          'path' => '@atoms/11-text/raw-html.twig',
          'data' => [
            'rawHtml' => [
              'content' => $content,
            ],
          ],
        ];
      }
    }
  }
  $variables['actionSeqLists'] = $list;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Clean css id for subheads.
 */
function mass_theme_preprocess_paragraph__subhead(&$variables) {
  $subhead = $variables['paragraph']->get('field_title')->first()->getValue()['value'];
  $subhead_clean = strtolower($subhead);
  $subhead_clean = Html::cleanCssIdentifier($subhead_clean);
  $variables['title_clean'] = $subhead_clean;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for action step paragraphs.
 */
function mass_theme_preprocess_paragraph__action_step(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_title = $paragraph->get('field_title');
  $field_content = $paragraph->get('field_content');

  if ($field_title->count() > 0) {
    $title = $field_title->first()->getValue();
    $variables['title'] = $title['value'];
  }

  if ($field_content->count() > 0) {
    $rich_text = $field_content->first()->getValue();
    $variables['rich_text'] = $rich_text['value'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_link(&$variables) {
  $url = $variables['paragraph']->get('field_link')->first()->getUrl();

  $variables['calloutLink']['text'] = $variables['paragraph']->get('field_link')->first()->getValue()['title'];
  $variables['calloutLink']['href'] = $url->toString();
  $variables['calloutLink']['type'] = (UrlHelper::isExternal($url->toString())) ? 'external' : 'internal';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link - need-to-know paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_alert(&$variables) {
  $link = Helper::separatedLinks($variables['paragraph'], 'field_link');

  $variables['calloutAlert']['decorativeLink'] = $link[0];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Deliver a image style uri to our search band twig template.
 */
function mass_theme_preprocess_paragraph__search_band(&$variables) {
  $paragraph = $variables['paragraph'];
  $image = isset($paragraph->field_image->entity) ? $paragraph->field_image->entity : NULL;
  $variables['search1600x400_image_url'] = $image ? ImageStyle::load('hero1600x800')->buildUrl($image->getFileUri()) : NULL;
  $variables['search800x400_image_url'] = $image ? ImageStyle::load('hero800x400')->buildUrl($image->getFileUri()) : NULL;

  // Grab node title incase we don't have a title in band.
  $node = \Drupal::request()->attributes->get('node');
  if ($node) {
    $variables['title'] = $node->getTitle();
    $variables['intro'] = $node->field_lede->value;
  }

  $items = [];
  if (!$variables['paragraph']->get('field_link_six')->isEmpty()) {
    $popular_searches = $variables['paragraph']->get('field_link_six');

    // Roll up our popular searches links for search band.
    foreach ($popular_searches as $link) {
      $items[] = [
        'href' => $link->getUrl()->toString(),
        'text' => $link->getValue()['title'],
        'chevron' => 'true',
      ];
    }
  }

  $variables['items'] = $items;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout button paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_button(&$variables) {

  if (!$variables['paragraph']->get('field_link')->isEmpty()) {
    $links = $variables['paragraph']->get('field_link');
    $items = [];

    foreach ($links as $link) {
      // If the linked item was deleted, $link may not exist.
      if ($link) {
        $items[] = [
          'text' => $link->getValue()['title'],
          'href' => $link->getUrl()->toString(),
          'type' => (UrlHelper::isExternal($link->getUrl()
            ->toString())) ? 'external' : 'internal',
        ];
      }
    }

    $variables['buttonMinors'] = $items;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Sets up banner elements for full_bleed paragraphs.
 */
function mass_theme_preprocess_paragraph__full_bleed(&$variables) {
  $paragraph = $variables['paragraph'];

  $field_full_bleed_ref = $paragraph->get('field_full_bleed_ref');
  if ($field_full_bleed_ref) {
    $items = $field_full_bleed_ref->referencedEntities();
    if (!empty($items)) {
      foreach ($items as $item) {
        if ($item->getType() == 'slideshow') {
          $image_field = $item->get('field_slideshow');
          $image_count = $image_field->count();
          $images = [];
          foreach ($image_field as $id => $image) {
            $value = $image->getValue();
            $image_small = Helper::getFieldImageUrl($item, 'action_banner_small', 'field_slideshow', $id);
            $image_large = Helper::getFieldImageUrl($item, 'action_banner_large', 'field_slideshow', $id);
            $images[$id] = [
              'image' => $image_small,
              'imageLarge' => $image_large,
              'alt' => $value['alt'],
            ];
          }

          $variables['images'] = $images;
          $variables['image_count'] = $image_count;
        }
        elseif ($item->getType() == 'iframe' || $item->getType() == 'map') {
          $map = $item;
          $id = $item->id;

          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
          $build = $view_builder->view($item, 'extended_header');
          $variables['map'] = $build;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_link_formatter_link_separate().
 *
 * Separate title and link for rendering in template
 * Default template: link-formatter-link-separate.html.twig.
 */
function mass_theme_preprocess_link_formatter_link_separate(&$variables) {
  $variables['fieldLink']['text'] = $variables['title'];
  $variables['fieldLink']['href'] = $variables['url'];
  $variables['fieldLink']['type'] = $variables['url']->isExternal() ? 'external' : 'internal';
}

/**
 * Provide the URL of an image.
 *
 * @param object $node
 *   The node with the field on it.
 * @param string $style_name
 *   The name of an image style.
 * @param string $field
 *   The name of an the image field.
 *
 * @return string
 *   The URL to the styled image, or to the original image if the style does not
 *   exist.
 */
function mass_theme_get_field_image_url($node, $style_name = NULL, $field = NULL, $id = 0) {
  $url = '';

  $fields = $node->get($field);
  if ($fields) {
    $images = $fields->referencedEntities();
  }

  if (!empty($images)) {
    $image = $images[$id];

    if (!empty($style_name) && ($style = ImageStyle::load($style_name))) {
      $url = $style->buildUrl($image->getFileUri());
    }
    else {
      $url = $image->url();
    }
  }

  return $url;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact_group(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_layout = $paragraph->get('field_contact_group_layout');

  if ($field_layout->count() > 0) {
    $layout = $field_layout->first()->getValue();
    $variables['layout'] = $layout['value'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact_info(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_address = $paragraph->get('field_address');

  if ($field_address->count() > 0) {
    $address = $field_address->first()->getValue();
    $address_url = 'https://www.google.com/maps/place/' . $address['value'];
    $variables['address_url'] = $address_url;
  }

  $svg_types = [
    'phone' => ['class' => 'svg-phone', 'svg' => 'phone'],
    'laptop' => ['class' => 'svg-laptop', 'svg' => 'laptop'],
    'mail' => ['class' => 'svg-mail', 'svg' => 'mail'],
    'profile' => ['class' => 'svg-profile', 'svg' => 'profile'],
  ];

  $field_type = $paragraph->get('field_type');

  if ($field_type->count() > 0) {
    $type = $field_type->first()->getValue();
    $svg_type = '';

    switch ($type['value']) {
      case 'phone';
      case 'fax':
        $svg_type = $svg_types['phone'];
        break;

      case 'online':
        $svg_type = $svg_types['laptop'];
        break;

      case 'email';
      case 'mail':
        $svg_type = $svg_types['mail'];
        break;

      case 'branch_location':
        $svg_type = $svg_types['profile'];
        break;

    }
    $variables['svg_type'] = $svg_type;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact(&$variables) {
  if ($variables['paragraph']->get('field_phone')->first()) {
    $phone = $variables['paragraph']->get('field_phone')->first()->getValue()['value'];
    $variables['phone_clean'] = preg_replace('/[^0-9]+/', '', $phone);
  }
  if ($variables['paragraph']->get('field_fax')->first()) {
    $fax = $variables['paragraph']->get('field_fax')->first()->getValue()['value'];
    $variables['fax_clean'] = preg_replace('/[^0-9]+/', '', $fax);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__action_address(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_address_url = $paragraph->get('field_address_url');

  if ($field_address_url->count() > 0) {
    $address = $field_address_url->first()->getValue();
    $direction_url = 'https://www.google.com/maps/place/' . $address['value'];
    $variables['direction_url'] = $direction_url;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for downloads.
 */
function mass_theme_preprocess_paragraph__file_download(&$variables) {
  if (isset($variables['paragraph'])) {
    $paragraph = $variables['paragraph'];

    $variables = [
      'theme_hook_original' => $variables['theme_hook_original'],
      'formDownloads' => Organisms::prepareFormDownloads($paragraph),
    ];
  }
}

/**
 * Helper function to sort a list of items by title.
 */
function compare_by_title($a, $b) {
  return strcasecmp($a['content']['#title'], $b['content']['#title']);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Sort items array case insensitively, since twig won't.
 */
function mass_theme_preprocess_field__field_topic_callout_links(&$variables) {
  if (isset($variables['element']['#view_mode']) && $variables['element']['#view_mode'] == 'teaser') {
    // Don't have to do anything with this since usort acts on the actual
    // array but returns a boolean.
    $items_lower = usort($variables['items'], 'compare_by_title');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add theme suggestions for Footer Menus.
 */
function mass_theme_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (!empty($variables['menu_name']) && strpos($variables['menu_name'], 'footer') > -1) {
    $suggestions[] = "menu__footer_layout";
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add theme suggestions to fields for separate view modes.
 */
function mass_theme_theme_suggestions_field_alter(&$suggestions, $variables) {
  $suggestions[] = 'field__' .
    $variables['element']['#field_name'] . '__' .
    $variables['element']['#view_mode'];

  $suggestions[] = 'field__' .
    $variables['element']['#entity_type'] . '__' .
    $variables['element']['#field_name'] . '__' .
    $variables['element']['#bundle'] . '__' .
    $variables['element']['#view_mode'];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add title to 3up Container from the current page.
 */
function mass_theme_preprocess_ma_section3up_container_style(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
  $variables['label'] = $title;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Parse file attributes for file link template.
 * Default template: file-link.html.twig.
 */
function mass_theme_preprocess_file_link(&$variables) {
  // Get file attributes for ct.action file download links.
  $file = $variables['file'];
  $file_entity = ($file instanceof File) ? $file : File::load($file->fid);

  // Get the human readable file size.
  $bytes = $file->getSize();
  $readable_size = format_size($bytes);
  $variables['download']['size'] = $readable_size;

  // Use the description as the link text if available,
  // if not, use the file name.
  $filename = $file_entity->getFilename();
  if (empty($variables['description'])) {
    $variables['download']['linktext'] = $filename;
  }
  else {
    $variables['download']['linktext'] = $variables['description'];
  }

  // Set the file link variable.
  $variables['download']['link'] = file_create_url($file_entity->getFileUri());

  // Get the file extension.
  // see: http://php.net/manual/en/splfileinfo.getextension.php
  $file_info = new SplFileInfo($filename);
  $file_extension = $file_info->getExtension();

  // Set the file type based on extesnion.
  $variables['download']['filetype'] = $file_extension;

  // Set the icon name.
  $variables['download']['iconName'] = 'doc-' . $file_extension;
}

/**
 * Implements template_preprocess_views_view().
 */
function mass_theme_preprocess_views_view(&$variables) {
  $variables['row_count'] = 0;
  $variables['filter_value'] = '';

  if (isset($variables['exposed']['filter']['#value'])) {
    $variables['filter_value'] = $variables['exposed']['filter']['#value'];
  }
  if (isset($variables['rows'][0]['#rows'])) {
    $variables['row_count'] = count($variables['rows'][0]['#rows']);
  }
}

/**
 * Implements template_preprocess_views_view_list().
 */
function mass_theme_preprocess_views_view_list(&$variables) {
  $view = $variables['view'];
  $rows = $variables['rows'];

  if ($view->storage->id() == 'subtopics_all_actions') {
    $nodes = [];

    foreach ($rows as $row) {
      $result = $row['content']['#row'];
      $nid = $result->nid;

      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
      $storage = \Drupal::entityTypeManager()->getStorage('node');
      $node = $storage->load($nid);
      $build = $view_builder->view($node, 'teaser_simple');
      $nodes[] = $build;
    }
    $variables['nodes'] = $nodes;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_theme_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-subtopics-all-actions-block-1') {
    if (isset($form['actions']['submit']['#attributes'])) {
      $attributes = $form['actions']['submit']['#attributes'];
      $form['actions']['submit']['#attributes'] = $attributes + ['data-theming-id' => 'filter-submit'];
    }
    else {
      $form['actions']['submit']['#attributes'] = ['data-theming-id' => 'filter-submit'];
    }
  }
}

/**
 * Check for icon twig templates.
 */
function icon_path($icon) {
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
  $path = DRUPAL_ROOT . '/' . $theme_path . '/patterns/atoms/';

  // Check if this template exists.
  if (file_exists($path . '07-user-added-icons/svg-' . strtolower($icon) . '.twig')) {
    return '@atoms/07-user-added-icons/svg-' . strtolower($icon) . '.twig';
  }

  if (file_exists($path . '05-icons/svg-' . strtolower($icon) . '.twig')) {
    return '@atoms/05-icons/svg-' . strtolower($icon) . '.twig';
  }

  if (file_exists($path . '06-icons-location/svg-loc-' . strtolower($icon) . '.twig')) {
    return '@atoms/06-icons-location/svg-' . strtolower($icon) . '.twig';
  }

  return '@atoms/05-icons/svg-marker.twig';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Adds a page template hook suggestion per content type.
 */
function mass_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  $node = \Drupal::request()->attributes->get('node');

  // When loading a revision only the nid is returned. We need the object.
  if (ctype_digit($node)) {
    $node = Node::load($node);
  }

  if ($node) {
    array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepare icon link values for template.
 */
function mass_theme_preprocess_paragraph__icon_links(&$variables) {
  $items = [];
  if (!$variables['paragraph']->get('field_icon_link')->isEmpty()) {
    $icon_links = $variables['paragraph']->get('field_icon_link')->referencedEntities();
    foreach ($icon_links as $icon_link) {
      $icon_name = current($icon_link->get('field_para_icon_term')->referencedEntities())->get('field_sprite_name')->value;
      $link = $icon_link->get('field_link_single')->first()->getValue();
      $items[] = [
        'icon' => "@atoms/05-icons/svg-" . $icon_name . '.twig',
        'link' => [
          'href' => $link['uri'],
          'text' => $link['title'],
          'chevron' => '',
        ],
      ];
    }
  }

  $variables['iconLinks']['items'] = $items;
}

/**
 * Language config for Google translate.
 */
function mass_theme_googletranslate_options_languages() {
  $language_codes = [
    'aa' => 'Afar',
    'ab' => 'Abkhazian',
    'af' => 'Afrikaans',
    'am' => 'Amharic',
    'ar' => 'Arabic',
    'as' => 'Assamese',
    'ay' => 'Aymara',
    'az' => 'Azerbaijani',
    'ba' => 'Bashkir',
    'be' => 'Byelorussian',
    'bg' => 'Bulgarian',
    'bh' => 'Bihari',
    'bi' => 'Bislama',
    'bn' => 'Bengali/Bangla',
    'bo' => 'Tibetan',
    'br' => 'Breton',
    'ca' => 'Catalan',
    'co' => 'Corsican',
    'cs' => 'Czech',
    'cy' => 'Welsh',
    'da' => 'Danish',
    'de' => 'German',
    'dz' => 'Bhutani',
    'el' => 'Greek',
    'eo' => 'Esperanto',
    'es' => 'Spanish',
    'et' => 'Estonian',
    'eu' => 'Basque',
    'fa' => 'Persian',
    'fi' => 'Finnish',
    'fj' => 'Fiji',
    'fo' => 'Faeroese',
    'fr' => 'French',
    'fy' => 'Frisian',
    'ga' => 'Irish',
    'gd' => 'Scots/Gaelic',
    'gl' => 'Galician',
    'gn' => 'Guarani',
    'gu' => 'Gujarati',
    'ha' => 'Hausa',
    'hi' => 'Hindi',
    'hr' => 'Croatian',
    'hu' => 'Hungarian',
    'hy' => 'Armenian',
    'ia' => 'Interlingua',
    'ie' => 'Interlingue',
    'ik' => 'Inupiak',
    'in' => 'Indonesian',
    'is' => 'Icelandic',
    'it' => 'Italian',
    'iw' => 'Hebrew',
    'ja' => 'Japanese',
    'ji' => 'Yiddish',
    'jw' => 'Javanese',
    'ka' => 'Georgian',
    'kk' => 'Kazakh',
    'kl' => 'Greenlandic',
    'km' => 'Cambodian',
    'kn' => 'Kannada',
    'ko' => 'Korean',
    'ks' => 'Kashmiri',
    'ku' => 'Kurdish',
    'ky' => 'Kirghiz',
    'la' => 'Latin',
    'ln' => 'Lingala',
    'lo' => 'Laothian',
    'lt' => 'Lithuanian',
    'lv' => 'Latvian/Lettish',
    'mg' => 'Malagasy',
    'mi' => 'Maori',
    'mk' => 'Macedonian',
    'ml' => 'Malayalam',
    'mn' => 'Mongolian',
    'mo' => 'Moldavian',
    'mr' => 'Marathi',
    'ms' => 'Malay',
    'mt' => 'Maltese',
    'my' => 'Burmese',
    'na' => 'Nauru',
    'ne' => 'Nepali',
    'nl' => 'Dutch',
    'no' => 'Norwegian',
    'oc' => 'Occitan',
    'om' => '(Afan)/Oromoor/Oriya',
    'pa' => 'Punjabi',
    'pl' => 'Polish',
    'ps' => 'Pashto/Pushto',
    'pt' => 'Portuguese',
    'qu' => 'Quechua',
    'rm' => 'Rhaeto-Romance',
    'rn' => 'Kirundi',
    'ro' => 'Romanian',
    'ru' => 'Russian',
    'rw' => 'Kinyarwanda',
    'sa' => 'Sanskrit',
    'sd' => 'Sindhi',
    'sg' => 'Sangro',
    'sh' => 'Serbo-Croatian',
    'si' => 'Singhalese',
    'sk' => 'Slovak',
    'sl' => 'Slovenian',
    'sm' => 'Samoan',
    'sn' => 'Shona',
    'so' => 'Somali',
    'sq' => 'Albanian',
    'sr' => 'Serbian',
    'ss' => 'Siswati',
    'st' => 'Sesotho',
    'su' => 'Sundanese',
    'sv' => 'Swedish',
    'sw' => 'Swahili',
    'ta' => 'Tamil',
    'te' => 'Tegulu',
    'tg' => 'Tajik',
    'th' => 'Thai',
    'ti' => 'Tigrinya',
    'tk' => 'Turkmen',
    'tl' => 'Tagalog',
    'tn' => 'Setswana',
    'to' => 'Tonga',
    'tr' => 'Turkish',
    'ts' => 'Tsonga',
    'tt' => 'Tatar',
    'tw' => 'Twi',
    'uk' => 'Ukrainian',
    'ur' => 'Urdu',
    'uz' => 'Uzbek',
    'vi' => 'Vietnamese',
    'vo' => 'Volapuk',
    'wo' => 'Wolof',
    'xh' => 'Xhosa',
    'yo' => 'Yoruba',
    'zh-CN' => 'Chinese',
    'zu' => 'Zulu',
  ];
  return $language_codes;
}

/**
 * Add languages to theme settings.
 */
function mass_theme_form_system_theme_settings_alter(&$form, $form_state) {
  $languages = mass_theme_googletranslate_options_languages();

  $form['mass_theme_settings'] = [
    '#type' => 'details',
    '#title' => t('Languages'),
    '#open' => TRUE,
  ];

  $form['mass_theme_settings']['languages'] = [
    '#type' => 'checkboxes',
    '#options' => $languages,
    '#title' => t('Choose google translate languages?'),
    '#default_value' => theme_get_setting('languages', 'mass_theme'),
  ];
}
