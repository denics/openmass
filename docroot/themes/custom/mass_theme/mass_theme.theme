<?php

/**
 * @file
 * Functions to support theming in the mass.gov theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Url;
use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\mayflower\Helper;
use Drupal\mayflower\Prepare\Atoms;
use Drupal\mayflower\Prepare\Molecules;
use Drupal\mayflower\Prepare\Organisms;
use Drupal\mayflower\Prepare\Schemas;

/**
 * Implements hook_theme_suggestions_alter().
 */
function mass_theme_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  // Build a map of paragraph types and the twig files they map to.
  $map = [
    'action_step_numbered_list' => 'action_seq_list',
    'activities' => 'action_activities',
    'callout_link' => 'callout_links',
  ];

  // Add the appropriate theme suggestions.
  if (array_key_exists($variables['elements']['#paragraph']->getType(), $map)) {
    $suggestions[] = $map[$variables['elements']['#paragraph']->getType()];
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function mass_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  // Build a map of paragraph types and the twig files they map to.
  $map = [
    'contact_information' => 'contact_us',
  ];

  // Add the appropriate theme suggestions.
  if (array_key_exists($variables['elements']['#node']->getType(), $map)) {
    $suggestions[] = $map[$variables['elements']['#node']->getType()];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout button paragraphs.
 */
function mass_theme_preprocess_callout_links(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];

  $variables = [
    'theme_hook_original' => $variables['theme_hook_original'],
    'calloutLinks' => Molecules::prepareCalloutLinks($paragraph),
  ];

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @see patterns/molecules/action-seq-list.twig
 */
function mass_theme_preprocess_action_seq_list(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];

  // Sets the variable structure required for action-seq-list.twig.
  $variables = [
    'theme_hook_original' => $variables['theme_hook_original'],
    'actionSeqLists' => Molecules::prepareActionSeqList($paragraph),
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @see patterns/molecules/action-activities.twig
 */
function mass_theme_preprocess_action_activities(&$variables) {
  $action_activities = [];
  $parent_paragraph = $variables['elements']['#paragraph'];

  $field_activities = $parent_paragraph->get('field_activities');

  if ($field_activities->count() > 0) {
    $items = $field_activities->referencedEntities();
  }

  foreach ($items as $id => $item) {
    $activity = [];
    $activity['title'] = $item->get('field_title')->view('full');
    $activity['description'] = $item->get('field_teaser')->view('full');

    $links = Helper::separatedLinks($item, 'field_link');

    if (!empty($links)) {
      $activity['linkTitle'] = $links[0]['text'];
      $activity['href'] = $links[0]['href'];
    }

    $image = $item->get('field_image');

    if ($image->count() > 0) {
      $activity['image'] = Helper::getFieldImageUrl($item, 'activities_image', 'field_image');
    }

    $action_activities[] = $activity;
  }

  $variables = [
    'theme_hook_original' => $variables['theme_hook_original'],
    'actionActivities' => $action_activities,
  ];
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function mass_theme_theme_suggestions_alter(array &$suggestions, array $variables) {
  $original_theme_hook = $variables['theme_hook_original'];

  // For the pilot static homepage, we need to be able to theme a specific node
  // as the front page.
  if ($node = \Drupal::routeMatch()->getParameter('node') && in_array('html__front', $suggestions)) {
    $node = \Drupal::routeMatch()->getParameter('node');
    $suggestions[] = 'html__node__' . $node->id();
  }

  if (isset($variables['element']) && isset($variables['element']['#id'])) {
    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);

    if (isset($variables['element']['#type']) && isset($variables['element']['#name']) && $variables['element']['#type'] == 'textfield') {
      $original_theme_hook = $variables['theme_hook_original'];

      $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#name']);
    }

    if (isset($variables['element']['#attributes']) && array_key_exists('data-theming-id', $variables['element']['#attributes'])) {
      $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#attributes']['data-theming-id']);
    }
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Org page.
 */
function mass_theme_preprocess_node_org_page(&$variables) {
  $node = $variables['node'];

  // Set static pageBanner properties to pass to prepare function.
  $pageBanner_options = [
    "size" => "large",
    "icon" => NULL,
  ];

  // Make pageBanner data object available in twig template.
  $variables['pageBanner'] = Organisms::preparePageBanner($node, $pageBanner_options);

  // Set static actionHeader properties to pass to prepare function.
  $actionHeader_options = [
    // @todo Consider making this site-builder configurable vs hard-coded
    'divider' => TRUE,
  ];

  // Prepare widgets that can be passed to the actionHeader.
  $widgets = [];

  // Prepare the option array for the organization image widget.
  $org_image_options = [
    'style' => 'organization_logo',
    'height' => '',
    'width' => 230,
  ];

  // Prepares the organization logo to use the mayflower image component.
  if ($org_logo = Atoms::prepareImage($node, $org_image_options)) {
    $widgets[] = [
      'path' => '@atoms/09-media/image.twig',
      'data' => [
        'image' => $org_logo,
      ],
    ];
  }

  // Prepare the actionHeader data object.
  $variables['actionHeader'] = Organisms::prepareActionHeader($node, $actionHeader_options, $widgets);
  // Make stacked section data object available in twig template.
  $variables['stackedRowSections'] = mayflower_prepare_stacked_row_sections($node);
  // Prepare the schema.governmentOrganization data object.
  $variables['schema'] = Schemas::prepareGovernmentOrganization($variables);
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepare the variables for the Location page.
 */
function mass_theme_preprocess_node_location(&$variables) {
  $node = $variables['node'];

  // We need a different Google map config for PL tpls.
  $variables['#attached']['library'][] = 'mass_theme/mass-google-map-apis-location';

  // Set static actionHeader properties to pass to prepare function.
  $actionHeader_options = [
    'divider' => FALSE,
  ];

  // Prepare widgets that can be passed to the actionHeader.
  $widgets = [];
  // Prepare widgets that can be passed to the actionHeader.
  if ($node->field_location_icons->entity) {
    $widgets[] = [
      'path' => '@molecules/location-icons.twig',
      'data' => [
        'locationIcons' => [
          'icons' => Molecules::prepareLocationIcons($node),
        ],
      ],
    ];
  }
  // iFrames.
  if ($node->field_iframe->entity) {
    $widgets[] = [
      'path' => '@atoms/11-text/raw-html.twig',
      'data' => [
        'rawHtml' => [
          'content' => '<iframe src="' . $node->field_iframe->entity->field_url->uri . '" height="' . $node->field_iframe->entity->field_height->value . '" style="width:100%;"></iframe>',
        ],
      ],
    ];
  }

  // Prepare the actionHeader data object.
  $variables['actionHeader'] = Organisms::prepareActionHeader($node, $actionHeader_options, $widgets);

  // Prepare the locationBanner data object.
  $variables['locationBanner'] = Organisms::prepareLocationBanner($node);

  // Prepare the actionDetails data object.
  $variables['actionDetails'] = Organisms::prepareActionDetails($node);

  // Prepare the suggestedPages data object.
  $suggested_options = [
    'title' => t('Related Parks'),
    'style' => 'activities_image',
  ];
  $variables['suggestedPages'] = Organisms::prepareSuggestedPages($node, $suggested_options);

  // Prepare the quickActions data object.
  $variables['quickActions'] = Organisms::prepareQuickActions($node);

  // Prepare the sidebarContact data object.
  $variables['sidebarContact'] = Organisms::prepareSidebarContact($node);
}

/**
 * Implements hook_library_info_alter().
 */
function mass_theme_library_info_alter(&$libraries) {
  if (isset($libraries['google-map-field-renderer'])) {
    // Remove google map field style.
    unset($libraries['google-map-field-renderer']['css']['theme']['css/google-map-field-renderer.css']);
  }
}

/**
 * Implements hook_preprocess_block().
 */
function mass_theme_preprocess_block(&$variables) {
  // Get base_path into our block.twig templates
  // http://data.agaric.com/how-get-base-path-your-drupal-8-site-twig-template
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_menu().
 */
function mass_theme_preprocess_menu(&$variables) {
  // Use this formatting for Utility nav.
  if (array_key_exists('menu_name', $variables) && $variables['menu_name'] == 'utility') {
    // Get Theme settings languages if available.
    if (theme_get_setting('languages', 'mass_theme')) {
      $variables['languages'] = implode(',', array_filter(theme_get_setting('languages', 'mass_theme')));
    }

    foreach ($variables['items'] as &$item) {
      $ref_node = $item['url']->getRouteParameters();
      // Load it up and get the field.
      if ($node = Node::load($ref_node['node'])) {
        $icon = '';
        // Get icon.
        if ($node->hasField('field_icon_term') && array_key_exists('0', $node->get('field_icon_term')->referencedEntities())) {
          $icon = $node->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
        }
        // Get links.
        $links = [];
        if ($node->hasField('field_links')) {
          foreach ($node->get('field_links') as $link) {
            $links[] = [
              'type' => UrlHelper::isExternal($link->uri) ? 'external' : 'internal',
              'text' => $link->title,
              'href' => UrlHelper::isExternal($link->uri) ? $link->uri : Url::fromUri($link->uri),
            ];
          }
        }
        $items[] = [
          'text'      => $item['title'],
          'icon'      => icon_path($icon),
          'closeText' => t('Close'),
          'panel'     => [
            'description' => [
              'rteElements' => [[
                'path' => '@atoms/11-text/paragraph.twig',
                'data' => [
                  'paragraph' => [
                    'text' => $node->hasField('body') ? strip_tags($node->body->value, '<br><a><b>') : '',
                  ],
                ],
              ],
              ],
            ],
            'links' => $links,
          ],
        ];
      }
    }
    $variables['items'] = $items;
  }
  // Use this formatting for Main Nav aka Topic Nav.
  if (array_key_exists('menu_name', $variables) && $variables['menu_name'] == 'main') {
    $mainNav = [];
    foreach ($variables['items'] as &$item) {
      $subNav = [];
      foreach ($item['below'] as $link) {
        $subNav[] = [
          'href' => $link['url'],
          'text' => $link['title'],
        ];
      }
      $mainNav[] = [
        'href'   => $item['url'],
        'text'   => $item['title'],
        'active' => $item['in_active_trail'],
        'subNav' => $subNav,
      ];
    }
    $variables['mainNav'] = $mainNav;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function mass_theme_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Retrieve view mode.
  $view_mode = $variables['view_mode'];

  // Array of allowed view modes (for performance so as to not execute on
  // unneeded nodes).
  $allowed_view_modes = ['full'];

  // If current view mode is in allowed view modes list, pass to
  // mass_theme_add_regions_to_node().
  // This has the effect of making blocks in the specified theme regions
  // available to be rendered by the node template as, e.g. "pre_content".
  // @see templates/content/node.html.twig
  if (in_array($view_mode, $allowed_view_modes)) {
    // Allowed regions (for performance so as to not execute for unneeded
    // region).
    $allowed_regions = ['pre_content', 'post_content', 'section_topics'];
    mass_theme_add_regions_to_node($allowed_regions, $variables);
  }

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_node_page() or foo_preprocess_section_landing().
  $function = __FUNCTION__ . '_' . $node->getType();
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Preprocess our Section Landing node content.
 */
function mass_theme_preprocess_node_section_landing(&$variables) {
  $node = $variables['node'];

  // This is a required icon field, but lets check.
  if (array_key_exists('0', $node->get('field_icon_term')->referencedEntities())) {
    $icon = $node->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
    $variables['icon_path'] = icon_path($icon);
  }

  if ($node->field_featured_image->entity) {
    $variables['hero800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_image->entity->getFileUri());
  }

  // TODO: determine if we need another ImageStyle.
  if ($node->field_featured_mobile_image->entity) {
    $variables['mobile800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_mobile_image->entity->getFileUri());
  }

  // Get our subtopics (sections) view.
  $view_results = views_get_view_result('ordered_topics', 'ordered_topic_list_block', $node->id());
  $sections = [];
  // Roll this up and give the twig tpl what it expects.
  foreach ($view_results as $key => $row) {
    $icon_path = '';
    $links = [];
    // Wrap up our links for each subtopic.
    if ($row->_entity->hasField('field_common_content')) {
      foreach ($row->_entity->get('field_common_content')->referencedEntities() as $link) {
        $is_external = FALSE;
        if ($link->getType() == 'action') {
          if (isset($link->get('field_external_url')[0])) {
            $is_external = TRUE;
          }
        }
        // If we have an external URL, lets use that instead of internal paths.
        if ($is_external) {
          $external_link = $link->get('field_external_url')->first()->getValue();
          $link_path = $external_link['uri'];
        }
        else {
          $link_path = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $link->get('nid')->value);
        }
        $links[] = ['text' => $link->get('title')->value, 'href' => $link_path];
      }
    }

    // Wrap up each section with links.
    if (isset($row->_entity->get('field_icon_term')->referencedEntities()[0])) {
      $icon = $row->_entity->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
      $icon_path = icon_path($icon);
    }
    $sections[] = [
      'id' => $row->_entity->get('nid')->value,
      'catIcon' => [
        'icon' => $icon_path,
        'small' => 'true',
      ],
      'title' => [
        'href' => 'node/' . $row->_entity->get('nid')->value,
        'text' => $row->_entity->get('title')->value,
      ],
      'description' => $row->_entity->get('field_lede')->value,
      'links' => $links,
    ];
  }
  // Send to twig.
  $variables['sections'] = $sections;
}

/**
 * Implements hook_preprocess_node().
 *
 * Node action alterations.
 */
function mass_theme_preprocess_node_action(&$variables) {
  $node = $variables['node'];

  if ($variables['view_mode'] == 'full') {
    $field_action_parent = $node->get('field_action_parent');
    $taxonomy_terms = [];
    foreach ($field_action_parent->referencedEntities() as $term) {
      $link_path = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $term->get('nid')->value);
      $taxonomy_terms[] = ['url' => $link_path, 'term' => $term->get('title')->value];
    }
    $variables['taxonomyTerms'] = $taxonomy_terms;

    $field_action_sidebar = $node->get('field_action_sidebar');

    // Get the subheads for the sidebar and filter out the quick action.
    if ($field_action_sidebar->count() > 0) {
      $delta = 0;
      $quick_actions_section = FALSE;
      $quick_actions = [];

      foreach ($field_action_sidebar->referencedEntities() as $paragraph) {
        $paragraph->getType();
        if ($paragraph->getType() == 'subhead') {
          $title = $paragraph->field_title->value;
          if ($title == 'Quick Actions') {
            $quick_actions_section = TRUE;
          }
          else {
            $quick_actions_section = FALSE;
          }
        }
        if ($quick_actions_section == TRUE) {
          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
          $build = $view_builder->view($paragraph, 'sidebar');
          $quick_actions[] = $build;
        }
        $delta++;
      }
      $variables['quick_actions'] = $quick_actions;
    }
  }

  if ($variables['view_mode'] == 'teaser_simple' || $variables['view_mode'] == 'teaser') {
    $field_external_link = $node->get('field_external_url');

    // If we have an external URL, lets use that instead of internal paths.
    if ($field_external_link->count() > 0) {
      $link = $field_external_link->first()->getValue();
      $variables['link_url'] = $variables['link_url'] = Url::fromUri($link['uri']);
      $variables['link_title'] = $variables['label'];
      $variables['link_type'] = 'external';
    }
    else {
      $variables['link_type'] = 'internal';
      $variables['link_title'] = $variables['label'];
      $variables['link_url'] = $variables['url'];
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Node stacked layout alterations.
 */
function mass_theme_preprocess_node_stacked_layout(&$variables) {
  $node = $variables['node'];
  $image_field = $node->get('field_photo');
  $field_related_content = $node->get('field_related_content');

  foreach ($node->get('field_bands')->referencedEntities() as $paragraph) {
    if ($paragraph->getType() == 'search_band') {
      // If we have a search band, lets our node object and node template know.
      $variables['search_band'] = TRUE;
    }
  }

  if ($image_field->count() > 0) {
    $values = $image_field->getValue();
    $variables['image_url'] = Helper::getFieldImageUrl($node, 'illustrated_header', 'field_photo');
    $variables['image_alt'] = $values[0]['alt'];
    $variables['image_url_teaser_simple'] = Helper::getFieldImageUrl($node, 'thumbnail_130x160', 'field_photo');
  }

  if ($field_related_content->count() > 0) {
    $items = $field_related_content->referencedEntities();
  }

  if (!empty($items)) {
    $related_content = [];
    foreach ($items as $item) {
      $related_content[] = [
        'link' => [
          'type' => 'internal',
          'quickaction' => 'FALSE',
          'href' => $item->url(),
          'text' => $item->getTitle(),
          'image' => Helper::getFieldImageUrl($item, 'thumbnail_130x160', 'field_photo'),
          'label' => trim($item->get('field_label')->value) == 'Guide' ? 'Guide:' : '',
        ],
      ];
    }
    $variables['related_content'] = $related_content;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Node stacked layout alterations.
 */
function mass_theme_preprocess_node_2up_stacked_band(&$variables) {
  $node = $variables['node'];

  $label_clean = strtolower($node->getTitle());
  $label_clean = Html::cleanCssIdentifier($label_clean);
  $variables['label_clean'] = $label_clean;
}

/**
 * Implements hook_preprocess_node().
 *
 * Node stacked layout alterations.
 */
function mass_theme_preprocess_node_1up_stacked_band(&$variables) {
  $node = $variables['node'];

  $label_clean = strtolower($node->getTitle());
  $label_clean = Html::cleanCssIdentifier($label_clean);
  $variables['label_clean'] = $label_clean;
}

/**
 * Implements hook_preprocess_node().
 *
 * Node subtopic alterations.
 */
function mass_theme_preprocess_node_subtopic(&$variables) {
  $node = $variables['node'];

  $variables['desktop_finder_image'] = Helper::getFieldImageUrl($node, 'action_finder', 'field_featured_image');
  $variables['mobile_finder_image'] = Helper::getFieldImageUrl($node, 'action_finder_mobile', 'field_featured_mobile_image');
  if (empty($variables['mobile_finder_image'])) {
    $variables['mobile_finder_image'] = Helper::getFieldImageUrl($node, 'action_finder_mobile', 'field_featured_image');
  }

  // Load Instance of the secondary menu block with variables.
  $all_actions_view = \Drupal::entityTypeManager()->getStorage('block')->load('views_block__subtopics_all_actions_block_1');
  if (!empty($all_actions_view)) {
    $all_actions_view_content = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($all_actions_view);
    if ($all_actions_view_content) {
      // Add block content to build array.
      $variables['content']['all_actions_view'] = $all_actions_view_content;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Preprocess our Topic node content.
 */
function mass_theme_preprocess_node_topic(&$variables) {
  $node = $variables['node'];
  $icon_terms = $node->get('field_icon_term');

  // Get path_alias for breadcrumb in twig template.
  $variables['path_alias'] = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $node->get('field_section')->entity->nid->value);

  if ($icon_terms->count() > 0) {
    $terms = $icon_terms->referencedEntities();
    $term = current($terms);
    $variables['icon'] = icon_path($term->get('field_sprite_name')->value);
  }

  if ($node->field_featured_image->entity) {
    $variables['hero800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_image->entity->getFileUri());
  }

  if ($variables['view_mode'] == 'full') {
    // Get our callout links view.
    $view_results = views_get_view_result('callout_links', 'block_callout_links', $node->id());
    $callout_links = [];

    // Roll this up and give the twig tpl what it expects.
    foreach ($view_results as $key => $row) {

      // Common contact can be Actions or Subtopics,
      // so we need to check for the field.
      if ($row->_relationship_entities['field_common_content']->hasField('field_external_url')) {
        $external_url = $row->_relationship_entities['field_common_content']->get('field_external_url')->getValue();
      }
      $callout_links[] = [
        'calloutLink' => [
          'type'        => (!empty($external_url[0]['uri'])) ? 'external' : '',
          'quickaction' => 'FALSE',
          'href'        => (!empty($external_url[0]['uri'])) ? $external_url[0]['uri'] : \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->_relationship_entities['field_common_content']->get('nid')->value),
          'text'        => $row->_relationship_entities['field_common_content']->get('title')->value,
        ],
      ];
    }
    // Send to twig.
    $variables['calloutLinks'] = $callout_links;

    // Get our subtopics (sections) view.
    $view_results = views_get_view_result('subtopics', 'ordered_subtopic_list_block', $node->id());
    $sections = [];
    // Roll up the list of subtopics and give the twig tpl the links it expects.
    foreach ($view_results as $key => $row) {
      $links = [];
      // Wrap up our links for each subtopic.
      foreach ($row->_entity->get('field_topic_callout_links') as $link) {
        // Set default value.
        $link_path = Url::fromUri($link->uri);

        // If this is a link to a node, check for an external_url.
        // @todo: find a better way to test for node links.
        if (Unicode::strpos($link->uri, 'entity:node/') !== FALSE) {
          $nid = explode('/', $link->uri)[1];
          $linked_node = Node::load($nid);
          // Check that we have a node and that it has an external_url field.
          if ($linked_node && $linked_node->hasField('field_external_url')) {
            $external_link = $linked_node->get('field_external_url')->uri;
            // Check the external url field value is not empty.
            if (!empty($external_link)) {
              $link_path = $external_link;
            }
          }
        }
        $links[] = ['text' => $link->title, 'href' => $link_path];
      }
      // Wrap up each section with links.
      $sections[] = [
        'id' => $row->_entity->get('nid')->value,
        'title' => [
          'href' => \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->_entity->get('nid')->value),
          'text' => $row->_entity->get('title')->value,
        ],
        'description' => $row->_entity->get('field_lede')->value,
        'links' => $links,
      ];
    }
    // Send to twig.
    $variables['sections'] = $sections;
  }

  if ($variables['view_mode'] == 'teaser') {
    // Get our subtopics from view.
    $view_results = views_get_view_result('subtopics', 'section_links', $node->id());
    $links = [];
    // Roll this up for our twig template.
    foreach ($view_results as $key => $row) {
      $links[] = [
        'href' => \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->node_nid),
        'text' => $row->_entity->get('title')->value,
      ];
    }
    // Send to twig.
    $variables['links'] = $links;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Node alert (banner) alterations.
 */
function mass_theme_preprocess_node_emergency_alerts(&$variables) {
  if ('teaser' == $variables['view_mode']) {
    $node = $variables['node'];

    // Create and populate the data object which the template is expecting.
    $emergency_alerts = [];
    // Set alert id = node updated time.
    $emergency_alerts['id'] = $node->get('changed')->value;

    // Set banner accordion button text (css will format).
    $emergency_alerts['buttonAlert']['hideText'] = 'hide';
    $emergency_alerts['buttonAlert']['showText'] = 'show';
    $emergency_alerts['buttonAlert']['text'] = 'alerts';

    // Set alert banner headline = node title.
    $emergency_alerts['emergencyHeader']['title'] = $node->get('title')->value;

    // Get the alert paragraph field.
    $field_alert = $node->get('field_alert');

    // Iterate through alert paragraph instances.
    // Populate alerts array with individual alert content.
    if ($field_alert->count() > 0) {
      $delta = 0;
      $alerts = [];

      foreach ($field_alert->referencedEntities() as $paragraph) {

        // Format the alert timestamp to match new date format that meets spec.
        $raw_timestamp_str = $paragraph->get('field_emergency_alert_timestamp')->value;
        // Tell PHP that the timestamp is currently in UTC.
        $dateTime = new DateTime($raw_timestamp_str, new DateTimeZone('UTC'));
        $timezone = 'America/New_York';
        $dateTime->setTimeZone(new DateTimeZone($timezone));
        $timestamp = $dateTime->format('m.d.y, g:i a');

        // Get the alert optional "read more" link.
        $url = $paragraph->get('field_emergency_alert_link')->first();
        $link = '';
        if ($url) {
          $href = $url->getUrl()->toString();
          // Get the uuid of the alert instance.
          $alert_instance_id = $paragraph->get('id')->first()->value;

          // Target individual alert on alert landing page links.
          if ('/alerts' == $href) {
            $href .= '#' . $alert_instance_id;
          }

          // Populate optional alert "Read More" link data object.
          $link = [
            'chevron' => 'true',
            'text' => $url->getValue()['title'],
            'href' => $href,
            'type' => (UrlHelper::isExternal($url->getUrl()->toString())) ? 'external' : 'internal',
          ];
        }

        $alerts[] = [
          'message' => $paragraph->get('field_emergency_alert_message')->value,
          'timeStamp' => $timestamp,
          'link' => $link,
        ];

        $delta++;
      }

      $emergency_alerts['alerts'] = $alerts;

      // Make emergency alerts data object available in template.
      $variables['emergencyAlerts'] = $emergency_alerts;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Various global preprocessing.
 */
function mass_theme_preprocess_html(&$variables) {
  // Add Schema.org markup for body.
  if (isset($variables['node_type'])) {
    $variables['attributes']['vocab'][] = 'http://schema.org/';
    $variables['attributes']['typeof'][] = 'WebPage';
    // Add a body class for Action nodes.
    if ($variables['node_type'] == 'action') {
      $variables['attributes']['class'][] = 'action-page';
    }
  }

  // Add a variable for the emergency alerts banner view for front template.
  $is_front_page = \Drupal::service('path.matcher')->isFrontPage();

  if ($is_front_page) {
    $variables['alerts_banner_view'] = views_embed_view('emergency_alert', 'block_banner');
    // Add a body class if this is the front.
    $variables['attributes']['class'][] = 'is-front';
  }
  else {
    $variables['attributes']['class'][] = 'not-front';
  }

  // Add social media links for the organization info in page-meta.html.twig.
  $social_menu = \Drupal::menuTree()->load('social', new MenuTreeParameters());
  /** @var \Drupal\Core\Menu\MenuLinkTreeElement $menu_item */
  foreach ($social_menu as $menu_item) {
    $socialMedia[] = $menu_item->link->getUrlObject()->getUri();
  }

  // The colored state seal to be used by search engines.
  // Normally we would use theme_get_setting('logo.url')
  $logoSrc = "/images/stateseal-color.png";
  $hostname = \Drupal::request()->getSchemeAndHttpHost();
  // Pass Schema.org markup data to page-meta.html.twig.
  $metadata = [
    'id' => $hostname . "/#organization",
    'urlDomain' => $hostname,
    'socialMediaLinks' => json_encode($socialMedia, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT),
    'urlPath' => \Drupal::request()->getBaseUrl() . \Drupal::request()->getPathInfo(),
    'logoSrc' => $logoSrc,
    'siteName' => 'Mass.gov',
    'siteAltName' => 'The Official Website of the Commonwealth of Massachusetts',
    'siteDescription' => '',
    'siteKeywords' => '',
    'siteCopyright' => 'Commonwealth of Massachusetts',
    'orgName' => 'Commonwealth of Massachusetts',
    'schemaPageType' => $is_front_page ? 'Home' : '',
  ];
  Helper::addMetatagData($metadata);

  $variables['pageMetaData'] = $metadata;
}

/**
 * Implements hook_preprocess_page().
 *
 * Remove page search if we're using our search band in stacked layout.
 */
function mass_theme_preprocess_page(&$variables) {
  // Get Theme settings languages if available.
  if (theme_get_setting('languages', 'mass_theme')) {
    $variables['languages'] = implode(',', array_filter(theme_get_setting('languages', 'mass_theme')));
  }

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $node = $variables['node'];

    // When loading a revision only the nid is returned. We need the object.
    if (ctype_digit($node)) {
      $node = Node::load($node);
    }

    // If we're using search band, lets tell page twig about it.
    if ($node->hasField('field_bands') && $node->get('field_bands')->count() > 0) {
      foreach ($node->get('field_bands')->referencedEntities() as $paragraph) {
        if ($paragraph->getType() == 'search_band') {
          $variables['hideHeaderSearch'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function mass_theme_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];

  // Get the subheads for the action jump menu.
  if ($element['#field_name'] == 'field_action_details') {
    $delta = 0;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      if ($paragraph->getType() == 'subhead') {
        $title = $paragraph->field_title->value;
        $key = strtolower($title);
        $key = Html::cleanCssIdentifier($key);
        $variables['subheads'][$key] = $title;
      }
      $delta++;
    }
  }

  // Get the subheads for the sidebar and filter out the quick action.
  if ($element['#field_name'] == 'field_action_sidebar') {
    $delta = 0;
    $quick_actions_section = FALSE;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      $paragraph->getType();
      if ($paragraph->getType() == 'subhead') {
        $title = $paragraph->field_title->value;
        if ($title == 'Quick Actions') {
          $quick_actions_section = TRUE;
        }
        else {
          $quick_actions_section = FALSE;
        }
      }
      if ($quick_actions_section == TRUE) {
        unset($variables['items'][$delta]);
      }
      $delta++;
    }
  }

  // Get the subheads for the action jump menu.
  if ($element['#field_name'] == 'field_bands') {
    $delta = 0;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      // Check paragraph type.
      if ($paragraph->getType() == 'subhead') {
        // Get data from paragraph type field.
        $title_field = $paragraph->get('field_title');
        // Get the titles of a stack-layout for jump menu.
        if (!empty($title_field)) {
          $title = $title_field->getValue();
          $key = strtolower($title[0]['value']);
          $key = Html::cleanCssIdentifier($key);
          $variables['subheads'][$key] = $title[0]['value'];
        }
      }
      $delta++;
    }

    // Rebuild this array to include subheads into bands.
    $delta = 0;
    $bands = [];
    $subhead = [];
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      // Check paragraph type for subhead.
      if ($paragraph->getType() == 'subhead') {
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
        $build = $view_builder->view($paragraph, 'stacked');
        $subhead = $build;
      }
      // Check paragraph type for stacked band.
      if ($paragraph->getType() == '1up_stacked_band' || $paragraph->getType() == '2up_stacked_band' || $paragraph->getType() == 'action_set' || $paragraph->getType() == 'search_band') {
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
        $band = $view_builder->view($paragraph, 'stacked');
        $bands[$delta][] = $subhead;
        $bands[$delta][] = $band;
        // Since we've entered our subhead, clear it out.
        $subhead = [];
      }

      // If we have a search band, lets hide jump links.
      if ($paragraph->getType() == 'search_band') {
        $variables['search_band'] = TRUE;
      }

      $delta++;
    }
    $use_alt_header = FALSE;
    if (isset($element['#object']->get('field_use_alt_header')[0])) {
      $use_alt_header = $element['#object']->field_use_alt_header->get(0)->value;
    }
    $variables['use_alt_header'] = $use_alt_header;
    $variables['bands'] = $bands;
  }

  // If our Callout Link (Link field) references an internal node,
  // use the "External URL" field on that node, for the link,
  // if it exists.
  if ($element['#field_name'] == 'field_topic_callout_links') {
    $variables['external_link_url'] = '';
    $delta = 0;
    while (!empty($element[$delta])) {
      // Run only if this is an internal link.
      if ($element[$delta]['#url']->isExternal() == FALSE) {
        // Get the nid of the referenced internal node.
        $ref_node = $element[$delta]['#url']->getRouteParameters();
        // Load it up and get the field.
        if ($node = Node::load($ref_node['node'])) {
          // Run only on Action nodes.
          if ($node->getType() == "action" && $node->hasField('field_external_url')) {
            $external_url = $node->get('field_external_url')->uri;
            if (!empty($external_url)) {
              // Send this url to our template.
              $variables['external_link_url'] = Url::fromUri($external_url);
            }
          }
        }
      }
      $delta++;
    }
  }
  if (($element['#view_mode'] == 'sidebar' || $element['#view_mode'] == 'stacked_sidebar') && $element['#bundle'] == 'related_link') {
    $links = [];
    $delta = 0;
    // Wrap up our related links.
    while (!empty($element[$delta]) && !isset($element[$delta]['#type'])) {
      $url = $element[$delta]['#url_title'];
      // Check if referenced nodes are external urls.
      if ($element[$delta]['#url']->isRouted()) {
        $nid = $element[$delta]['#url']->getRouteParameters()['node'];
        $node = \Drupal::entityManager()->getStorage('node')->load($nid);
        if (!is_null($node) && $node->hasField('field_external_url') && !empty($node->get('field_external_url')->uri)) {
          $url = $node->get('field_external_url')->uri;
        }
      }

      $links[] = [
        'link' => [
          'text' => $element[$delta]['#title'],
          'href' => $url,
          'type' => (UrlHelper::isExternal($url)) ? 'external' : 'internal',
        ],
      ];
      $delta++;
    }
    // Send array to twig.
    $variables['relatedActions'] = $links;
  }

  if (($element['#view_mode'] == 'sidebar' || $element['#view_mode'] == 'stacked_sidebar') && $element['#bundle'] == 'contact_group') {
    $groups = [];
    $order = [];
    $delta = 0;

    // Wrap up our contact groups.
    while (!empty($element[$delta])) {

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'phone') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our phone numbers.
        $phone_details[] = [
          'label'   => $element[$delta]['#paragraph']->get('field_label')->value,
          'value'   => $element[$delta]['#paragraph']->get('field_phone')->value,
          'rawVal'  => $element[$delta]['#paragraph']->get('field_phone')->value,
          'link'    => str_replace(['+', '-'], '', filter_var($element[$delta]['#paragraph']->get('field_phone')->value, FILTER_SANITIZE_NUMBER_INT)),
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type'    => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'fax') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our fax numbers.
        $fax_details[] = [
          'label'   => $element[$delta]['#paragraph']->get('field_label')->value,
          'value'   => $element[$delta]['#paragraph']->get('field_phone')->value,
          'rawVal'  => $element[$delta]['#paragraph']->get('field_phone')->value,
          'link'    => $element[$delta]['#paragraph']->get('field_phone')->value,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type'    => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'online') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our online links.
        $value = $link = NULL;
        if (!empty($element[$delta]['#paragraph']->get('field_link')->first())) {
          $value = $element[$delta]['#paragraph']->get('field_link')->first()->getValue()['title'];
          $link = $element[$delta]['#paragraph']->get('field_link')->first()->getValue()['uri'];
        }

        $online_details[] = [
          'label'   => $element[$delta]['#paragraph']->get('field_label')->value,
          'value'   => $value,
          'rawVal'  => '',
          'link'    => $link,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type'    => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'branch_location') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our branch location links.
        $value = $link = NULL;
        if (!empty($element[$delta]['#paragraph']->get('field_branch_locations')->first())) {
          $value = $element[$delta]['#paragraph']->get('field_branch_locations')->first()->getValue()['title'];
          $link = $element[$delta]['#paragraph']->get('field_branch_locations')->first()->getValue()['uri'];
        }

        $branch_location_details[] = [
          'label'   => $element[$delta]['#paragraph']->get('field_label')->value,
          'value'   => $value,
          'rawVal'  => '',
          'link'    => $link,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type'    => 'online',
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'email') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;
        // Wrap up all our emails.
        $email_details[] = [
          'label'   => $element[$delta]['#paragraph']->get('field_label')->value,
          'value'   => $element[$delta]['#paragraph']->get('field_email')->value,
          'rawVal'  => $element[$delta]['#paragraph']->get('field_email')->value,
          'link'    => $element[$delta]['#paragraph']->get('field_email')->value,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type'    => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      if ($element[$delta]['#paragraph']->get('field_type')->value == 'mail') {
        $order[$delta] = $element[$delta]['#paragraph']->get('field_type')->value;

        // Wrap up all our addresses.
        $address_details[] = [
          'label'   => $element[$delta]['#paragraph']->get('field_label')->value,
          'value'   => $element[$delta]['#paragraph']->get('field_address')->value,
          'rawVal'  => '',
          'link'    => 'https://maps.google.com/?q=' . urlencode($element[$delta]['#paragraph']->get('field_address')->value),
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type'    => 'address',
        ];
        $delta++;
        continue;
      }

      // No type? or type "other"? Try to process what we have.
      if (!isset($element[$delta]['#paragraph']->get('field_type')->value) || $element[$delta]['#paragraph']->get('field_type')->value == 'other') {
        $order[$delta] = 'other';
        // Wrap up all our other stuff. Anything goes!
        $value = '';
        $link = '';
        if ($element[$delta]['#paragraph']->get('field_link')->first() !== NULL) {
          $value = $element[$delta]['#paragraph']->get('field_link')->first()->getValue()['title'];
          $link = $element[$delta]['#paragraph']->get('field_link')->first()->getValue()['uri'];
        }
        $other_details[] = [
          'label'   => $element[$delta]['#paragraph']->get('field_label')->value,
          'value'   => $element[$delta]['#paragraph']->get('field_phone')->value .
          $value .
          $element[$delta]['#paragraph']->get('field_email')->value .
          $element[$delta]['#paragraph']->get('field_address')->value,
          'rawVal'  => '',
          'link'    => $element[$delta]['#paragraph']->get('field_phone')->value .
          $link .
          $element[$delta]['#paragraph']->get('field_email')->value,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type'    => $element[$delta]['#paragraph']->get('field_type')->value,
        ];
        $delta++;
        continue;
      }

      // If all else fails, increment or we spin out of control.
      $delta++;
    }

    $order = array_unique($order);

    // Render our groups in order.
    foreach ($order as $value) {
      // Do we have phone numbers? If so, display them under one icon.
      if (!empty($phone_details) && $value == 'phone') {
        $groups[] = [
          'icon'    => '@atoms/05-icons/svg-phone.twig',
          'name'    => 'Phone',
          'items'   => $phone_details,
        ];
      }
      // Do we have fax numbers? If so, display them under one icon.
      if (!empty($fax_details) && $value == 'fax') {
        $groups[] = [
          'icon'    => '@atoms/05-icons/svg-fax-icon.twig',
          'name'    => 'Fax',
          'items'   => $fax_details,
        ];
      }
      // Do we have emails? If so, display them under one icon.
      if (!empty($email_details) && $value == 'email') {
        $groups[] = [
          'icon'    => '@atoms/05-icons/svg-laptop.twig',
          'name'    => 'Online',
          'items'   => $email_details,
        ];
      }
      // Do we have online links? If so, display them under one icon.
      if (!empty($online_details) && $value == 'online') {
        $groups[] = [
          'icon'    => '@atoms/05-icons/svg-laptop.twig',
          'name'    => 'Online',
          'items'   => $online_details,
        ];
      }
      // Do we have branch location links? If so, display them under one icon.
      if (!empty($branch_location_details) && $value == 'branch_location') {
        $groups[] = [
          'icon'    => '@atoms/05-icons/svg-profile.twig',
          'name'    => 'Branch Location',
          'items'   => $branch_location_details,
        ];
      }
      // Do we have address? If so, display them under one icon.
      if (!empty($address_details) && $value == 'mail') {
        $groups[] = [
          'icon'    => '@atoms/05-icons/svg-mail.twig',
          'name'    => 'Address',
          'items'   => $address_details,
        ];
      }
      // Do we have other details? If so, display them under one icon.
      if (!empty($other_details) && $value == 'other') {
        $groups[] = [
          'icon'    => '@atoms/05-icons/svg-marker.twig',
          'name'    => 'Other',
          'items'   => $other_details,
        ];
      }
    }
    // Send to twig template.
    $variables['contactGroups'] = $groups;
  }

  // Populate helpful links array.
  if ($element['#field_name'] == 'field_helpful_links') {
    $helpful_links = [];
    $helpful_links['compHeading'] = [
      'title' => $element['#title'],
      'sub' => 'true',
      'color' => 'yellow',
    ];
    $links = [];
    $delta = 0;
    // Wrap up our helpful links.
    while (!empty($element[$delta]) && !isset($element[$delta]['#type'])) {
      $links[] = [
        'chevron' => 'true',
        'text' => $element[$delta]['#title'],
        'href' => $element[$delta]['#url_title'],
      ];
      $delta++;
    }
    $helpful_links['items'] = $links;
    // Send array to twig.
    $variables['helpfulLinks'] = $helpful_links;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Various global preprocessing.
 */
function mass_theme_preprocess_taxonomy_term(&$variables) {
  $term = $variables['term'];
  $vocab = $term->bundle();

  if ($vocab == 'icons') {
    $field_sprite_type = $term->get('field_sprite_type');

    if ($field_sprite_type->count() > 0) {
      $svg_type = $field_sprite_type->first()->getValue();
      $variables['svg_type'] = $svg_type['value'];
    }

    $field_sprite_name = $term->get('field_sprite_name');

    if ($field_sprite_name->count() > 0) {
      $sprite_name = $field_sprite_name->first()->getValue();
      $variables['sprite_name'] = $sprite_name['value'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_node_page() or foo_preprocess_section_landing().
  $function = __FUNCTION__ . '__' . $paragraph->getType();
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__related_content(&$variables) {
  $paragraph = $variables['paragraph'];

  $field_related_content_items = $paragraph->get('field_related_content');

  // Get Related items.
  if ($field_related_content_items->count() > 0) {
    $related_items = $field_related_content_items->referencedEntities();
  }

  if (!empty($related_items)) {
    $nodes = [];
    $types = [];
    $total_count = count($related_items);

    foreach ($related_items as $id => $item) {
      /** @var Drupal\node\Entity\Node $item */
      // Default icon for content without icons but using the Topic card.
      $item->{'icon'} = '@atoms/05-icons/svg-marker.twig';
      $item->{'node_path'} = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $item->get('nid')->value);
      $item->{'image_thumbnail_url'} = $item->hasField('field_photo') ? Helper::getFieldImageUrl($item, 'thumbnail_130x160', 'field_photo') : '';

      // For Stacked Layout, if label or acronym is Guide then the label
      // should be "Guide:".
      if ($item->getType() == 'stacked_layout') {
        $label = $item->get('field_label')->isEmpty() ? '' : $item->get('field_label')->value;
        $item->{'label_text'} = $label == 'Guide' ? 'Guide:' : '';
      }

      // Grab our icon.
      // Topics have an icon field.
      if ($item->hasField('field_icon_term') && array_key_exists('0', $item->get('field_icon_term')->referencedEntities())) {
        $icon = $item->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
        $item->{'icon'} = icon_path($icon);
      }
      // Subtopics don't have an icons field, so lets use its topic parent ref.
      // field_topic_parent references to Stacked Layout and Topic content.
      // Only Topic content has field_icon_term field.
      if ($item->hasField('field_topic_parent') && !$item->get('field_topic_parent')->isEmpty()) {
        $icon = _mass_theme_get_topic_parent_icon($item);
        $item->{'icon'} = icon_path($icon);
      }

      // Topics don't have topic callouts, so we use common content for links.
      if ($item->hasField('field_common_content')) {
        $links = [];
        foreach ($item->get('field_common_content')->referencedEntities() as $link) {
          // Get aliased path.
          $link_path = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $link->get('nid')->value);
          if ($link && $link->hasField('field_external_url')) {
            $external_link = $link->get('field_external_url')->uri;
            // Check the external url field value is not empty.
            if (!empty($external_link)) {
              $link_path = $external_link;
            }
          }
          $links[] = ['text' => $link->getTitle(), 'href' => $link_path];
        }
        // Get links for our topic cards.
        $item->{'links'} = $links;
      }

      // Subtopics have topic callout links.
      if ($item->hasField('field_topic_callout_links')) {
        $links = [];
        foreach ($item->get('field_topic_callout_links') as $link) {
          $link_path = Url::fromUri($link->uri);
          if (Unicode::strpos($link->uri, 'entity:node/') !== FALSE) {
            $nid = explode('/', $link->uri)[1];
            $linked_node = Node::load($nid);
            // Check that we have a node and that it has an external_url field.
            if ($linked_node && $linked_node->hasField('field_external_url')) {
              $external_link = $linked_node->get('field_external_url')->uri;
              // Check the external url field value is not empty.
              if (!empty($external_link)) {
                $link_path = $external_link;
              }
            }
          }
          $links[] = ['text' => $link->title, 'href' => $link_path];
        }
        // Get links for our topic cards.
        $item->{'links'} = $links;
      }

      $nodes[] = $item;
      $types[] = $item->getType();
    }
  }

  $contentTypes = \Drupal::service('entity.manager')->getStorage('node_type')->loadMultiple();

  $contentTypesList = [];

  // Get our content types list.
  foreach ($contentTypes as $contentType) {
    $contentTypesList[$contentType->id()] = 0;
  }

  // Merge in our content types with totals so we don't have to check indexs.
  $total_type_with_count = array_merge($contentTypesList, array_count_values($types));

  $variables['layout'] = _get_layout($total_type_with_count, $total_count);
  $variables['items'] = $nodes;
}

/**
 * Provide the desired design layout for related things.
 *
 * @param array $total_type_with_count
 *   A list of all content types with counts of how many.
 * @param int $total_count
 *   The total count of referenced nodes.
 *
 * @return string
 *   The twig layout to be used.
 */
function _get_layout(array $total_type_with_count, $total_count) {
  // Tests for using bullets.
  if (
    $total_type_with_count['stacked_layout'] == $total_count) {
    return 'bullets';
  }
  // Tests for using Action Card layout.
  if (
    $total_type_with_count['action'] == $total_count ||
    $total_type_with_count['action'] + $total_type_with_count['stacked_layout'] == $total_count) {
    return 'actionCards';
  }
  // Tests for using Topic Card layout.
  if (
    $total_type_with_count['topic'] + $total_type_with_count['subtopic'] == $total_count ||
    $total_type_with_count['topic'] + $total_type_with_count['subtopic'] + $total_type_with_count['stacked_layout'] == $total_count) {
    return 'topicCards';
  }

  return 'bullets';
}

/**
 * Return the parent topic icon.
 *
 * It solves the case when a direct parent doesn't have a field_icon_term.
 * Recursively look for the right node with the icon or return empty string
 * if there is no one.
 *
 * @param Drupal\node\Entity\Node $item
 *   The node to get value from.
 *
 * @return string
 *   Return icon or empty string.
 */
function _mass_theme_get_topic_parent_icon(Node $item) {
  /** @var Drupal\Core\Field\EntityReferenceFieldItemList $parents */
  $parents = $item->get('field_topic_parent');
  foreach ($parents->referencedEntities() as $parent) {
    if ($parent->getType() == 'topic') {
      return $parent->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
    }
  }

  // If no topic found, then look for parents of parent.
  foreach ($parents->referencedEntities() as $parent) {
    if ($parent->hasField('field_topic_parent') && !$parent->get('field_topic_parent')->isEmpty()) {
      _mass_theme_get_topic_parent_icon($parent);
    }
  }

  // If no topic parent was found return empty string.
  return '';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__action_set(&$variables) {
  $paragraph = $variables['paragraph'];

  $field_featured_items = $paragraph->get('field_featured_content');
  $featured_links = [];
  $image_url = '';

  // Get field labels for twig.
  $variables['featuredHeading'] = $field_featured_items->getFieldDefinition()->getLabel();

  // Get Featured links.
  if ($field_featured_items->count() > 0) {
    $featured_items = $field_featured_items->referencedEntities();
  }

  if (!empty($featured_items)) {
    foreach ($featured_items as $id => $item) {
      $image_url = '';
      $external_url = '';
      if ($item->hasField('field_external_url')) {
        $external_url = $item->get('field_external_url')->uri;
      }

      $featured_links[] = [
        'image' => $item->hasField('field_photo') ? Helper::getFieldImageUrl($item, 'thumbnail_130x160', 'field_photo') : '',
        'text'  => $item->getTitle(),
        'type'  => $external_url ? 'external' : 'internal',
        'href'  => $external_url ? $external_url : $item->toURL()->toString(),
      ];
    }

    $variables['featuredLinks'] = $featured_links;
  }

  $field_link_items = $paragraph->get('field_related_content');
  $links = [];

  $variables['generalHeading'] = $field_link_items->getFieldDefinition()->getLabel();

  // Get All Actions & Guides links.
  if ($field_link_items->count() > 0) {
    $link_items = $field_link_items->referencedEntities();
  }

  if (!empty($link_items)) {
    foreach ($link_items as $id => $item) {
      $image_url = '';
      $external_url = '';
      if ($item->hasField('field_external_url')) {
        $external_url = $item->get('field_external_url')->uri;
      }

      $links[] = [
        'image' => $item->hasField('field_photo') ? Helper::getFieldImageUrl($item, 'thumbnail_130x160', 'field_photo') : '',
        'text'  => $item->getTitle(),
        'type'  => $external_url ? 'external' : 'internal',
        'href'  => $external_url ? $external_url : $item->toURL()->toString(),
      ];
    }

    $variables['links'] = $links;

    if (!empty($paragraph->get('field_link_single')->uri)) {
      $seeAll = [
        'type'  => UrlHelper::isExternal($paragraph->get('field_link_single')->uri) ? 'external' : 'internal',
        'href'  => Url::fromUri($paragraph->get('field_link_single')->uri),
        'text'  => $paragraph->get('field_link_single')->title,
        'info' => '',
      ];
      $variables['seeAll'] = $seeAll;
    }
  }

  // Get our background image.
  if ($paragraph->get('field_image')->entity) {
    $variables['bgWide'] = ImageStyle::load('hero800x400')->buildUrl($paragraph->get('field_image')->entity->getFileUri());
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process 3 up text.
 */
function mass_theme_preprocess_paragraph__3_up_content(&$variables) {
  $paragraph = $variables['paragraph'];
  $rows = $paragraph->get('field_3_up_rows');
  $list = [];

  if ($rows->count() > 0) {
    $items = $rows->referencedEntities();
  }

  if (!empty($items)) {
    $list = [];
    foreach ($items as $id => $item) {
      $field_content = $item->get('field_content')->view('full');
      // Break out our paragraphs and render the field - it might have an image.
      $paragraph_tags = explode("<p>", str_replace("</p>", "", render($field_content)));

      // Reset our array.
      $paragraphs = [];
      foreach ($paragraph_tags as $paragraph_tag) {
        if (!empty($paragraph_tag)) {
          $paragraphs[] = [
            'path' => '@atoms/11-text/raw-html.twig',
            'data' => [
              'rawHtml' => [
                'content' => trim(str_replace("<p>", "", $paragraph_tag)),
              ],
            ],
          ];
        }
      }

      $list['column' . ++$id] = [
      [
        'path' => '@atoms/04-headings/column-heading.twig',
        'data' => [
          'columnHeading' => [
            'text' => $item->get('field_heading')->value,
          ],
        ],
      ],
    [
      'path' => '@organisms/by-author/rich-text.twig',
      'data' => [
        'rteElements' => $paragraphs,
      ],
    ],
      ];
    }
  }

  $variables['splitColumns'] = $list;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__action_step_numbered_list(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_action_step_numbered_items = $paragraph->get('field_action_step_numbered_items');
  $list = [];

  if ($field_action_step_numbered_items->count() > 0) {
    $items = $field_action_step_numbered_items->referencedEntities();
  }

  if (!empty($items)) {
    foreach ($items as $id => $item) {
      $list[$id] = [];
      $field_title = $item->get('field_title');
      $field_content = $item->get('field_content');

      if ($field_title->count() > 0) {
        $title = $field_title->first()->getValue();
        $list[$id]['title'] = $title['value'];
      }

      if ($field_content->count() > 0) {
        $content = $field_content->first()->view('full');
        $list[$id]['rteElements'][] = [
          'path' => '@atoms/11-text/raw-html.twig',
          'data' => [
            'rawHtml' => [
              'content' => $content,
            ],
          ],
        ];
      }
    }
  }
  $variables['actionSeqLists'] = $list;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Clean css id for subheads.
 */
function mass_theme_preprocess_paragraph__subhead(&$variables) {
  $subhead = $variables['paragraph']->get('field_title')->first()->getValue()['value'];
  $subhead_clean = strtolower($subhead);
  $subhead_clean = Html::cleanCssIdentifier($subhead_clean);
  $variables['title_clean'] = $subhead_clean;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for action step paragraphs.
 */
function mass_theme_preprocess_paragraph__action_step(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_title = $paragraph->get('field_title');
  $field_content = $paragraph->get('field_content');

  if ($field_title->count() > 0) {
    $title = $field_title->first()->getValue();
    $variables['title'] = $title['value'];
  }

  if ($field_content->count() > 0) {
    $rich_text = $field_content->first()->getValue();
    $variables['rich_text'] = $rich_text['value'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_link(&$variables) {
  $url = $variables['paragraph']->get('field_link')->first()->getUrl();

  $variables['calloutLink']['text'] = $variables['paragraph']->get('field_link')->first()->getValue()['title'];
  $variables['calloutLink']['href'] = $url->toString();
  $variables['calloutLink']['type'] = (UrlHelper::isExternal($url->toString())) ? 'external' : 'internal';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link - need-to-know paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_alert(&$variables) {
  $link = Helper::separatedLinks($variables['paragraph'], 'field_link');

  $variables['calloutAlert']['decorativeLink'] = $link[0];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Deliver a image style uri to our search band twig template.
 */
function mass_theme_preprocess_paragraph__search_band(&$variables) {
  $paragraph = $variables['paragraph'];
  $image = isset($paragraph->field_image->entity) ? $paragraph->field_image->entity : NULL;
  $variables['search1600x400_image_url'] = $image ? ImageStyle::load('hero1600x800')->buildUrl($image->getFileUri()) : NULL;
  $variables['search800x400_image_url'] = $image ? ImageStyle::load('hero800x400')->buildUrl($image->getFileUri()) : NULL;

  // Grab node title incase we don't have a title in band.
  $node = \Drupal::request()->attributes->get('node');
  if ($node) {
    $variables['title'] = $node->getTitle();
    $variables['intro'] = $node->field_lede->value;
  }

  $items = [];
  if (!$variables['paragraph']->get('field_link_six')->isEmpty()) {
    $popular_searches = $variables['paragraph']->get('field_link_six');

    // Roll up our popular searches links for search band.
    foreach ($popular_searches as $link) {
      $items[] = [
        'href' => $link->getUrl()->toString(),
        'text' => $link->getValue()['title'],
        'chevron' => 'true',
      ];
    }
  }

  $variables['items'] = $items;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout button paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_button(&$variables) {

  if (!$variables['paragraph']->get('field_link')->isEmpty()) {
    $links = $variables['paragraph']->get('field_link');
    $items = [];

    foreach ($links as $link) {
      // If the linked item was deleted, $link may not exist.
      if ($link) {
        $items[] = [
          'text' => $link->getValue()['title'],
          'href' => $link->getUrl()->toString(),
          'type' => (UrlHelper::isExternal($link->getUrl()
            ->toString())) ? 'external' : 'internal',
        ];
      }
    }

    $variables['buttonMinors'] = $items;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Sets up banner elements for full_bleed paragraphs.
 */
function mass_theme_preprocess_paragraph__full_bleed(&$variables) {
  $paragraph = $variables['paragraph'];

  $field_full_bleed_ref = $paragraph->get('field_full_bleed_ref');
  if ($field_full_bleed_ref) {
    $items = $field_full_bleed_ref->referencedEntities();
    if (!empty($items)) {
      foreach ($items as $item) {
        if ($item->getType() == 'slideshow') {
          $image_field = $item->get('field_slideshow');
          $image_count = $image_field->count();
          $images = [];
          foreach ($image_field as $id => $image) {
            $value = $image->getValue();
            $image_small = Helper::getFieldImageUrl($item, 'action_banner_small', 'field_slideshow', $id);
            $image_large = Helper::getFieldImageUrl($item, 'action_banner_large', 'field_slideshow', $id);
            $images[$id] = [
              'image' => $image_small,
              'imageLarge' => $image_large,
              'alt' => $value['alt'],
            ];
          }

          $variables['images'] = $images;
          $variables['image_count'] = $image_count;
        }
        elseif ($item->getType() == 'iframe' || $item->getType() == 'map') {
          $map = $item;
          $id = $item->id;

          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
          $build = $view_builder->view($item, 'extended_header');
          $variables['map'] = $build;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_link_formatter_link_separate().
 *
 * Separate title and link for rendering in template
 * Default template: link-formatter-link-separate.html.twig.
 */
function mass_theme_preprocess_link_formatter_link_separate(&$variables) {
  $variables['fieldLink']['text'] = $variables['title'];
  $variables['fieldLink']['href'] = $variables['url'];
  $variables['fieldLink']['type'] = $variables['url']->isExternal() ? 'external' : 'internal';
}

/**
 * Provide the URL of an image.
 *
 * @param object $node
 *   The node with the field on it.
 * @param string $style_name
 *   The name of an image style.
 * @param string $field
 *   The name of an the image field.
 *
 * @return string
 *   The URL to the styled image, or to the original image if the style does not
 *   exist.
 */
function mass_theme_get_field_image_url($node, $style_name = NULL, $field = NULL, $id = 0) {
  $url = '';

  $fields = $node->get($field);
  if ($fields) {
    $images = $fields->referencedEntities();
  }

  if (!empty($images)) {
    $image = $images[$id];

    if (!empty($style_name) && ($style = ImageStyle::load($style_name))) {
      $url = $style->buildUrl($image->getFileUri());
    }
    else {
      $url = $image->url();
    }
  }

  return $url;
}

/**
 * Implements mass_theme_add_regions_to_node().
 *
 * Add regions to node templates.
 */
function mass_theme_add_regions_to_node($allowed_regions, &$variables) {
  // Retrieve active theme.
  $theme = \Drupal::theme()->getActiveTheme()->getName();

  // Retrieve theme regions.
  $available_regions = system_region_list($theme, 'REGIONS_ALL');

  // Validate allowed regions with available regions.
  $regions = array_intersect(array_keys($available_regions), $allowed_regions);

  // For each region.
  foreach ($regions as $key => $region) {

    // Load region blocks.
    $blocks = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->loadByProperties(['theme' => $theme, 'region' => $region]);

    // Capture viewable blocks and their settings to $build.
    $build = [];
    foreach ($blocks as $key => $block) {
      if ($block->access('view')) {
        $block = Block::load($key);
        $block_content = \Drupal::entityTypeManager()
          ->getViewBuilder('block')
          ->view($block);
        $build[$key] = $block_content;
      }
    }

    // Add build to region.
    $variables[$region] = $build;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact_group(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_layout = $paragraph->get('field_contact_group_layout');

  if ($field_layout->count() > 0) {
    $layout = $field_layout->first()->getValue();
    $variables['layout'] = $layout['value'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact_info(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_address = $paragraph->get('field_address');

  if ($field_address->count() > 0) {
    $address = $field_address->first()->getValue();
    $address_url = 'https://www.google.com/maps/place/' . $address['value'];
    $variables['address_url'] = $address_url;
  }

  $svg_types = [
    'phone' => ['class' => 'svg-phone', 'svg' => 'phone'],
    'laptop' => ['class' => 'svg-laptop', 'svg' => 'laptop'],
    'mail' => ['class' => 'svg-mail', 'svg' => 'mail'],
    'profile' => ['class' => 'svg-profile', 'svg' => 'profile'],
  ];

  $field_type = $paragraph->get('field_type');

  if ($field_type->count() > 0) {
    $type = $field_type->first()->getValue();
    $svg_type = '';

    switch ($type['value']) {
      case 'phone';
      case 'fax':
        $svg_type = $svg_types['phone'];
        break;

      case 'online':
        $svg_type = $svg_types['laptop'];
        break;

      case 'email';
      case 'mail':
        $svg_type = $svg_types['mail'];
        break;

      case 'branch_location':
        $svg_type = $svg_types['profile'];
        break;

    }
    $variables['svg_type'] = $svg_type;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact(&$variables) {
  if ($variables['paragraph']->get('field_phone')->first()) {
    $phone = $variables['paragraph']->get('field_phone')->first()->getValue()['value'];
    $variables['phone_clean'] = preg_replace('/[^0-9]+/', '', $phone);
  }
  if ($variables['paragraph']->get('field_fax')->first()) {
    $fax = $variables['paragraph']->get('field_fax')->first()->getValue()['value'];
    $variables['fax_clean'] = preg_replace('/[^0-9]+/', '', $fax);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__action_address(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_address_url = $paragraph->get('field_address_url');

  if ($field_address_url->count() > 0) {
    $address = $field_address_url->first()->getValue();
    $direction_url = 'https://www.google.com/maps/place/' . $address['value'];
    $variables['direction_url'] = $direction_url;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for downloads.
 */
function mass_theme_preprocess_paragraph__file_download(&$variables) {
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
  $path = DRUPAL_ROOT . '/' . $theme_path . '/patterns/atoms/';

  $paragraph = $variables['paragraph'];
  $action_downloads = [];
  $field_downloads = $paragraph->get('field_downloads');
  $files = '';

  if ($field_downloads->count() > 0) {
    $file_list = $field_downloads->getValue();
    $files = $field_downloads->referencedEntities();
  }

  if (!empty($files)) {
    foreach ($files as $id => $file) {
      // Default icon.
      $icon = '@atoms/05-icons/svg-doc-generic.twig';

      // Get the human readable file size.
      $bytes = $file->getSize();
      $readable_size = format_size($bytes);

      // Use the description as the link text if available,
      // if not, use the file name.
      $filename = $file->getFilename();

      $link_text = $filename;
      if (!empty($file_list[$id]['description'])) {
        $link_text = $file_list[$id]['description'];
      }

      // Set the file link variable.
      $url = file_create_url($file->getFileUri());

      // Get the file extension.
      // see: http://php.net/manual/en/splfileinfo.getextension.php
      $file_info = new SplFileInfo($filename);
      $file_extension = $file_info->getExtension();

      // Check if icon template exists.
      if (file_exists($path . '05-icons/svg-doc-' . strtolower($file_extension) . '.twig')) {
        $icon = '@atoms/05-icons/svg-doc-' . $file_extension . '.twig';
      }

      $action_downloads[] = [
        'icon' => $icon,
        'text' => $link_text,
        'href' => $url,
        'size' => $readable_size,
        'type' => $file_extension,
      ];
    }
  }
  $variables['actionDownloads'] = $action_downloads;
}

/**
 * Helper function to sort a list of items by title.
 */
function compare_by_title($a, $b) {
  return strcasecmp($a['content']['#title'], $b['content']['#title']);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Sort items array case insensitively, since twig won't.
 */
function mass_theme_preprocess_field__field_topic_callout_links(&$variables) {
  if (isset($variables['element']['#view_mode']) && $variables['element']['#view_mode'] == 'teaser') {
    // Don't have to do anything with this since usort acts on the actual
    // array but returns a boolean.
    $items_lower = usort($variables['items'], 'compare_by_title');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add theme suggestions for Footer Menus.
 */
function mass_theme_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (!empty($variables['menu_name']) && strpos($variables['menu_name'], 'footer') > -1) {
    $suggestions[] = "menu__footer_layout";
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add theme suggestions to fields for separate view modes.
 */
function mass_theme_theme_suggestions_field_alter(&$suggestions, $variables) {
  $suggestions[] = 'field__' .
    $variables['element']['#field_name'] . '__' .
    $variables['element']['#view_mode'];

  $suggestions[] = 'field__' .
    $variables['element']['#entity_type'] . '__' .
    $variables['element']['#field_name'] . '__' .
    $variables['element']['#bundle'] . '__' .
    $variables['element']['#view_mode'];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add title to 3up Container from the current page.
 */
function mass_theme_preprocess_ma_section3up_container_style(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
  $variables['label'] = $title;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Parse file attributes for file link template.
 * Default template: file-link.html.twig.
 */
function mass_theme_preprocess_file_link(&$variables) {
  // Get file attributes for ct.action file download links.
  $file = $variables['file'];
  $file_entity = ($file instanceof File) ? $file : File::load($file->fid);

  // Get the human readable file size.
  $bytes = $file->getSize();
  $readable_size = format_size($bytes);
  $variables['download']['size'] = $readable_size;

  // Use the description as the link text if available,
  // if not, use the file name.
  $filename = $file_entity->getFilename();
  if (empty($variables['description'])) {
    $variables['download']['linktext'] = $filename;
  }
  else {
    $variables['download']['linktext'] = $variables['description'];
  }

  // Set the file link variable.
  $variables['download']['link'] = file_create_url($file_entity->getFileUri());

  // Get the file extension.
  // see: http://php.net/manual/en/splfileinfo.getextension.php
  $file_info = new SplFileInfo($filename);
  $file_extension = $file_info->getExtension();

  // Set the file type based on extesnion.
  $variables['download']['filetype'] = $file_extension;

  // Set the icon name.
  $variables['download']['iconName'] = 'doc-' . $file_extension;
}

/**
 * Implements template_preprocess_views_view().
 */
function mass_theme_preprocess_views_view(&$variables) {
  $variables['row_count'] = 0;
  $variables['filter_value'] = '';

  if (isset($variables['exposed']['filter']['#value'])) {
    $variables['filter_value'] = $variables['exposed']['filter']['#value'];
  }
  if (isset($variables['rows'][0]['#rows'])) {
    $variables['row_count'] = count($variables['rows'][0]['#rows']);
  }
}

/**
 * Implements template_preprocess_views_view_list().
 */
function mass_theme_preprocess_views_view_list(&$variables) {
  $view = $variables['view'];
  $rows = $variables['rows'];

  if ($view->storage->id() == 'subtopics_all_actions') {
    $nodes = [];

    foreach ($rows as $row) {
      $result = $row['content']['#row'];
      $nid = $result->nid;

      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
      $storage = \Drupal::entityTypeManager()->getStorage('node');
      $node = $storage->load($nid);
      $build = $view_builder->view($node, 'teaser_simple');
      $nodes[] = $build;
    }
    $variables['nodes'] = $nodes;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_theme_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-subtopics-all-actions-block-1') {
    if (isset($form['actions']['submit']['#attributes'])) {
      $attributes = $form['actions']['submit']['#attributes'];
      $form['actions']['submit']['#attributes'] = $attributes + ['data-theming-id' => 'filter-submit'];
    }
    else {
      $form['actions']['submit']['#attributes'] = ['data-theming-id' => 'filter-submit'];
    }
  }
}

/**
 * Check for icon twig templates.
 */
function icon_path($icon) {
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
  $path = DRUPAL_ROOT . '/' . $theme_path . '/patterns/atoms/';

  // Check if this template exists.
  if (file_exists($path . '07-user-added-icons/svg-' . strtolower($icon) . '.twig')) {
    return '@atoms/07-user-added-icons/svg-' . strtolower($icon) . '.twig';
  }

  if (file_exists($path . '05-icons/svg-' . strtolower($icon) . '.twig')) {
    return '@atoms/05-icons/svg-' . strtolower($icon) . '.twig';
  }

  if (file_exists($path . '06-icons-location/svg-loc-' . strtolower($icon) . '.twig')) {
    return '@atoms/06-icons-location/svg-' . strtolower($icon) . '.twig';
  }

  return '@atoms/05-icons/svg-marker.twig';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Adds a page template hook suggestion per content type.
 */
function mass_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  $node = \Drupal::request()->attributes->get('node');

  // When loading a revision only the nid is returned. We need the object.
  if (ctype_digit($node)) {
    $node = Node::load($node);
  }

  if ($node) {
    array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepare icon link values for template.
 */
function mass_theme_preprocess_paragraph__icon_links(&$variables) {
  $items = [];
  if (!$variables['paragraph']->get('field_icon_link')->isEmpty()) {
    $icon_links = $variables['paragraph']->get('field_icon_link')->referencedEntities();
    foreach ($icon_links as $icon_link) {
      $icon_name = current($icon_link->get('field_para_icon_term')->referencedEntities())->get('field_sprite_name')->value;
      $link = $icon_link->get('field_link_single')->first()->getValue();
      $items[] = [
        'icon' => "@atoms/05-icons/svg-" . $icon_name . '.twig',
        'link' => [
          'href' => $link['uri'],
          'text' => $link['title'],
          'chevron' => '',
        ],
      ];
    }
  }

  $variables['iconLinks']['items'] = $items;
}

/**
 * Language config for Google translate.
 */
function mass_theme_googletranslate_options_languages() {
  $language_codes = [
    'aa' => 'Afar' ,
    'ab' => 'Abkhazian' ,
    'af' => 'Afrikaans' ,
    'am' => 'Amharic' ,
    'ar' => 'Arabic' ,
    'as' => 'Assamese' ,
    'ay' => 'Aymara' ,
    'az' => 'Azerbaijani' ,
    'ba' => 'Bashkir' ,
    'be' => 'Byelorussian' ,
    'bg' => 'Bulgarian' ,
    'bh' => 'Bihari' ,
    'bi' => 'Bislama' ,
    'bn' => 'Bengali/Bangla' ,
    'bo' => 'Tibetan' ,
    'br' => 'Breton' ,
    'ca' => 'Catalan' ,
    'co' => 'Corsican' ,
    'cs' => 'Czech' ,
    'cy' => 'Welsh' ,
    'da' => 'Danish' ,
    'de' => 'German' ,
    'dz' => 'Bhutani' ,
    'el' => 'Greek' ,
    'eo' => 'Esperanto' ,
    'es' => 'Spanish' ,
    'et' => 'Estonian' ,
    'eu' => 'Basque' ,
    'fa' => 'Persian' ,
    'fi' => 'Finnish' ,
    'fj' => 'Fiji' ,
    'fo' => 'Faeroese' ,
    'fr' => 'French' ,
    'fy' => 'Frisian' ,
    'ga' => 'Irish' ,
    'gd' => 'Scots/Gaelic' ,
    'gl' => 'Galician' ,
    'gn' => 'Guarani' ,
    'gu' => 'Gujarati' ,
    'ha' => 'Hausa' ,
    'hi' => 'Hindi' ,
    'hr' => 'Croatian' ,
    'hu' => 'Hungarian' ,
    'hy' => 'Armenian' ,
    'ia' => 'Interlingua' ,
    'ie' => 'Interlingue' ,
    'ik' => 'Inupiak' ,
    'in' => 'Indonesian' ,
    'is' => 'Icelandic' ,
    'it' => 'Italian' ,
    'iw' => 'Hebrew' ,
    'ja' => 'Japanese' ,
    'ji' => 'Yiddish' ,
    'jw' => 'Javanese' ,
    'ka' => 'Georgian' ,
    'kk' => 'Kazakh' ,
    'kl' => 'Greenlandic' ,
    'km' => 'Cambodian' ,
    'kn' => 'Kannada' ,
    'ko' => 'Korean' ,
    'ks' => 'Kashmiri' ,
    'ku' => 'Kurdish' ,
    'ky' => 'Kirghiz' ,
    'la' => 'Latin' ,
    'ln' => 'Lingala' ,
    'lo' => 'Laothian' ,
    'lt' => 'Lithuanian' ,
    'lv' => 'Latvian/Lettish' ,
    'mg' => 'Malagasy' ,
    'mi' => 'Maori' ,
    'mk' => 'Macedonian' ,
    'ml' => 'Malayalam' ,
    'mn' => 'Mongolian' ,
    'mo' => 'Moldavian' ,
    'mr' => 'Marathi' ,
    'ms' => 'Malay' ,
    'mt' => 'Maltese' ,
    'my' => 'Burmese' ,
    'na' => 'Nauru' ,
    'ne' => 'Nepali' ,
    'nl' => 'Dutch' ,
    'no' => 'Norwegian' ,
    'oc' => 'Occitan' ,
    'om' => '(Afan)/Oromoor/Oriya' ,
    'pa' => 'Punjabi' ,
    'pl' => 'Polish' ,
    'ps' => 'Pashto/Pushto' ,
    'pt' => 'Portuguese' ,
    'qu' => 'Quechua' ,
    'rm' => 'Rhaeto-Romance' ,
    'rn' => 'Kirundi' ,
    'ro' => 'Romanian' ,
    'ru' => 'Russian' ,
    'rw' => 'Kinyarwanda' ,
    'sa' => 'Sanskrit' ,
    'sd' => 'Sindhi' ,
    'sg' => 'Sangro' ,
    'sh' => 'Serbo-Croatian' ,
    'si' => 'Singhalese' ,
    'sk' => 'Slovak' ,
    'sl' => 'Slovenian' ,
    'sm' => 'Samoan' ,
    'sn' => 'Shona' ,
    'so' => 'Somali' ,
    'sq' => 'Albanian' ,
    'sr' => 'Serbian' ,
    'ss' => 'Siswati' ,
    'st' => 'Sesotho' ,
    'su' => 'Sundanese' ,
    'sv' => 'Swedish' ,
    'sw' => 'Swahili' ,
    'ta' => 'Tamil' ,
    'te' => 'Tegulu' ,
    'tg' => 'Tajik' ,
    'th' => 'Thai' ,
    'ti' => 'Tigrinya' ,
    'tk' => 'Turkmen' ,
    'tl' => 'Tagalog' ,
    'tn' => 'Setswana' ,
    'to' => 'Tonga' ,
    'tr' => 'Turkish' ,
    'ts' => 'Tsonga' ,
    'tt' => 'Tatar' ,
    'tw' => 'Twi' ,
    'uk' => 'Ukrainian' ,
    'ur' => 'Urdu' ,
    'uz' => 'Uzbek' ,
    'vi' => 'Vietnamese' ,
    'vo' => 'Volapuk' ,
    'wo' => 'Wolof' ,
    'xh' => 'Xhosa' ,
    'yo' => 'Yoruba' ,
    'zh-CN' => 'Chinese' ,
    'zu' => 'Zulu' ,
  ];
  return $language_codes;
}

/**
 * Add languages to theme settings.
 */
function mass_theme_form_system_theme_settings_alter(&$form, $form_state) {
  $languages = mass_theme_googletranslate_options_languages();

  $form['mass_theme_settings'] = [
    '#type'  => 'details',
    '#title' => t('Languages'),
    '#open'  => TRUE,
  ];

  $form['mass_theme_settings']['languages'] = [
    '#type'          => 'checkboxes',
    '#options'       => $languages,
    '#title'         => t('Choose google translate languages?'),
    '#default_value' => theme_get_setting('languages', 'mass_theme'),
  ];
}
