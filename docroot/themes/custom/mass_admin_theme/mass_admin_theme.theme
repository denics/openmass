<?php

/**
 * @file
 * Functions to support theming in the mass.gov admin theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_admin_theme_form_entity_embed_dialog_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (array_key_exists('data-align', $form['attributes'])) {
    unset($form['attributes']['data-align']['#options']['center']);
  }
  if (array_key_exists('data-entity-embed-display-settings', $form['attributes'])) {
    $display_settings = $form['attributes']['data-entity-embed-display-settings'];
    if (array_key_exists('image_style', $display_settings)) {
      $image_style = $form['attributes']['data-entity-embed-display-settings']['image_style'];
      $image_style['#title'] = t('Image width');
      $image_style['#description'] = t('The width of the image is scaled to either 50% or 100% of the container it is embedded in.');
      $form['attributes']['data-entity-embed-display-settings']['image_style'] = $image_style;
    }
    if (array_key_exists('image_link', $display_settings)) {
      unset($form['attributes']['data-entity-embed-display-settings']['image_link']);
    }
  }
  $form['#attached']['library'][] = 'mass_admin_theme/entity_embed_dialog';
}

/**
 * Implements hook_form_FORM_ID_alter() for the Service Details edit form.
 */
function mass_admin_theme_form_node_service_details_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['service_detail_parents'] = views_embed_view('service_detail_parents');
  $form['service_detail_parents']['#weight'] = 100;
  $form['service_detail_parents']['#prefix'] = '<p><h3>Service Parents</h3>';
  $form['service_detail_parents']['#sufix'] = '</p>';
  $form['#group_children']['service_detail_parents'] = 'group_overview';
}

/**
 * Implements hook_preprocess_hook().
 *
 * Customize the help text for the field.
 */
function mass_admin_theme_preprocess_file_upload_help(&$variables) {
  if (count($variables['descriptions']) == 3) {
    /* @var $description \Drupal\Core\StringTranslation\TranslatableMarkup */
    $description = $variables['descriptions'][1];
    $variables['descriptions'][1] = t("Files must be less than @size.", $description->getArguments(), $description->getOptions());

    $description = $variables['descriptions'][2];
    $extensions = str_replace(' ', ', ', $description->getArguments()['@extensions']);
    $variables['descriptions'][2] = t('Allowed types: @extensions', ['@extensions' => $extensions]);

    // Removes first line of descriptions.
    unset($variables['descriptions'][0]);
    $variables['descriptions'] = array_values($variables['descriptions']);
  }
}

/**
 * Themes the table showing existing entity references in the widget.
 *
 * @param array $variables
 *   Contains the form element data from $element['entities'].
 */
function mass_admin_theme_inline_entity_form_entity_table(array $variables) {
  $renderer = \Drupal::service('renderer');
  $form = $variables['form'];
  $entity_type = $form['#entity_type'];

  $fields = $form['#table_fields'];
  $has_tabledrag = \Drupal::entityTypeManager()->getHandler($entity_type, 'inline_form')->isTableDragEnabled($form);

  // Sort the fields by weight.
  uasort($fields, '\Drupal\Component\Utility\SortArray::sortByWeightElement');

  $header = [];
  if ($has_tabledrag) {
    $header[] = ['data' => '', 'class' => ['ief-tabledrag-header']];
    $header[] = ['data' => t('Sort order'), 'class' => ['ief-sort-order-header']];
  }
  // Add header columns for each field.
  $first = TRUE;
  foreach ($fields as $field_name => $field) {
    $column = ['data' => $field['label']];
    // The first column gets a special class.
    if ($first) {
      $column['class'] = ['ief-first-column-header'];
      $first = FALSE;
    }
    $header[] = $column;
  }
  $header[] = t('Operations');

  // Build an array of entity rows for the table.
  $rows = [];
  foreach (Element::children($form) as $key) {
    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
    $entity = $form[$key]['#entity'];
    $row_classes = ['ief-row-entity'];
    $cells = [];
    if ($has_tabledrag) {
      $cells[] = ['data' => '', 'class' => ['ief-tabledrag-handle']];
      $cells[] = $renderer->render($form[$key]['delta']);
      $row_classes[] = 'draggable';
    }
    // Add a special class to rows that have a form underneath, to allow
    // for additional styling.
    if (!empty($form[$key]['form'])) {
      $row_classes[] = 'ief-row-entity-form';
    }
    foreach ($fields as $field_name => $field) {

      // For some reason, the node title is not displayed for fees.
      if ($field_name == "field_title" && $entity->getType() == "fee") {
        $field_name = "title";
      }

      $data = '';
      if ($field['type'] == 'label') {
        $data = $variables['form'][$key]['#label'];
      }
      elseif ($field['type'] == 'field' && $entity->hasField($field_name)) {
        $display_options = ['label' => 'hidden'];
        if (isset($field['display_options'])) {
          $display_options += $field['display_options'];
        }

        $data = $entity->get($field_name)->view($display_options);
      }
      elseif ($field['type'] == 'callback') {
        $arguments = [
          'entity' => $entity,
          'variables' => $variables,
        ];
        if (isset($field['callback_arguments'])) {
          $arguments = array_merge($arguments, $field['callback_arguments']);
        }

        $data = call_user_func_array($field['callback'], $arguments);
      }

      $cells[] = ['data' => $data, 'class' => ['inline-entity-form-' . $entity_type . '-' . $field_name]];
    }

    // Add the buttons belonging to the "Operations" column.
    $cells[] = $renderer->render($form[$key]['actions']);
    // Create the row.
    $rows[] = ['data' => $cells, 'class' => $row_classes];
    // If the current entity array specifies a form, output it in the next row.
    if (!empty($form[$key]['form'])) {
      $row = [
        ['data' => $renderer->render($form[$key]['form']), 'colspan' => count($fields) + 1],
      ];
      $rows[] = [
        'data' => $row,
        'class' => ['ief-row-form'],
        'no_striping' => TRUE,
      ];
    }
  }

  if (!empty($rows)) {
    $tabledrag = [];
    if ($has_tabledrag) {
      $tabledrag = [
        [
          'action' => 'order',
          'relationship' => 'sibling',
          'group' => 'ief-entity-delta',
        ],
      ];
    }

    $table = [
      '#type' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#attributes' => [
        'id' => 'ief-entity-table-' . $form['#id'],
        'class' => ['ief-entity-table'],
      ],
      '#tabledrag' => $tabledrag,
    ];

    return $renderer->render($table);
  }
}
