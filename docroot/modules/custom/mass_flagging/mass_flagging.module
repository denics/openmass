<?php

/**
 * @file
 * Contains mass_flagging.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;

const WATCH_FLAG = 'watch_content';

/**
 * Implements hook_help().
 */
function mass_flagging_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the mass_flagging module.
    case 'help.page.mass_flagging':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Handles multiple flagging scenarios like watching and flagging.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_page().
 */
function mass_flagging_preprocess_page(&$variables) {

  $user = \Drupal::currentUser();

  // Check if user has correct permissions and page is node.
  if ($user->hasPermission('flag watch_content') &&
    $user->hasPermission('unflag watch_content') && isset($variables['node'])) {

    $node = $variables['node'];

    $flag = \Drupal::service('flag.link_builder');
    $flag_link = $flag->build($node->getEntityTypeId(), $node->id(), 'watch_content');

    $variables['page']['flag_link'] = $flag_link;
    $variables['#attached']['library'][] = 'mass_flagging/flag-link';
  }
}

/**
 * Implements hook_node_update().
 */
function mass_flagging_node_update(EntityInterface $node) {
  mass_flagging_node_update_insert($node);
}

/**
 * Implements hook_node_insert().
 */
function mass_flagging_node_insert(EntityInterface $node) {
  mass_flagging_node_update_insert($node);
}

/**
 * Add a user as a watcher for updates or inserts.
 *
 * @param \Drupal\Core\Entity\EntityInterface $node
 *   The node object that is being updated or inserted.
 */
function mass_flagging_node_update_insert(EntityInterface $node) {
  // Add flag for the user editing or creating the node.
  $watch = \Drupal::entityTypeManager()->getStorage('flag')->load(WATCH_FLAG);
  $bundles = $watch->getBundles();
  if (!empty($bundles) && in_array($node->bundle(), $bundles)) {
    $flag = \Drupal::service('flag');
    $user = \Drupal::currentUser();
    if (!$user->isAnonymous()) {
      $flagging = $flag->getEntityFlaggings($watch, $node, $user);
      if (empty($flagging)) {
        $flag->flag($watch, $node);
      }
    }
  }
}
