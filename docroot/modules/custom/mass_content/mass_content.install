<?php

/**
 * @file
 * Uninstall config.
 */

use Drupal\paragraphs\Entity\Paragraph;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\pathauto\PathautoState;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;

/**
 * Implements hook_uninstall().
 */
function mass_content_uninstall() {
  \Drupal::configFactory()->getEditable('migrate_plus.migration_group.mass_content')->delete();

  \Drupal::configFactory()->getEditable('migrate_plus.migration.example_action_landing')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration.example_action')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration.example_agency')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration.example_primary_landing')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration.example_secondary_landing')->delete();
  \Drupal::configFactory()->getEditable('migrate_plus.migration.pilot_menu')->delete();
}

/**
 * Migrate action content from old contacts field to new contacts field.
 */
function mass_content_update_8001(&$sandbox) {

  $node_storage = \Drupal::entityManager()->getStorage('node');

  // Get all actions that have contact content.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'action')
    ->exists('field_action_contacts');
  $nids = $query->execute();
  $nodes = $node_storage->loadMultiple($nids);

  foreach ($nodes as $node) {
    $subhead_added = FALSE;

    foreach ($node->field_action_contacts as $old_contact_id) {
      $old_contact = Paragraph::load($old_contact_id->target_id);
      // Keep track of the new paragraph ids.
      $new_contacts = [];
      // Migrate address.
      if ($old_contact->field_address) {
        $new_address = Paragraph::create([
          'type' => 'contact_info',
          'field_address' => [
            "value" => $old_contact->field_address->value,
            "format" => $old_contact->field_address->format,
          ],
          'field_type' => [
            "value" => 'mail',
          ],
        ]);
        $new_address->save();
        $new_contacts[] = [
          'target_id' => $new_address->id(),
          'target_revision_id' => $new_address->getRevisionId(),
        ];
      }
      // Migrate email.
      if ($old_contact->field_email) {
        $new_email = Paragraph::create([
          'type' => 'contact_info',
          'field_email' => [
            "value" => $old_contact->field_email->value,
          ],
          'field_type' => [
            "value" => 'email',
          ],
        ]);
        $new_email->save();
        $new_contacts[] = [
          'target_id' => $new_email->id(),
          'target_revision_id' => $new_email->getRevisionId(),
        ];
      }
      // Migrate fax.
      if ($old_contact->field_fax) {
        $new_fax = Paragraph::create([
          'type' => 'contact_info',
          'field_phone' => [
            "value" => $old_contact->field_fax->value,
          ],
          'field_type' => [
            "value" => 'fax',
          ],
        ]);
        $new_fax->save();
        $new_contacts[] = [
          'target_id' => $new_fax->id(),
          'target_revision_id' => $new_fax->getRevisionId(),
        ];
      }
      // Migrate phone.
      if ($old_contact->field_phone) {
        $new_phone = Paragraph::create([
          'type' => 'contact_info',
          'field_phone' => [
            "value" => $old_contact->field_phone->value,
          ],
          'field_type' => [
            "value" => 'phone',
          ],
        ]);
        $new_phone->save();
        $new_contacts[] = [
          'target_id' => $new_phone->id(),
          'target_revision_id' => $new_phone->getRevisionId(),
        ];
      }
      // Migrate website.
      if ($old_contact->field_link) {
        $new_link = Paragraph::create([
          'type' => 'contact_info',
          'field_link' => [
            "title" => $old_contact->field_link->title,
            "uri" => $old_contact->field_link->uri,
          ],
          'field_type' => [
            "value" => 'online',
          ],
        ]);
        $new_link->save();
        $new_contacts[] = [
          'target_id' => $new_link->id(),
          'target_revision_id' => $new_link->getRevisionId(),
        ];
      }

      // Bundle contact info into group.
      $new_contact_group = Paragraph::create([
        'type' => 'contact_group',
        'field_title' => [
          "value" => $old_contact->field_name->value,
        ],
        'field_contact_info' => $new_contacts,
      ]);
      $new_contact_group->save();
      $new_contact_group_id = [
        'target_id' => $new_contact_group->id(),
        'target_revision_id' => $new_contact_group->getRevisionId(),
      ];

      // If we haven't added a subhead to the node yet, do that.
      if (!$subhead_added) {
        $subhead_added = TRUE;

        $subhead = Paragraph::create([
          'type' => 'subhead',
          'field_title' => [
            'value' => 'Additional Contacts',
          ],
        ]);

        $subhead->save();
        $subhead_id = [
          'target_id' => $subhead->id(),
          'target_revision_id' => $subhead->getRevisionId(),
        ];

        $node->field_action_sidebar->appendItem($subhead_id);
      }

      // Add new contact group to the node.
      $node->field_action_sidebar->appendItem($new_contact_group_id);
      $node->save();
    }
  }

  // Delete the field_action_contacts field.
  $properties = [
    'entity_type' => 'node',
    'bundle' => 'action',
    'field_name' => 'field_action_contacts',
  ];
  $field = \Drupal::entityManager()->getStorage('field_config')->loadByProperties($properties);
  $field = reset($field);
  $field->delete();

}

/**
 * Migrate action content from old step icon field list to term ref.
 */
function mass_content_update_8002(&$sandbox) {

  $node_storage = \Drupal::entityManager()->getStorage('node');

  // Get all actions that have details.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'action')
    ->exists('field_action_details');
  $nids = $query->execute();
  $nodes = $node_storage->loadMultiple($nids);

  foreach ($nodes as $node) {

    foreach ($node->field_action_details as $detail_id) {
      $detail = Paragraph::load($detail_id->target_id);
      // Update only the action_steps.
      if ($detail->getType() == 'action_step') {
        // As long as the step has no icon term.
        if (empty($detail->field_para_icon_term->target_id)) {
          // Get icon term from the icon list.
          $icons = taxonomy_term_load_multiple_by_name($detail->field_icon->value, 'icons');
          $icon = current(array_keys($icons));
          $detail->field_para_icon_term->target_id = $icon;
          $detail->save();
        }
      }
    }
  }
}

/**
 * Update Action paths.
 */
function mass_content_update_8003(&$sandbox) {

  $node_storage = \Drupal::entityManager()->getStorage('node');

  // Update action paths.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'action');
  $nids = $query->execute();
  $nodes = $node_storage->loadMultiple($nids);

  foreach ($nodes as $node) {
    \Drupal::service('pathauto.generator')->updateEntityAlias($node, 'update');
  }

  // Update action menu links.
  $results = \Drupal::entityQuery('menu_link_content')
    ->condition('link.uri', '/actions/', 'CONTAINS')
    ->execute();
  $menu_links = MenuLinkContent::loadMultiple($results);

  foreach ($menu_links as $menu_link) {
    $new_link = $menu_link->link->uri;
    $new_link = str_replace('/actions/', '/', $new_link);
    $menu_link->link->uri = $new_link;
    $menu_link->save();
  }
}

/**
 * Create Subtopic paths.
 */
function mass_content_update_8004(&$sandbox) {

  $node_storage = \Drupal::entityManager()->getStorage('node');

  // Create subtopics paths.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'subtopic');
  $nids = $query->execute();
  $nodes = $node_storage->loadMultiple($nids);

  foreach ($nodes as $node) {

    $node->path->pathauto = PathautoState::CREATE;
    $node->save();
  }
}

/**
 * Unpublish Subtopics.
 */
function mass_content_update_8005(&$sandbox) {

  $node_storage = \Drupal::entityManager()->getStorage('node');

  // Unpublish all subtopics.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'subtopic');
  $nids = $query->execute();
  $nodes = $node_storage->loadMultiple($nids);

  foreach ($nodes as $node) {
    $node->moderation_state->target_id = 'archived';
    $node->save();
  }
}

/**
 * Remove 1up/2up stacked bands.
 */
function mass_content_update_8006(&$sandbox) {
  $content_type = \Drupal::entityManager()->getStorage('node_type')->load('1up_stacked_band');
  $content_type->delete();

  $content_type = \Drupal::entityManager()->getStorage('node_type')->load('2up_stacked_band');
  $content_type->delete();
}

/**
 * Create Funnel or Endpoint taxonomy terms.
 */
function mass_content_update_8007() {
  // Load the vocabulary to get the the vocabulary ID.
  $vocabulary = Vocabulary::load('funnel_or_endpoint');

  if (!empty($vocabulary)) {
    // Add an array of term names that we want to create.
    $terms = [
      'Funnel',
      'Endpoint',
    ];

    // Create taxonomy terms.
    foreach ($terms as $term_name) {
      Term::create([
        'name' => $term_name,
        'vid' => $vocabulary->id(),
      ])->save();
    }
  }
}

/**
 * Update Stacked Layout paths.
 */
function mass_content_update_8008(&$sandbox) {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');

  $query = \Drupal::entityQuery('node')
    ->condition('type', 'stacked_layout');
  $nids = $query->execute();
  $nodes = $node_storage->loadMultiple($nids);

  foreach ($nodes as $node) {
    \Drupal::service('pathauto.generator')->updateEntityAlias($node, 'update');
  }
}

/**
 * Implements hook_update_N().
 *
 * Updates Agencies taxonomy terms using percussion groups file values.
 */
function mass_content_update_8009() {
  $agencies_title = [
    "Civil Rights Division",
    "Commission on Bullying Prevention",
    "Commission on the Status of Women",
    "Consumer Protection Division",
    "Criminal History Systems Board",
    "State 911 Department",
    "Executive Office of Administration and Finance (ANF)",
    "Office of the Essex District Attorney (EssexDA)",
    "Appellate Tax Board (ATB)",
    "Board of Bar Examiners (BBE)",
    "Board of Registration in Medicine (BORIM)",
    "Architectural Access Board (AAB)",
    "Bureau of Air and Waste (BAW)",
    "Bureau of Local Assessment (BLA)",
    "Department of Conservation and Recreation (DCR)",
    "Executive Office of Public Safety and Security (EOPSS)",
    "Group Insurance Commission (GIC)",
    "Massachusetts Workforce Development System (MWDS)",
    "Office of the Attorney General (AGO)",
    "Health Policy Commission (HPC)",
    "Department of Cash Management",
    "Massachusetts Department of Higher Education",
    "Massachusetts National Guard",
    "Motor Vehicle Crimes Program",
    "State Ethics Commission",
    "Joint Task Force on the Underground Economy and Employee Misclassification",
    "Massachusetts Teachers' Retirement System",
    "Natural Heritage and Endangered Species Program",
    "Non-Profit Organizations/Public Charities Division",
    "Office of Child Care Services",
    "Office of the State Auditor",
    "State Board of Retirement",
    "State Ethics Commission",
    "Division of Open Government",
    "Division of Marine Fisheries",
    "Appeals Court",
    "Trial Court",
    "Department of Labor Relations (DLR)",
    "Cape and Islands District Attorney (CapeDA)",
    "Division of Health Care Finance and Policy (DHCFP)",
    "Massachusetts Gaming Commission (MassGaming)",
    "Bureau of State Office Buildings (BSB)",
    "Civil Service Commission (CSC)",
    "Coastal Zone Management (CZM)",
    "Commission on Judicial Conduct (CJC)",
    "Department of Career Services (DCS)",
    "Department of Children and Families (DCF)",
    "Department of Correction (DOC)",
    "Department of Criminal Justice Information Services (DCJIS)",
    "Department of Developmental Services (DDS)",
    "Department of Early Education and Care (EEC)",
    "Department of Energy Resources (DOER)",
    "Department of Environmental Protection (MassDEP)",
    "Department of Fire Services (DFS)",
    "Department of Fish and Game (DFG)",
    "Department of Housing and Community Development (DHCD)",
    "Department of Industrial Accidents (DIA)",
    "Department of Labor Standards (DLS)",
    "Department of Mental Health (DMH)",
    "Department of Public Health (DPH)",
    "Department of Public Safety (DPS)",
    "Department of Elementary and Secondary Education (DESE)",
    "Department of Agricultural Resources (MDAR)",
    "Office of the Comptroller (CTR)",
    "Office of Consumer Affairs and Business Regulation (OCABR)",
    "Executive Office of Energy and Environmental Affairs (EOEEA)",
    "Department of Revenue (DOR)",
    "Department of Public Utilities (DPU)",
    "Division of Banks (DOB)",
    "Department of Telecommunications and Cable (DTC)",
    "Department of Transitional Assistance (DTA)",
    "Department of Unemployment Assistance (DUA)",
    "Department of Veterans' Services (DVS)",
    "Department of Youth Services (DYS)",
    "Disabled Persons Protection Commission (DPPC)",
    "Division of Apprentice Standards (DAS)",
    "Division of Capital Asset Management and Maintenance (DCAMM)",
    "Division of Child Support Enforcement (CSE)",
    "Division of Fisheries and Wildlife (MassWildlife)",
    "Division of Insurance (DOI)",
    "Division of Professional Licensure (DPL)",
    "Division of Standards (DOS)",
    "Executive Office of Education (EDU)",
    "Executive Office of Elder Affairs (EOEA)",
    "Executive Office of Health and Human Services (EOHHS)",
    "Executive Office of Housing and Economic Development (EOHED)",
    "Executive Office of Labor and Workforce Development (EOLWD)",
    "Harbormaster Training Council (HTC)",
    "Human Resources Division (HRD)",
    "Human Service Transportation Office (HST)",
    "Massachusetts Bays National Estuary Program (MassBuys)",
    "Massachusetts Commission Against Discrimination (MCAD)",
    "Massachusetts Commission for the Blind (MCB)",
    "Massachusetts Commission for the Deaf and Hard of Hearing (MCDHH)",
    "Massachusetts Commission on the Status of Women (MCSW)",
    "Massachusetts Developmental Disabilities Council (MDDC)",
    "Massachusetts District Attorneys Association (MDAA)",
    "Massachusetts Emergency Management Agency (MEMA)",
    "Massachusetts Environmental Policy Act (MEPA)",
    "Massachusetts Office of International Trade and Investment (MOITI)",
    "Massachusetts Permit Regulatory Office (MPRO)",
    "Massachusetts Rehabilitation Commission (MRC)",
    "Massachusetts Water Pollution Abatement Trust (MWPAT)",
    "Massachusetts Court System",
    "Massachusetts Court System Law Library",
    "Health Disparities Council",
    "Virtual Gateway",
    "State Retiree Benefits Trust Fund",
    "State Library of Massachusetts",
    "Parole Board",
    "Office of the Commissioner of Probation",
    "Massachusetts Office for Victim Assistance (MOVA)",
    "Massachusetts Office of Business Development (MOBD)",
    "Massachusetts Office of Information Technology (MASSIT)",
    "Massachusetts Office on Disability (MOD)",
    "Office of Court Management",
    "MassHealth",
    "Massachusetts Environmental Police",
    "Division of Professional Licensure",
    "Board of Registration of Massage Therapy",
    "Board of Registration of Chiropractors",
    "Office of Private Occupational School Education",
    "Board of Examiners of Sheet Metal Workers",
    "The Board of Registration of Psychologists",
    "Board of Registration of Funeral Directors and Embalmers",
    "Board of Registration of Hazardous Waste Site Cleanup Professionals",
    "Massachusetts State Police",
    "Office of the Berkshire District Attorney",
    "Board of Registration of Cosmetology and Barbering",
    "Soldiers' Home in Holyoke",
    "Office of the Governor of Massachusetts",
    "Office of the State Treasurer",
    "Division of Ecological Restoration",
    "Division of Administrative Law Appeals (DALA)",
    "Massachusetts Workforce Development Board (MWDB)",
    "Municipal Police Training Committee (MPTC)",
    "Office for Refugees and Immigrants (ORI)",
    "Office of Jury Commissioner (OJC)",
    "Office of the Chief Medical Examiner (OCME)",
    "Office of the Child Advocate (OCA)",
    "Office of the Inspector General (OIG)",
    "Open Meeting Law Advisory Commission (OMLAC)",
    "Operational Services Division (OSD)",
    "Personal Care Attendant Workforce Council (PCA)",
    "Public Employee Retirement Administration Commission (PERAC)",
    "Sex Offender Registry Board (SORB)",
    "Supreme Judicial Court (SJC)",
    "Executive Office of Public Safety and Security Office of the Secretary (EOPSS)",
    "Essex County Sheriff's Department (SESSEX)",
    "Executive Office of Energy and Environmental Affairs (EOEEA)",
    "Massachusetts Sheriffs' Association (MSA)",
  ];

  foreach ($agencies_title as $title) {
    $properties = [
      'name' => $title,
      'vid' => 'document_agencies',
    ];

    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties($properties);
    $term = reset($terms);

    if (empty($term)) {
      $term = Term::create($properties);
      $term->save();
    }
  }
}
