<?php

/**
 * @file
 * Utility methods and helpers.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\block\Entity\Block;
use Drupal\Core\Database\Database;
use Drupal\user\Entity\User;

/**
 * Implements hook_install().
 *
 * We want to remove a view that is currently in the production database.
 */
function mass_utility_install() {
  try {
    $view_to_delete = \Drupal::entityTypeManager()->getStorage('view')
      ->loadMultiple(['section_topics']);

    foreach ($view_to_delete as $view) {
      $view->delete();
    }

    // Delete the field_contact_group field.
    $properties = [
      'entity_type' => 'node',
      'bundle' => 'action',
      'field_name' => 'field_contact_group',
    ];
    $field_to_delete = \Drupal::entityManager()->getStorage('field_config')->loadByProperties($properties);
    foreach ($field_to_delete as $field) {
      $field->delete();
    }
  }
  catch (Exception $e) {
    return;
  }

}

/**
 * Remove mass_theme blocks from the mass_admin_theme.
 */
function mass_utility_update_8001(&$sandbox) {
  $block_ids = [
    'mass_admin_theme_views_block__subtopics_all_actions_block_1',
    'mass_admin_theme_views_block__subtopics_ordered_subtopic_list_block',
    'mass_admin_theme_views_block__ordered_topics_ordered_topic_list_block',
    'mass_admin_theme_footer1',
    'mass_admin_theme_pilotmenu',
    'mass_admin_theme_footer2',
    'mass_admin_theme_footer3',
  ];

  foreach ($block_ids as $id) {
    $blocks = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->loadByProperties(['theme' => 'mass_admin_theme', 'id' => $id]);

    foreach ($blocks as $key => $block) {
      $block = Block::load($key);
      $block->delete();
    }
  }
}

/**
 * Add icon taxo terms.
 */
function mass_utility_update_8002(&$sandbox) {
  // Machine name of the Taxonomy vocabulary.
  $vocab = 'icons';

  // Term names to be added.
  $items = [
    'Picnic Table (Large)'        => 'lg-picnic-table',
    'Apple (Large)'               => 'lg-apple',
    'Binders (Large)'             => 'lg-binders',
    'Bookshelf (Large)'           => 'lg-bookshelf',
    'Clipboard (Large)'           => 'lg-clipboard',
    'Family (Large)'              => 'lg-family',
    'Fishing (Large)'             => 'lg-fishing',
    'Governor Desk (Large)'       => 'lg-governor-desk',
    'Government Building (Large)' => 'lg-govt-building',
    'Hard Hat (Large)'            => 'lg-hard-hat',
    'Home (Large)'                => 'lg-home',
    'Houses (Large)'              => 'lg-houses',
    'Laptop (Large)'              => 'lg-laptop',
    'License (Large)'             => 'lg-license',
    'List (Large)'                => 'lg-list',
    'Map Location (Large)'        => 'lg-map-location',
    'Open Book (Large)'           => 'lg-open-book',
    'Park (Large)'                => 'lg-park',
    'Scales (Large)'              => 'lg-scales',
    'School (Large)'              => 'lg-school',
    'Scroll (Large)'              => 'lg-scroll',
    'Shield (Large)'              => 'lg-shield',
    'State Building (Large)'      => 'lg-state-building',
    'State House (Large)'         => 'lg-state-house',
    'Toy Blocks (Large)'          => 'lg-toy-blocks',
    'Transportation (Large)'      => 'lg-transportation',
    'Tree (Large)'                => 'lg-tree',
    'Alert'                       => 'alert',
    'Arrow'                       => 'arrow',
    'Apple'                       => 'apple',
    'Application'                 => 'application',
    'Bag Search'                  => 'bag-search',
    'Blog'                        => 'blog',
    'Campfire'                    => 'campfire',
    'Castle'                      => 'castle',
    'Clock'                       => 'clock',
    'Crossroads'                  => 'crossroads',
    'Document (General)'          => 'doc-generic',
    'Excel'                       => 'doc-xlsx',
    'Dog'                         => 'dog',
    'Flickr'                      => 'flickr',
    'Globe'                       => 'lat-lon-globe',
    'Instagram'                   => 'instagram',
    'Search'                      => 'search',
    'Wheelchair'                  => 'wheelchair',
    'Youtube'                     => 'youtube',

  ];
  foreach ($items as $name => $file_name) {
    $term = Term::create([
      'parent'            => [],
      'name'              => $name,
      'field_sprite_name' => $file_name,
      'vid'               => $vocab,
    ])->save();
  }
}

/**
 * Re-install XML-Sitemap to re-generate right context values.
 */
function mass_utility_update_8003(&$sandbox) {
  // We can not remove only site id config. This will not work since there
  // is no context generated.
  $module_handler = \Drupal::service('module_handler');
  $module_installer = \Drupal::service('module_installer');

  // Uninstall module to clean up config.
  if ($module_handler->moduleExists('xmlsitemap')) {
    $module_installer->uninstall(['xmlsitemap']);
  }

  // Install module and the context will be generated with right
  // values for domain.
  if (!$module_handler->moduleExists('xmlsitemap')) {
    $module_installer->install(['xmlsitemap']);
  }
}

/**
 * Select default languages.
 */
function mass_utility_update_8004(&$sandbox) {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('mass_theme.settings');
  $config->set('languages', [
    'ar',
    'es',
    'fr',
    'pt',
    'ht',
    'it',
    'km',
    'ko',
    'ru',
    'vi',
    'zh-CN',
  ]);
  $config->save(TRUE);
}

/**
 * Delete the agency content type.
 */
function mass_utility_update_8005(&$sandbox) {
  $content_type = \Drupal::entityManager()->getStorage('node_type')->load('agency');
  $content_type->delete();
}

/**
 * Add action type taxo terms.
 */
function mass_utility_update_8006(&$sandbox) {
  // Machine name of the Taxonomy vocabulary.
  $vocab = 'action_type';

  // Term names to be added.
  $items = [
    'apply',
    'file',
    'register',
    'respond',
    'pay',
    'order',
    'check',
    'log in',
    'manage',
    'update',
    'renew',
    'replace',
    'schedule',
    'report',
    'request',
    'calculate',
    'find',
    'appeal',
    'cancel',
    'view',
  ];
  foreach ($items as $name) {
    $term = Term::create([
      'parent'            => [],
      'name'              => $name,
      'vid'               => $vocab,
    ])->save();
  }
}

/**
 * Remove old location more info and facilities fields.
 */
function mass_utility_update_8007(&$sandbox) {

  // Delete empty tables preventing field deletion.
  Database::getConnection()->schema()->dropTable('field_deleted_data_c932aee570');
  Database::getConnection()->schema()->dropTable('field_deleted_revision_c932aee570');
  Database::getConnection()->schema()->dropTable('field_deleted_data_58c31a4b25');
  Database::getConnection()->schema()->dropTable('field_deleted_revision_58c31a4b25');

  // Delete the locations facilities and more info fields.
  $properties = [
    [
      'entity_type' => 'node',
      'bundle' => 'location',
      'field_name' => 'field_facilities',
    ],
    [
      'entity_type' => 'node',
      'bundle' => 'location',
      'field_name' => 'field_more_information',
    ],
  ];

  foreach ($properties as $property) {
    $field_to_delete = \Drupal::entityManager()->getStorage('field_config')->loadByProperties($property);
    foreach ($field_to_delete as $field) {
      $field->delete();
    }
  }
}

/**
 * Remove Service content field.
 */
function mass_utility_update_8008(&$sandbox) {

  // Delete empty tables preventing field deletion.
  Database::getConnection()->schema()->dropTable('field_deleted_data_91211fa377');
  Database::getConnection()->schema()->dropTable('field_deleted_revision_91211fa377');

  // Delete the field_action_contacts field.
  $properties = [
    'entity_type' => 'node',
    'bundle' => 'service_page',
    'field_name' => 'field_service_ref_details_6',
  ];
  $fields = \Drupal::entityManager()->getStorage('field_config')->loadByProperties($properties);
  foreach ($fields as $field) {
    $field->delete();
  }
}

/**
 * Remove topic_ref_content_cards field.
 */
function mass_utility_update_8009(&$sandbox) {

  // Delete empty tables preventing field deletion.
  Database::getConnection()->schema()->dropTable('field_deleted_data_55e9be20f6');
  Database::getConnection()->schema()->dropTable('field_deleted_revision_55e9be20f6');

  // Delete the field_topic_ref_content_cards field.
  $properties = [
    'entity_type' => 'node',
    'bundle' => 'topic_page',
    'field_name' => 'field_topic_ref_content_cards',
  ];
  $fields = \Drupal::entityManager()->getStorage('field_config')->loadByProperties($properties);
  foreach ($fields as $field) {
    $field->delete();
  }
}

/**
 * Create new user with arbitrarily large uid.
 *
 * Users created in the future will have larger uids.
 */
function mass_utility_update_8010(&$sandbox) {
  // Create a new, dummy user.
  $user = User::create();
  $user->setPassword('55e9be20f6');
  $user->enforceIsNew();
  $user->setEmail('foobar@bar.com');
  $user->setUsername('Dummy User');
  $user->save();
  // The User object has no method to alter uid.
  // So we do it manually.
  $uid = $user->id();
  // Random large number.
  $new_uid = 3314432;
  $uid_tables = [
    'users',
    'users_data',
    'users_field_data',
  ];
  $entity_tables = [
    'user__field_last_password_reset',
    'user__field_password_expiration',
    'user__roles',
    'user__user_picture',
  ];
  $db = Database::getConnection();
  foreach ($uid_tables as $table_name) {
    $update = $db->update($table_name);
    $update->condition('uid', $uid)
      ->fields([
        'uid' => $new_uid,
      ])
      ->execute();
  }
  foreach ($entity_tables as $table_name) {
    $update = $db->update($table_name);
    $update->condition('entity_id', $uid)
      ->fields([
        'entity_id' => $new_uid,
        'revision_id' => $new_uid,
      ])
      ->execute();
  }

}

/**
 * Delete press release content type.
 */
function mass_utility_update_8011(&$sandbox) {
  $content_type = \Drupal::entityManager()->getStorage('node_type')->load('press_release');
  $content_type->delete();
}
