<?php

/**
 * @file
 * Install, update and uninstall functions for the password_policy module.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_install().
 */
function password_policy_install() {

  // Define the default values for the fields.
  $fields = [
    'field_last_password_reset' => [
      'field' => [
        'label' => t('Password Expiration'),
        'description' => t('The password will expire based on the number of days defined in the policy'),
        'default_value' => [
          [
            'default_date_type' => 'now',
            'default_date' => 'now',
          ],
        ],
        'settings' => [
          'on_label' => t('Expired Password'),
          'off_label' => t('Non-expired Password'),
        ],
      ],
      'field_storage' => [
        'type' => 'datetime',
        'settings' => [
          'datetime_type' => 'datetime',
        ],
        'module' => 'datetime',
      ],
    ],
    'field_password_expiration' => [
      'field' => [
        'label' => t('Last Password Reset'),
        'default_value' => [
          [
            'value' => 0,
          ],
        ],
        'settings' => [
          'on_label' => t('Expired Password'),
          'off_label' => t('Non-expired Password'),
        ],
      ],
      'field_storage' => [
        'type' => 'boolean',
        'settings' => [],
        'module' => 'boolean',
      ],
    ],
  ];

  // Loop through the fields and recreate them if necessary. This will guarantee
  // the fields exist prior to attempting to update the values on all of the
  // user accounts in the system.
  foreach ($fields as $field_name => $field_settings) {
    $field_config = [
      'field_name' => $field_name,
      'entity_type' => 'user',
      'bundle' => 'user',
    ];
    $field_config = array_merge($field_config, $field_settings['field']);
    $field_storage_config = [
      'id' => 'user.' . $field_name,
      'field_name' => $field_name,
      'entity_type' => 'user',
      'locked' => TRUE,
      'cardinality' => 1,
      'translatable' => TRUE,
      'indexes' => [],
      'persist_with_no_fields' => FALSE,
      'custom_storage' => FALSE,
    ];
    $field_storage_config = array_merge($field_storage_config, $field_settings['field_storage']);
    $field_storage = FieldStorageConfig::loadByName('user', $field_name);
    $field = FieldConfig::loadByName('user', 'user', $field_name);
    if (empty($field_storage)) {
      $field_storage = FieldStorageConfig::create($field_storage_config);
      $field_storage->save();
    }
    if (empty($field)) {
      // Setup the field configuration options.
      $field_config['field_storage'] = $field_storage;
      // Create the field against the user entity.
      $field = FieldConfig::create($field_config);
      $field->save();
    }
  }

  // Set user password reset timestamp to now.
  $timestamp = gmdate(DATETIME_DATETIME_STORAGE_FORMAT, REQUEST_TIME);
  /** @var \Drupal\user\UserInterface[] $users */
  $users = \Drupal::entityTypeManager()->getStorage('user')->loadMultiple();
  // @todo Get rid of updating all users.
  foreach ($users as $user) {
    if ($user->getAccountName() == NULL) {
      continue;
    }
    $user
      ->set('field_last_password_reset', $timestamp)
      ->set('field_password_expiration', '0')
      ->save();
  }

  // Rebuild user entity form display for new fields.
  $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $user_form_display */
  $user_form_display = $storage->load('user.user.default');
  if (!$user_form_display) {
    $user_form_display = $storage->create([
      'targetEntityType' => 'user',
      'bundle' => 'user',
      'mode' => 'default',
      'status' => TRUE,
    ]);
  }
  $user_form_display
    ->setComponent('field_last_password_reset', [
      'type' => 'datetime_default',
      // Display before contact standard profile field.
      'weight' => 4,
      'settings' => [],
    ])
    ->setComponent('field_password_expiration', [
      'type' => 'boolean_checkbox',
      'weight' => 3,
      'settings' => ['display_label' => TRUE],
    ])
    ->save();
}

/**
 * Implements hook_update_N().
 *
 * Add cron threshold to prevent memory overloads.
 */
function password_policy_update_8201() {
  $config = \Drupal::service('config.factory')->getEditable('password_policy.settings');

// Set and save new message value.
  $config->set('cron_threshold', '250')->save();
}
