<project name="deploy" default="deploy">

    <!--
        This is nuuuuts. Hopefully in the future it will be more readable, more
        robust, and just... very different.

        HOWEVER, for now, you can run:
        vendor/bin/phing -f build/deploy.xml

        And your whole local site will get built and pushed up to Acquia, code,
        database, files... everything.
        -->

    <property name="build.dir" value="${application.startdir}" />
    <basename property="projectname" file="${build.dir}" suffix="local" />


    <!-- Configure the 'drush' Phing task. -->
    <taskdef name="drush" classname="Drush\Task" />
    <property name="drush.bin" value="${build.dir}/vendor/bin/drush" />
    <property name="drush.config" value="${build.dir}/conf/drushrc.php" />
    <property name="drush.include" value="${build.dir}/artifacts/acquiacloud/.drush" />
    <property name="drush.alias-path" value="${build.dir}/artifacts/acquiacloud/.drush" />

    <target name="deploy">
        <if>
            <not><available file="${build.dir}/artifacts/acquiacloud" type="dir" /></not>
            <then>
                <!-- Whitespace is significant within this <echo> -->
                <echo>Acquia Cloud credentials are required for deployment.
            1. Log in to your Acquia account
            2. Navigate to the "Credentials" tab under your profile
            3. Under the "Drush Integration" heading, click the "Download Drush aliases" link
            4. This will download acquiacloud.tar.gz
            5. Unzip this archive
            6. Place the resulting directory within this project's "artifacts" directory
            7. You should now have your Acquia Cloud credentials available at "${build.dir}/artifacts/acquiacloud"</echo>
                <fail message="Acquia Cloud credentials missing." />
            </then>
        </if>

        <!-- Check for un-committed changes to the main repository, so
             that we can include information about these changes in the
             commit message for this build. -->
        <exec command="git status --porcelain" dir="${build.dir}" outputProperty="modified_files" />

        <if>
            <not><equals arg1="${modified_files}" arg2="" /></not>
            <then>
                <!-- Whitespace within this property value is intentional. -->
                <property name="build_message">This repository has local changes:
${modified_files}
</property>
                <echo>${build_message}</echo>
                <fail message="Can not deploy from dirty repository." />
            </then>
        </if>

        <!--
            Default properties.
            -->

        <!-- Always prompt for the deployment destination. -->
        <property name="deploy.site_alias" value="@massgovdemo.dev" />
        <input propertyname="deploy.site_alias" validargs="@massgovdemo.dev,@massgovdemo.test">Acquia environment? </input>

        <!-- The build commit ref. -->
        <gitdescribe repository="${build.dir}" tags="true" always="true" outputProperty="tmp.git_describe_output" />
        <property name="tmp.build_commit_ref" value="${tmp.git_describe_output}" override="true">
            <filterchain>
                <striplinebreaks />
            </filterchain>
        </property>

        <!-- The database dump name. -->
        <property name="deploy.db_dump" value="db-${tmp.build_commit_ref}.sql.gz" override="true" />
        <property name="deploy.db_dump_path" value="${build.dir}/artifacts/${deploy.db_dump}" override="true" />

        <!-- The SSH user. -->
        <drush command="site-alias" returnProperty="deploy.host">
            <param>${deploy.site_alias}</param>
            <option name="format" value="csv" />
            <option name="fields" value="remote-host" />
        </drush>

        <!-- The SSH host. -->
        <drush command="site-alias" returnProperty="deploy.username">
            <param>${deploy.site_alias}</param>
            <option name="format" value="csv" />
            <option name="fields" value="remote-user" />
        </drush>

        <!-- The Acquia docroot. -->
        <drush command="site-alias" returnProperty="deploy.drupal.root">
            <param>${deploy.site_alias}</param>
            <option name="format" value="csv" />
            <option name="fields" value="root" />
        </drush>

        <!--
            Environment-specific properties.
            -->
        <property file="${build.dir}/conf/build.vagrant.properties" />
        <property file="${build.dir}/conf/build.default.properties" />

        <property name="deploy.file_source" value="${build.dir}/${drupal.root}/${drupal.settings.file_public_path}" />
        <property name="deploy.file_dest" value="${deploy.username}@${deploy.host}:${deploy.drupal.root}/files" />

        <!-- If we're on a tag and the repo is not dirty, then this try-catch will set the ${deploy.code_path} -->
        <trycatch>
            <try>
                <gitdescribe repository="${build.dir}" tags="true" always="true" candidates="0" outputProperty="tmp.git_describe_output_2" />
                <property name="deploy.code_path" value="${tmp.git_describe_output_2}" override="true">
                    <filterchain>
                        <striplinebreaks />
                        <prefixlines prefix="${acquia.tag_prefix}" />
                    </filterchain>
                </property>
            </try>
            <catch>
                <!-- If we're not on a tag, we will deploy the build branch. -->
                <property name="deploy.code_path" value="${acquia.branch}" override="true" />
            </catch>
        </trycatch>


        <!--
            Input tasks.
            -->

        <!-- Set a Drupal admin password -->
        <php expression="hash('sha256', print_r($_SERVER, TRUE))" returnProperty="tmp.set_pass" />
        <propertyprompt propertyName="deploy.set_pass" promptText="Drupal admin password to use" defaultValue="${tmp.set_pass}" useExistingValue="true" />

        <!-- Dump properties for user review -->
        <echoproperties prefix="deploy." />

        <input propertyname="confirm" validargs="yes,no">Are you damn sure? </input>
        <if>
            <equals arg1="no" arg2="${confirm}" />
            <then>
                <fail message="You must be damn sure." />
            </then>
        </if>

        <!-- Run an SSH command in case there's an RSA fingerprint prompt -->
        <exec command="ssh ${deploy.username}@${deploy.host} 'echo Hello Acquia'" checkreturn="true" />

        <!--
            The deployment
            -->

        <echo>Ok, here we go.</echo>

        <!-- This is standard -->
        <phing target="deploy" phingfile="${build.dir}/build.xml" inheritAll="false" dir="${build.dir}" haltonfailure="true">
            <property name="build.env" value="acquia" />
            <property name="push" value="y" />
        </phing>

        <phing target="build" phingfile="${build.dir}/build.xml" inheritAll="false" dir="${build.dir}" haltonfailure="true">
            <property name="build.env" value="vagrant" />
        </phing>

        <phing target="install" phingfile="${build.dir}/build.xml" inheritAll="false" dir="${build.dir}" haltonfailure="true">
            <property name="build.env" value="vagrant" />
        </phing>

        <phing target="migrate" phingfile="${build.dir}/build.xml" inheritAll="false" dir="${build.dir}" haltonfailure="true">
            <property name="build.env" value="vagrant" />
        </phing>

        <!-- Dump the database; sets the Drupal admin password from above. -->
        <phing target="drupal-dump-db" phingfile="${build.dir}/build.xml" inheritAll="false" dir="${build.dir}" haltonfailure="true">
            <property name="build.env" value="vagrant" />
            <property name="pass" value="${deploy.set_pass}" />
        </phing>

        <!-- Upload the database dump. -->
        <exec command="scp ${deploy.db_dump_path} ${deploy.username}@${deploy.host}:" logoutput="true" checkreturn="true" />

        <!-- Check out the new code on Acquia. -->
        <drush command="ac-code-path-deploy" alias="${deploy.site_alias}" haltonerror="true">
            <option name="ac-config" value="${build.dir}/artifacts/acquiacloud/.acquia/cloudapi.conf" />
            <param>${deploy.code_path}</param>
        </drush>

        <!-- Import the database on Acquia. -->
        <exec command="ssh ${deploy.username}@${deploy.host} 'drush ${deploy.site_alias} ah-db-import --drop ~/${deploy.db_dump}'" checkreturn="true" />

        <!-- Sync the files directory -->
        <filesync
            sourcedir="${deploy.file_source}"
            destinationdir="${deploy.file_dest}"
            options="-rltDvPh"
            delete="true" />

        <!-- Rebuild the cache on Acquia. -->
        <exec command="drush ${deploy.site_alias} cache-rebuild" logoutput="true" checkreturn="true" />
    </target>

</project>
