machine:
  hosts:
    mass.local: 127.0.0.1
  php:
    version: 5.6.14
  node:
    version: 0.12.17
  environment:
    PALANTIR_ENVIRONMENT: circle
    PATH: ${HOME}/${CIRCLE_PROJECT_REPONAME}/vendor/bin:$PATH
    DB_DB: circle_test
    DB_USER: ubuntu
    DB_PASS:

dependencies:
  pre:
    # copy apache config from git repo to ubuntu default host
    - cp $HOME/$CIRCLE_PROJECT_REPONAME/conf/apache.circle.conf /etc/apache2/sites-available/default
    # search & replace the parent of docroot folder in DocumentRoot path
    - sed -e "s?%PROJECT_DIR%?$(pwd)?g" --in-place /etc/apache2/sites-available/default
    # enabled apache module: mod_rewrite
    - sudo a2enmod rewrite
    # prevent drush from sending emails
    - echo "sendmail_path=/bin/true" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
    # set php memory limit
    - echo "memory_limit=1024M" > ~/.phpenv/versions/$(phpenv global)/etc/conf.d/memory.ini
    # restart apache
    - sudo service apache2 restart
    # identify the committer i.e. circleci deployment bot
    - git config --global user.email "circleci@example.com"
    - git config --global user.name "CircleCI Deployment Bot"

  override:
    - composer install --no-interaction
    # Prep for push to Acquia Git. Do so while we have a clean build.
    - git add -A -f ${HOME}/${CIRCLE_PROJECT_REPONAME}
    - git commit -m "Add vendor code."
    # install eslint globally
    - npm install -g eslint@v2.13.1
    # configure phpcs to recognize Drupal and DrupalPractice standards
    - phpcs --config-set installed_paths ${HOME}/${CIRCLE_PROJECT_REPONAME}/vendor/drupal/coder/coder_sniffer

  post:
    # Copy database from @massgov.prod to @self (Transfers the database dump via rsync)
    - cd docroot && drush -yv --sanitize sql-sync @massgov.prod @self
    # Rsync Drupal files from @massgov.prod to @self
    - cd docroot && drush -y rsync @massgov.prod:%files @self:%files
    # Apply any database updates required (as with running update.php)
    - cd docroot && drush -yv updatedb --entity-updates
    # Import config
    - cd docroot && drush -yv config-import
    # Get a status
    - cd docroot && drush status
    # config-export and error if there are differences. 
    # this makes sure our committed config matches what is exported by Drupal.
    - cd docroot && drush config-export -y
    - git diff --exit-code
    - git reset --hard

  cache_directories:
      - ~/.composer/cache

test:
  override:
    # check drupal coding standards with php code sniffer
    - phpcs -v --warning-severity=0 --standard=Drupal docroot/modules/custom docroot/themes/custom docroot/profiles/custom
    # check drupal best practices with php code sniffer
    - phpcs -v --warning-severity=0 --standard=DrupalPractice docroot/modules/custom docroot/themes/custom docroot/profiles/custom
    # Quickly lint custom PHP files.
    - php -l docroot/modules/custom
    - php -l docroot/themes/custom
    - php -l docroot/profiles/custom
    # lint javascript
    - eslint --debug --ignore-path '/home/ubuntu/mass/docroot/.eslintignore' '/home/ubuntu/mass/docroot/modules/custom/**/*.js' '/home/ubuntu/mass/docroot/themes/custom/**/*.js' '/home/ubuntu/mass/docroot/profiles/custom/**/*.js' 2>&1
    # Rebuild drupal cache
    - cd docroot && drush cr
    # behat testing
    - behat --format=junit --out=$CIRCLE_TEST_REPORTS/behat --format=pretty --out=std

# after tests pass, proceed with deployment(s)
deployment:
  # deploy current circleci's branch to acquia repo (task labeled as "acquia")
  # note: current branch is pushed; but not activated
  # developer(s) will activate branch of interest in available acquia environment on demand
  acquia:
    # condition for which branch to act upon
    # in this case, we have any branch by using the regex /.*/
    branch: /.*/
    commands:
      # add a deployment identifier for cache busting at Acquia.
      - echo -e "<?php\n\n\$settings['deployment_identifier'] = '$CIRCLE_SHA1';" > ${HOME}/${CIRCLE_PROJECT_REPONAME}/docroot/sites/deployment_id.php
      - git add ${HOME}/${CIRCLE_PROJECT_REPONAME}/docroot/sites/deployment_id.php
      - git commit -m "Update deployment identifier"
      # add acquia repo as an additional remote
      - git remote add acquia massgov@svn-20994.prod.hosting.acquia.com:massgov.git
      # push the branch that meets our regex (/.*/ above)
      # get branch name from an environment variable
      - git push --force acquia $CIRCLE_BRANCH
  # deploy `develop` branch to `cd` (task labeled as "continuous_delivery")
  continuous_delivery:
    # only run when branch value is `develop`
    branch: develop
    commands:
      # add a deployment identifier for cache busting at Acquia.
      - echo -e "<?php\n\n\$settings['deployment_identifier'] = '$CIRCLE_SHA1';" > ${HOME}/${CIRCLE_PROJECT_REPONAME}/docroot/sites/deployment_id.php
      - git add ${HOME}/${CIRCLE_PROJECT_REPONAME}/docroot/sites/deployment_id.php
      - git commit -m "Update deployment identifier"
      # add acquia cloud git repo as a remote for this circle ci build
      - git remote add acquia massgov@svn-20994.prod.hosting.acquia.com:massgov.git
      # push `develop` branch to acquia cloud git repo
      - git push --force acquia $CIRCLE_BRANCH
      # activate `develop` branch in `cd` environment
      - drush ma-deploy cd $CIRCLE_BRANCH
      # copy files from `prod` environment to `cd`
      - drush -y rsync @massgov.prod:%files @massgov.cd:%files
