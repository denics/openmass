<?php

/**
 * @file
 * Contains mayflower.module.
 *
 * Copyright 2017 Palantir.net, Inc.
 */

use Drupal\mayflower\Helper;
use Drupal\mayflower\Prepare\Atoms;
use Drupal\mayflower\Prepare\Molecules;
use Drupal\mayflower\Prepare\Organisms;

/**
 * Implements hook_theme().
 */
function mayflower_theme($existing, $type, $theme, $path) {

  $patterns = mayflower_patternlibrary_paths();

  return [
    'action_seq_list' => [
      'variables' => ['actionSeqLists' => NULL],
      'template' => 'action-seq-list',
      'path' => $patterns['molecules'],
    ],
    'action_activities' => [
      'variables' => ['actionActivities' => NULL],
      'template' => 'action-activities',
      'path' => $patterns['molecules'],
    ],
    'callout_links' => [
      'variables' => ['calloutLinks' => NULL],
      'template' => 'callout-links',
      'path' => $patterns['organisms'] . '/by-author',
    ],
    'contact_us' => [
      'variables' => ['contactUs' => NULL],
      'template' => 'contact-us',
      'path' => $patterns['molecules'],
    ],
  ];
}

/**
 * Returns the common patternlibrary paths.
 *
 * @return array
 *   Returns array that contains the paths to the patterlab directories.
 */
function mayflower_patternlibrary_paths() {
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
  return [
    'atoms' => $theme_path . '/patterns/atoms',
    'molecules' => $theme_path . '/patterns/molecules',
    'organisms' => $theme_path . '/patterns/organisms',
    'pages' => $theme_path . '/patterns/pages',
  ];
}

/**
 * Prepares variables for image template.
 *
 * Default template: atoms/09-media/image.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: An ImageItem object.
 *   - item_attributes: An optional associative array of html attributes to be
 *     placed in the img tag.
 *   - image_style: An optional image style.
 *   - url: An optional \Drupal\Core\Url object.
 */
function mayflower_preprocess_image(array &$variables) {
  $variables['image']['src'] = $variables['uri'];
  $variables['image']['alt'] = $variables['alt'];
  $variables['image']['height'] = $variables['height'];
  $variables['image']['width'] = $variables['width'];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @see patterns/molecules/contact-us.twig
 */
function mayflower_preprocess_contact_us(&$variables) {
  $node = $variables['elements']['#node'];

  // Sets the variable structure required for action-seq-list.twig.
  $variables = [
    'theme_hook_original' => $variables['theme_hook_original'],
    'contactUs' => Molecules::prepareContactUs($node, ['display_title' => TRUE]),
  ];
}

/**
 * Returns the variables structure required to render stacked row template.
 *
 * @param object $entity
 *   The object that contains the fields.
 *
 * @see @organisms/by-author/stacked-row-section
 *
 * @return array
 *   Returns an array of items that contain: title, page_content, sidebar.
 */
function mayflower_prepare_stacked_row_sections($entity) {
  // @todo conform with  widgets[] in mass_theme_preprocess_node_org_page
  // ^^ Let the node preprocess configure the necessary child patterns.
  $sections = [];

  $map = [
    'text' => ['body'],
    'social' => ['field_social_links'],
    'featuredActions' => ['field_ref_actions_3'],
    'allActions' => ['field_ref_actions_6'],
    'featuredTopics' => ['field_ref_card_view_6'],
    'relatedLinks' => ['field_ref_orgs'],
  ];

  // Determines which fieldnames to use from the map.
  $fields = Helper::getMappedFields($entity, $map);

  if ($entity->$fields['text']->getValue()) {
    $sideBarSocial = '';

    if ($entity->$fields['social']->getValue()) {
      $sideBarSocial = [
        [
          'path' => '@atoms/04-headings/sidebar-heading.twig',
          'data' => Atoms::prepareSidebarHeading(t('Social')),
        ],
        [
          'path' => '@molecules/icon-links.twig',
          'data' => Molecules::prepareIconLinks($entity, 'social'),
        ],
      ];
    }

    $sections[] = [
      'title' => $entity->$fields['text']->getFieldDefinition()->getLabel(),
      'pageContent' => [
        [
          'path' => '@organisms/by-author/rich-text.twig',
          'data' => Atoms::preparePageContentParagraph($entity->$fields['text']),
        ],
      ],
      'sideBar' => $sideBarSocial,
    ];
  }

  if ($entity->$fields['featuredActions']->getValue() || $entity->$fields['allActions']->getValue()) {
    $action_finder_options = [
      // @todo refactor the strings below to be corresponding field label values
      'title' => t('What Would You Like to Do?'),
      'featuredHeading' => t('Featured:'),
      'generalHeading' => t('How-Tos & Guides:'),
    ];

    $sections[] = [
      'pageContent' => [
        [
          'path' => '@organisms/by-author/action-finder.twig',
          'data' => Organisms::prepareActionFinder($entity, $action_finder_options),
        ],
      ],
    ];
  }

  if ($entity->$fields['featuredTopics']->getValue()) {
    $sections[] = [
      'pageContent' => [
        [
          'path' => '@organisms/by-author/sections-three-up.twig',
          // @todo Pass $options[] as 2nd arg for prepare functions
          // Keep the label value as the array item value.
          'data' => Organisms::prepareSectionThreeUp($entity->$fields['featuredTopics']->referencedEntities(), $entity->$fields['featuredTopics']->getFieldDefinition()->getLabel()),
        ],
      ],
    ];
  }

  if ($entity->$fields['relatedLinks']->getValue()) {
    $sections[] = [
      'pageContent' => [
        [
          'path' => '@organisms/by-author/link-list.twig',
          // @todo Pass $options[] as 2nd arg for prepare functions
          // @todo Use field label vs string (need to update field label value)
          'data' => Organisms::prepareLinkList($entity->$fields['relatedLinks']->referencedEntities(), t('Related Organizations')),
        ],
      ],
    ];
  }

  return $sections;
}

/**
 * Returns the variables structure required for Topic Card.
 *
 * @param object $entity
 *   The object that contains the fields.
 *
 * @return array
 *   Return structured sections.
 */
function mayflower_prepare_topic_cards($entity) {
  $sections = [];

  // Get links for each Topic.
  foreach ($entity as $node) {
    // Get our Subtopics for each Topic.
    $view_results = views_get_view_result('subtopics', 'section_links', $node->id());

    // Roll up the list of subtopics.
    $links = [];
    foreach ($view_results as $key => $row) {
      $links[] = [
        'href' => $row->_entity->toURL()->toString(),
        'text' => $row->_entity->get('title')->value,
      ];
    }
    $sections[] = Molecules::prepareSectionLink($node, $links);
  }

  return $sections;
}
