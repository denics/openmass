<?php

/**
 * @file
 * Functions to support theming in the mass.gov theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Url;
use Drupal\block\Entity\Block;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityViewBuilderInterface;

/**
 * Implements hook_preprocess_block().
 */
function mass_theme_preprocess_block(&$variables) {
  // Get base_path into our block.twig templates
  // http://data.agaric.com/how-get-base-path-your-drupal-8-site-twig-template
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_node().
 */
function mass_theme_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Retrieve view mode.
  $view_mode = $variables['view_mode'];

  // Array of allowed view modes (for performance so as to not execute on
  // unneeded nodes).
  $allowed_view_modes = ['full'];

  // If view mode is in allowed view modes list, pass to
  // mass_theme_add_regions_to_node().
  if (in_array($view_mode, $allowed_view_modes)) {
    // Allowed regions (for performance so as to not execute for unneeded
    // region).
    $allowed_regions = ['section_topics'];
    mass_theme_add_regions_to_node($allowed_regions, $variables);
  }

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_node_page() or foo_preprocess_section_landing().
  $function = __FUNCTION__ . '_' . $node->getType();
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Preprocess our Section Landing node content.
 */
function mass_theme_preprocess_node_section_landing(&$variables) {
  $node = $variables['node'];

  if ($node->field_featured_image->entity) {
    $variables['hero800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_image->entity->getFileUri());
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Node action alterations.
 */
function mass_theme_preprocess_node_action(&$variables) {
  $node = $variables['node'];

  if ($variables['view_mode'] == 'teaser_simple') {
    $field_external_link = $node->get('field_external_url');

    if ($field_external_link->count() > 0) {
      $link = $field_external_link->first()->getValue();
      $variables['link_url'] = $variables['link_url'] = Url::fromUri($link['uri']);
      $variables['link_title'] = $variables['label'];
      $variables['link_type'] = 'external';
    }
    else {
      $variables['link_type'] = 'internal';
      $variables['link_title'] = $variables['label'];
      $variables['link_url'] = $variables['url'];
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Node subtopic alterations.
 */
function mass_theme_preprocess_node_subtopic(&$variables) {
  $node = $variables['node'];

  $variables['desktop_finder_image'] = mass_theme_get_field_image_url($node, 'action_finder', 'field_featured_image');
  $variables['mobile_finder_image'] = mass_theme_get_field_image_url($node, 'action_finder_mobile', 'field_featured_image');

  // Load Instance of the secondary menu block with variables.
  $all_actions_form = \Drupal::entityTypeManager()->getStorage('block')->load('form_subtopics_all_actionspage_1');
  if (!empty($all_actions_form)) {
    $all_actions_form_block = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($all_actions_form);
    if ($all_actions_form_block) {
      // Add block content to build array.
      $variables['content']['all_actions_form'] = $all_actions_form_block;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Preprocess our Topic node content.
 */
function mass_theme_preprocess_node_topic(&$variables) {
  $node = $variables['node'];

  if ($node->field_featured_image->entity) {
    $variables['hero800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_image->entity->getFileUri());
  }

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Various global preprocessing.
 */
function mass_theme_preprocess_html(&$variables) {
  // Add a body class for Action nodes.
  if (isset($variables['node_type']) && $variables['node_type'] == 'action') {
    $variables['attributes']['class'][] = 'action-page';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function mass_theme_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];

  // Get the subheads for the action jump menu.
  if ($element['#field_name'] == 'field_action_details') {
    $delta = 0;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      if ($paragraph->getType() == 'subhead') {
        $title = $paragraph->field_title->value;
        $key = strtolower($title);
        $key = Html::cleanCssIdentifier($key);
        $variables['subheads'][$key] = $title;
      }
      $delta++;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Clean css id for subheads.
 */
function mass_theme_preprocess_paragraph__subhead(&$variables) {
  $subhead = $variables['paragraph']->get('field_title')->first()->getValue()['value'];

  $subhead_clean = strtolower($subhead);
  $subhead_clean = Html::cleanCssIdentifier($subhead_clean);
  $variables['title_clean'] = $subhead_clean;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_link(&$variables) {
  $url = $variables['paragraph']->get('field_link')->first()->getUrl();

  $variables['calloutLink']['text'] = $variables['paragraph']->get('field_link')->first()->getValue()['title'];
  $variables['calloutLink']['href'] = $url->toString();
  $variables['calloutLink']['type'] = substr($url->toString(), 0, 4) === "http" ? 'external' : 'internal';
}

/**
 * Provide the URL of an image.
 *
 * @param object $node
 *   The node with the field on it.
 * @param string $style_name
 *   The name of an image style.
 * @param string $field
 *   The name of an the image field.
 *
 * @return string
 *   The URL to the styled image, or to the original image if the style does not
 *   exist.
 */
function mass_theme_get_field_image_url($node, $style_name = NULL, $field = NULL) {
  $url = '';

  $fields = $node->get($field);
  if ($fields) {
    $images = $fields->referencedEntities();
  }

  if (!empty($images)) {
    $image = current($images);

    if (!empty($style_name) && ($style = ImageStyle::load($style_name))) {
      $url = $style->buildUrl($image->getFileUri());
    }
    else {
      $url = $image->url();
    }
  }

  return $url;
}

/**
 * Implements mass_theme_add_regions_to_node().
 *
 * Add regions to node templates.
 */
function mass_theme_add_regions_to_node($allowed_regions, &$variables) {
  // Retrieve active theme.
  $theme = \Drupal::theme()->getActiveTheme()->getName();

  // Retrieve theme regions.
  $available_regions = system_region_list($theme, 'REGIONS_ALL');

  // Validate allowed regions with available regions.
  $regions = array_intersect(array_keys($available_regions), $allowed_regions);

  // For each region.
  foreach ($regions as $key => $region) {

    // Load region blocks.
    $blocks = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->loadByProperties(array('theme' => $theme, 'region' => $region));

    // Sort â€˜em.
    uasort($blocks, 'Drupal\block\Entity\Block::sort');

    // Capture viewable blocks and their settings to $build.
    $build = array();
    foreach ($blocks as $key => $block) {
      if ($block->access('view')) {
        $block = Block::load($key);
        $block_content = \Drupal::entityTypeManager()
          ->getViewBuilder('block')
          ->view($block);
        $build[$key] = $block_content;
      }
    }

    // Add build to region.
    $variables[$region] = $build;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact(&$variables) {
  if ($variables['paragraph']->get('field_phone')->first()) {
    $phone = $variables['paragraph']->get('field_phone')->first()->getValue()['value'];
    $variables['phone_clean'] = preg_replace('/[^0-9]+/', '', $phone);
  }
  if ($variables['paragraph']->get('field_fax')->first()) {
    $fax = $variables['paragraph']->get('field_fax')->first()->getValue()['value'];
    $variables['fax_clean'] = preg_replace('/[^0-9]+/', '', $fax);
  }
}

/**
 * Helper function to sort a list of items by title.
 */
function compare_by_title($a, $b) {
  return strcasecmp($a['content']['#title'], $b['content']['#title']);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Sort items array case insensitively, since twig won't.
 */
function mass_theme_preprocess_field__field_topic_callout_links(&$variables) {
  if (isset($variables['element']['#view_mode']) && $variables['element']['#view_mode'] == 'teaser') {
    // Don't have to do anything with this since usort acts on the actual
    // array but returns a boolean.
    $items_lower = usort($variables['items'], 'compare_by_title');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add theme suggestions for Footer Menus.
 */
function mass_theme_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (strpos($variables['menu_name'], 'footer') > -1) {
    $suggestions[] = "menu__footer_layout";
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add theme suggestions to fields for separate view modes.
 */
function mass_theme_theme_suggestions_field_alter(&$suggestions, $variables) {
  $suggestions[] = 'field__' .
    $variables['element']['#field_name'] . '__' .
    $variables['element']['#view_mode'];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add title to 3up Container from the current page.
 */
function mass_theme_preprocess_ma_section3up_container_style(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
  $variables['label'] = $title;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Parse file attributes for file link template.
 * Default template: file-link.html.twig.
 */
function mass_theme_preprocess_file_link(&$variables) {
  // Get file attributes for ct.action file download links.
  $file = $variables['file'];
  $file_entity = ($file instanceof File) ? $file : File::load($file->fid);

  // Get the human readable file size.
  $bytes = $file->getSize();
  $readableSize = format_size($bytes);
  $variables['download']['size'] = $readableSize;

  // Use the description as the link text if available,
  // if not, use the file name.
  $filename = $file_entity->getFilename();
  if (empty($variables['description'])) {
    $variables['download']['linktext'] = $filename;
  }
  else {
    $variables['download']['linktext'] = $variables['description'];
  }

  // Set the file link variable.
  $variables['download']['link'] = file_create_url($file_entity->getFileUri());

  // Get the file extension.
  // see: http://php.net/manual/en/splfileinfo.getextension.php
  $file_info = new SplFileInfo($filename);
  $file_extension = $file_info->getExtension();

  // Set the file type based on extesnion.
  $variables['download']['filetype'] = $file_extension;

  // Set the icon name.
  $variables['download']['iconName'] = 'doc-' . $file_extension;

}

/**
 * Implements hook_preprocess_node().
 */
function mass_theme_preprocess_views_view_list(&$variables) {
  $view = $variables['view'];
  $rows = $variables['rows'];

  if ($view->storage->id() == 'subtopics_all_actions') {
    $nodes = array();

    foreach ($rows as $row) {
      $result = $row['content']['#row'];
      $nid = $result->nid;

      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
      $storage = \Drupal::entityTypeManager()->getStorage('node');
      $node = $storage->load($nid);
      $build = $view_builder->view($node, 'teaser_simple');
      $nodes[] = $build;
    }
    $variables['nodes'] = $nodes;
  }
}