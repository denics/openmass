<?php

/**
 * @file
 * Functions to support theming in the mass.gov theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Url;
use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\Component\Utility\UrlHelper;

/**
 * Implements hook_theme_suggestions_alter().
 */
function mass_theme_theme_suggestions_alter(array &$suggestions, array $variables) {
  $original_theme_hook = $variables['theme_hook_original'];

  if (isset($variables['element']) && isset($variables['element']['#id'])) {
    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);

    if (isset($variables['element']['#type']) && isset($variables['element']['#name']) && $variables['element']['#type'] == 'textfield') {
      $original_theme_hook = $variables['theme_hook_original'];

      $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#name']);
    }

    if (isset($variables['element']['#attributes']) && array_key_exists('data-theming-id', $variables['element']['#attributes'])) {
      $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#attributes']['data-theming-id']);
    }
  }

  return $suggestions;
}

/**
 * Implements hook_library_info_alter().
 */
function mass_theme_library_info_alter(&$libraries) {
  if (isset($libraries['google-map-field-renderer'])) {
    // Remove google map field style.
    unset($libraries['google-map-field-renderer']['css']['theme']['css/google-map-field-renderer.css']);
  }
}

/**
 * Implements hook_preprocess_block().
 */
function mass_theme_preprocess_block(&$variables) {
  // Get base_path into our block.twig templates
  // http://data.agaric.com/how-get-base-path-your-drupal-8-site-twig-template
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_node().
 */
function mass_theme_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Retrieve view mode.
  $view_mode = $variables['view_mode'];

  // Array of allowed view modes (for performance so as to not execute on
  // unneeded nodes).
  $allowed_view_modes = ['full'];

  // If view mode is in allowed view modes list, pass to
  // mass_theme_add_regions_to_node().
  if (in_array($view_mode, $allowed_view_modes)) {
    // Allowed regions (for performance so as to not execute for unneeded
    // region).
    $allowed_regions = ['section_topics'];
    mass_theme_add_regions_to_node($allowed_regions, $variables);
  }

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_node_page() or foo_preprocess_section_landing().
  $function = __FUNCTION__ . '_' . $node->getType();
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Preprocess our Section Landing node content.
 */
function mass_theme_preprocess_node_section_landing(&$variables) {
  $node = $variables['node'];
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();

  // This is a required icon field, but lets check.
  if (array_key_exists('0', $node->get('field_icon_term')->referencedEntities())) {
    $icon = $node->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
    $variables['icon_path'] = icon_path($icon);
  }

  if ($node->field_featured_image->entity) {
    $variables['hero800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_image->entity->getFileUri());
  }

  // Get our subtopics (sections) view.
  $view_results = views_get_view_result('ordered_topics', 'ordered_topic_list_block', $node->id());
  $sections = array();
  // Roll this up and give the twig tpl what it expects.
  foreach ($view_results as $key => $row) {
    $icon_path = '';
    $links = array();
    // Wrap up our links for each subtopic.
    if ($row->_entity->hasField('field_common_content')) {
      foreach ($row->_entity->get('field_common_content')->referencedEntities() as $link) {
        // If we have an external URL, lets use that instead of internal paths.
        if (isset($link->get('field_external_url')[0])) {
          $external_link = $link->get('field_external_url')->first()->getValue();
          $link_path = $external_link['uri'];
        }
        else {
          $link_path = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $link->get('nid')->value);
        }
        $links[] = array('text' => $link->get('title')->value, 'href' => $link_path);
      }
    }

    // Wrap up each section with links.
    if (isset($row->_entity->get('field_icon_term')->referencedEntities()[0])) {
      $icon = $row->_entity->get('field_icon_term')->referencedEntities()[0]->get('field_sprite_name')->value;
      $icon_path = icon_path($icon);
    }
    $sections[] = array(
      'catIcon' => array(
        'svg' => $icon_path,
        'small' => 'true',
      ),
      'title' => array(
        'href' => 'node/' . $row->_entity->get('nid')->value,
        'text' => $row->_entity->get('title')->value,
      ),
      'description' => $row->_entity->get('field_lede')->value,
      'links' => $links,
    );
  }
  // Send to twig.
  $variables['sections'] = $sections;
}

/**
 * Implements hook_preprocess_node().
 *
 * Node action alterations.
 */
function mass_theme_preprocess_node_action(&$variables) {
  $node = $variables['node'];

  if ($variables['view_mode'] == 'full') {
    $field_action_parent = $node->get('field_action_parent');
    $taxonomyTerms = array();
    foreach ($field_action_parent->referencedEntities() as $taxonomyTerm) {
      $link_path = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $taxonomyTerm->get('nid')->value);
      $taxonomyTerms[] = array('url' => $link_path, 'term' => $taxonomyTerm->get('title')->value);
    }
    $variables['taxonomyTerms'] = $taxonomyTerms;
  }

  if ($variables['view_mode'] == 'teaser_simple' || $variables['view_mode'] == 'teaser') {
    $field_external_link = $node->get('field_external_url');

    // If we have an external URL, lets use that instead of internal paths.
    if ($field_external_link->count() > 0) {
      $link = $field_external_link->first()->getValue();
      $variables['link_url'] = $variables['link_url'] = Url::fromUri($link['uri']);
      $variables['link_title'] = $variables['label'];
      $variables['link_type'] = 'external';
    }
    else {
      $variables['link_type'] = 'internal';
      $variables['link_title'] = $variables['label'];
      $variables['link_url'] = $variables['url'];
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Node subtopic alterations.
 */
function mass_theme_preprocess_node_subtopic(&$variables) {
  $node = $variables['node'];

  $variables['desktop_finder_image'] = mass_theme_get_field_image_url($node, 'action_finder', 'field_featured_image');
  $variables['mobile_finder_image'] = mass_theme_get_field_image_url($node, 'action_finder_mobile', 'field_featured_mobile_image');
  if (empty($variables['mobile_finder_image'])) {
    $variables['mobile_finder_image'] = mass_theme_get_field_image_url($node, 'action_finder_mobile', 'field_featured_image');
  }

  // Load Instance of the secondary menu block with variables.
  $all_actions_view = \Drupal::entityTypeManager()->getStorage('block')->load('views_block__subtopics_all_actions_block_1');
  if (!empty($all_actions_view)) {
    $all_actions_view_content = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($all_actions_view);
    if ($all_actions_view_content) {
      // Add block content to build array.
      $variables['content']['all_actions_view'] = $all_actions_view_content;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Preprocess our Topic node content.
 */
function mass_theme_preprocess_node_topic(&$variables) {
  $node = $variables['node'];
  $icon_terms = $node->get('field_icon_term');

  // Get path_alias for breadcrumb in twig template.
  $variables['path_alias'] = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $node->get('field_section')->entity->nid->value);

  if ($icon_terms->count() > 0) {
    $terms = $icon_terms->referencedEntities();
    $term = current($terms);
    $variables['icon'] = icon_path($term->get('field_sprite_name')->value);
  }

  if ($node->field_featured_image->entity) {
    $variables['hero800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_image->entity->getFileUri());
  }

  if ($variables['view_mode'] == 'full') {
    // Get our callout links view.
    $view_results = views_get_view_result('callout_links', 'block_callout_links', $node->id());
    $calloutLinks = array();

    // Roll this up and give the twig tpl what it expects.
    foreach ($view_results as $key => $row) {

      // Common contact can be Actions or Subtopics,
      // so we need to check for the field.
      if ($row->_relationship_entities['field_common_content']->hasField('field_external_url')) {
        $external_url = $row->_relationship_entities['field_common_content']->get('field_external_url')->getValue();
      }
      $calloutLinks[] = array(
        'calloutLink' => array(
          'type'        => (!empty($external_url[0]['uri'])) ? 'external' : '',
          'quickaction' => 'false',
          'href'        => (!empty($external_url[0]['uri'])) ? $external_url[0]['uri'] : \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->_relationship_entities['field_common_content']->get('nid')->value),
          'text'        => $row->_relationship_entities['field_common_content']->get('title')->value,
        ),
      );
    }
    // Send to twig.
    $variables['calloutLinks'] = $calloutLinks;

    // Get our subtopics (sections) view.
    $view_results = views_get_view_result('subtopics', 'ordered_subtopic_list_block', $node->id());
    $sections = array();
    // Roll this up and give the twig tpl what it expects.
    foreach ($view_results as $key => $row) {
      $links = array();
      // Wrap up our links for each subtopic.
      foreach ($row->_entity->get('field_topic_callout_links') as $link) {
        $links[] = array('text' => $link->title, 'href' => Url::fromUri($link->uri));
      }
      // Wrap up each section with links.
      $sections[] = array(
        'title' => array(
          'href' => \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->_entity->get('nid')->value),
          'text' => $row->_entity->get('title')->value,
        ),
        'description' => $row->_entity->get('field_lede')->value,
        'links' => $links,
      );
    }
    // Send to twig.
    $variables['sections'] = $sections;
  }

  if ($variables['view_mode'] == 'teaser') {
    // Get our subtopics from view.
    $view_results = views_get_view_result('subtopics', 'section_links', $node->id());
    $links = array();
    // Roll this up for our twig template.
    foreach ($view_results as $key => $row) {
      $links[] = array(
        'href' => \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $row->node_nid),
        'text' => $row->_entity->get('title')->value,
      );
    }
    // Send to twig.
    $variables['links'] = $links;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Various global preprocessing.
 */
function mass_theme_preprocess_html(&$variables) {
  // Add a body class for Action nodes.
  if (isset($variables['node_type']) && $variables['node_type'] == 'action') {
    $variables['attributes']['class'][] = 'action-page';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function mass_theme_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];

  // Get the subheads for the action jump menu.
  if ($element['#field_name'] == 'field_action_details') {
    $delta = 0;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      if ($paragraph->getType() == 'subhead') {
        $title = $paragraph->field_title->value;
        $key = strtolower($title);
        $key = Html::cleanCssIdentifier($key);
        $variables['subheads'][$key] = $title;
      }
      $delta++;
    }
  }

  // If our Callout Link (Link field) references an internal node,
  // use the "External URL" field on that node, for the link,
  // if it exists.
  if ($element['#field_name'] == 'field_topic_callout_links') {
    $variables['external_link_url'] = '';
    $delta = 0;
    while (!empty($element[$delta])) {
      // Run only if this is an internal link.
      if ($element[$delta]['#url']->isExternal() == FALSE) {
        // Get the nid of the referenced internal node.
        $ref_node = $element[$delta]['#url']->getRouteParameters();
        // Load it up and get the field.
        if ($node = Node::load($ref_node['node'])) {
          // Run only on Action nodes.
          if ($node->getType() == "action") {
            $external_url = $node->get('field_external_url')->uri;
            if (!empty($external_url)) {
              // Send this url to our template.
              $variables['external_link_url'] = Url::fromUri($external_url);
            }
          }
        }
      }
      $delta++;
    }
  }
  if ($element['#view_mode'] == 'sidebar' && $element['#bundle'] == 'related_link') {
    $links = array();
    $delta = 0;
    // Wrap up our related links.
    while (!empty($element[$delta]) && !isset($element[$delta]['#type'])) {
      $links[] = array(
        'link' => array(
          'text' => $element[$delta]['#title'],
          'href' => $element[$delta]['#url_title'],
          'type' => substr($element[$delta]['#url_title'], 0, 4) === "http" ? 'external' : 'internal',
        ),
      );
      $delta++;
    }
    // Send array to twig.
    $variables['relatedActions'] = $links;
  }

  if ($element['#view_mode'] == 'sidebar' && $element['#bundle'] == 'contact_group') {
    $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
    $groups = array();
    $delta = 0;
    // Wrap up our contact groups.
    while (!empty($element[$delta])) {
      if ($element[$delta]['#paragraph']->get('field_type')->value == 'phone') {
        $phone_details[] = array(
          'label'   => $element[$delta]['#paragraph']->get('field_label')->value,
          'value'   => $element[$delta]['#paragraph']->get('field_phone')->value . $element[$delta]['#paragraph']->get('field_email')->value,
          'rawVal'  => $element[$delta]['#paragraph']->get('field_phone')->value,
          'link'    => $element[$delta]['#paragraph']->get('field_phone')->value,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type'    => $element[$delta]['#paragraph']->get('field_type')->value,
        );
        $groups[] = array(
          'icon'  => '@atoms/05-icons/svg-phone.twig',
          'name'  => ucfirst($element[$delta]['#paragraph']->get('field_type')->value),
          'items' => $phone_details,
        );
      }
      elseif ($element[$delta]['#paragraph']->get('field_type')->value == 'online') {
        $online_details[] = array(
          'label'   => $element[$delta]['#paragraph']->get('field_label')->value,
          'value'   => $element[$delta]['#paragraph']->get('field_phone')->value . $element[$delta]['#paragraph']->get('field_email')->value,
          'rawVal'  => $element[$delta]['#paragraph']->get('field_phone')->value,
          'link'    => $element[$delta]['#paragraph']->get('field_email')->value,
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type'    => 'email',
        );
        $groups[] = array(
          'icon'  => '@atoms/05-icons/svg-laptop.twig',
          'name'  => ucfirst($element[$delta]['#paragraph']->get('field_type')->value),
          'items' => $online_details,
        );
      }
      elseif ($element[$delta]['#paragraph']->get('field_type')->value == 'mail') {
        $replace = array(", ", "\r\n", "\n", "\r", " ");
        $address_details[] = array(
          'label'   => $element[$delta]['#paragraph']->get('field_label')->value,
          'value'   => $element[$delta]['#paragraph']->get('field_address')->value,
          'rawVal'  => '',
          'link'    => 'https://maps.google.com/?q=' . str_replace($replace, "+", $element[$delta]['#paragraph']->get('field_address')->value),
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type'    => 'address',
        );
        $groups[] = array(
          'icon'  => '@atoms/05-icons/svg-marker.twig',
          'name'  => ucfirst($element[$delta]['#paragraph']->get('field_type')->value),
          'items' => $address_details,
        );
      }
      elseif ($element[$delta]['#paragraph']->get('field_type')->value == 'other') {
        $other_details[] = array(
          'label'   => $element[$delta]['#paragraph']->get('field_label')->value,
          'value'   => '',
          'rawVal'  => '',
          'link'    => '',
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type'    => $element[$delta]['#paragraph']->get('field_type')->value,
        );
        $groups[] = array(
          'icon'  => '@atoms/05-icons/svg-marker.twig',
          'name'  => ucfirst($element[$delta]['#paragraph']->get('field_type')->value),
          'items' => $other_details,
        );
      }
      else {
        $icon = $element[$delta]['#paragraph']->get('field_type')->value;
        $icon_path = icon_path($icon);
        $details[] = array(
          'label'   => $element[$delta]['#paragraph']->get('field_label')->value,
          'value'   => $element[$delta]['#paragraph']->get('field_address')->value . $element[$delta]['#paragraph']->get('field_phone')->value . $element[$delta]['#paragraph']->get('field_email')->value,
          'rawVal'  => $element[$delta]['#paragraph']->get('field_phone')->value,
          'link'    => '',
          'details' => $element[$delta]['#paragraph']->get('field_caption')->value,
          'type'    => $element[$delta]['#paragraph']->get('field_type')->value,
        );
        $groups[] = array(
          'icon'  => $icon_path,
          'name'  => ucfirst($element[$delta]['#paragraph']->get('field_type')->value),
          'items' => $details,
        );
      }
      $delta++;
    }
    $variables['contactGroups'] = $groups;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Various global preprocessing.
 */
function mass_theme_preprocess_taxonomy_term(&$variables) {
  $term = $variables['term'];
  $vocab = $term->bundle();

  if ($vocab == 'icons') {
    $field_sprite_type = $term->get('field_sprite_type');

    if ($field_sprite_type->count() > 0) {
      $svg_type = $field_sprite_type->first()->getValue();
      $variables['svg_type'] = $svg_type['value'];
    }

    $field_sprite_name = $term->get('field_sprite_name');

    if ($field_sprite_name->count() > 0) {
      $sprite_name = $field_sprite_name->first()->getValue();
      $variables['sprite_name'] = $sprite_name['value'];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_node_page() or foo_preprocess_section_landing().
  $function = __FUNCTION__ . '__' . $paragraph->getType();
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__action_step_numbered_list(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_action_step_numbered_items = $paragraph->get('field_action_step_numbered_items');
  $list = array();

  if ($field_action_step_numbered_items->count() > 0) {
    $items = $field_action_step_numbered_items->referencedEntities();
  }

  if (!empty($items)) {
    foreach ($items as $id => $item) {
      $list[$id] = array();
      $field_title = $item->get('field_title');
      $field_content = $item->get('field_content');

      if ($field_title->count() > 0) {
        $title = $field_title->first()->getValue();
        $list[$id]['title'] = $title['value'];
      }

      if ($field_content->count() > 0) {
        $content = $field_content->first()->getValue();
        $list[$id]['rteElements'][] = array(
          'path' => '@atoms/11-text/paragraph.twig',
          'data' => array(
            'paragraph' => array(
              'text' => $content['value'],
            ),
          ),
        );
      }
    }
  }
  $variables['actionSeqLists'] = $list;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Clean css id for subheads.
 */
function mass_theme_preprocess_paragraph__subhead(&$variables) {
  $subhead = $variables['paragraph']->get('field_title')->first()->getValue()['value'];
  $subhead_clean = strtolower($subhead);
  $subhead_clean = Html::cleanCssIdentifier($subhead_clean);
  $variables['title_clean'] = $subhead_clean;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for action step paragraphs.
 */
function mass_theme_preprocess_paragraph__action_step(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_title = $paragraph->get('field_title');
  $field_content = $paragraph->get('field_content');

  if ($field_title->count() > 0) {
    $title = $field_title->first()->getValue();
    $variables['title'] = $title['value'];
  }

  if ($field_content->count() > 0) {
    $rich_text = $field_content->first()->getValue();
    $variables['rich_text'] = $rich_text['value'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_link(&$variables) {
  $url = $variables['paragraph']->get('field_link')->first()->getUrl();

  $variables['calloutLink']['text'] = $variables['paragraph']->get('field_link')->first()->getValue()['title'];
  $variables['calloutLink']['href'] = $url->toString();
  $variables['calloutLink']['type'] = substr($url->toString(), 0, 4) === "http" ? 'external' : 'internal';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Sets up banner elements for full_bleed paragraphs.
 */
function mass_theme_preprocess_paragraph__full_bleed(&$variables) {
  $paragraph = $variables['paragraph'];

  $field_full_bleed_ref = $paragraph->get('field_full_bleed_ref');
  if ($field_full_bleed_ref) {
    $items = $field_full_bleed_ref->referencedEntities();
    if (!empty($items)) {
      foreach ($items as $item) {
        if ($item->getType() == 'slideshow') {
          $image_field = $item->get('field_slideshow');
          $image_count = $image_field->count();
          $images = array();
          foreach ($image_field as $id => $image) {
            $value = $image->getValue();
            $image_small = mass_theme_get_field_image_url($item, 'action_banner_small', 'field_slideshow', $id);
            $image_large = mass_theme_get_field_image_url($item, 'action_banner_large', 'field_slideshow', $id);
            $images[$id] = array(
              'image' => $image_small,
              'imageLarge' => $image_large,
              'alt' => $value['alt'],
            );
          }

          $variables['images'] = $images;
          $variables['image_count'] = $image_count;
        }
        elseif ($item->getType() == 'iframe' || $item->getType() == 'map') {
          $map = $item;
          $id = $item->id;

          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
          $build = $view_builder->view($item, 'extended_header');
          $variables['map'] = $build;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_link_formatter_link_separate().
 *
 * Separate title and link for rendering in template
 * Default template: link-formatter-link-separate.html.twig.
 */
function mass_theme_preprocess_link_formatter_link_separate(&$variables) {
  $url = $variables['url_title'];
  $variables['fieldLink']['text'] = $variables['title'];
  $variables['fieldLink']['href'] = $url;
  $variables['fieldLink']['type'] = UrlHelper::isExternal($url) ? 'external' : 'internal';
}

/**
 * Provide the URL of an image.
 *
 * @param object $node
 *   The node with the field on it.
 * @param string $style_name
 *   The name of an image style.
 * @param string $field
 *   The name of an the image field.
 *
 * @return string
 *   The URL to the styled image, or to the original image if the style does not
 *   exist.
 */
function mass_theme_get_field_image_url($node, $style_name = NULL, $field = NULL, $id = 0) {
  $url = '';

  $fields = $node->get($field);
  if ($fields) {
    $images = $fields->referencedEntities();
  }

  if (!empty($images)) {
    $image = $images[$id];

    if (!empty($style_name) && ($style = ImageStyle::load($style_name))) {
      $url = $style->buildUrl($image->getFileUri());
    }
    else {
      $url = $image->url();
    }
  }

  return $url;
}

/**
 * Implements mass_theme_add_regions_to_node().
 *
 * Add regions to node templates.
 */
function mass_theme_add_regions_to_node($allowed_regions, &$variables) {
  // Retrieve active theme.
  $theme = \Drupal::theme()->getActiveTheme()->getName();

  // Retrieve theme regions.
  $available_regions = system_region_list($theme, 'REGIONS_ALL');

  // Validate allowed regions with available regions.
  $regions = array_intersect(array_keys($available_regions), $allowed_regions);

  // For each region.
  foreach ($regions as $key => $region) {

    // Load region blocks.
    $blocks = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->loadByProperties(array('theme' => $theme, 'region' => $region));

    // Capture viewable blocks and their settings to $build.
    $build = array();
    foreach ($blocks as $key => $block) {
      if ($block->access('view')) {
        $block = Block::load($key);
        $block_content = \Drupal::entityTypeManager()
          ->getViewBuilder('block')
          ->view($block);
        $build[$key] = $block_content;
      }
    }

    // Add build to region.
    $variables[$region] = $build;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact_group(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_layout = $paragraph->get('field_contact_group_layout');

  if ($field_layout->count() > 0) {
    $layout = $field_layout->first()->getValue();
    $variables['layout'] = $layout['value'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact_info(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_address = $paragraph->get('field_address');

  if ($field_address->count() > 0) {
    $address = $field_address->first()->getValue();
    $address_url = 'https://www.google.com/maps/place/' . $address['value'];
    $variables['address_url'] = $address_url;
  }

  $svg_types = array(
    'phone' => array('class' => 'svg-phone', 'svg' => 'phone'),
    'laptop' => array('class' => 'svg-laptop', 'svg' => 'laptop'),
    'mail' => array('class' => 'svg-mail', 'svg' => 'mail'),
  );

  $field_type = $paragraph->get('field_type');

  if ($field_type->count() > 0) {
    $type = $field_type->first()->getValue();
    $svg_type = '';

    switch ($type['value']) {
      case 'phone';
      case 'fax':
        $svg_type = $svg_types['phone'];
        break;

      case 'online':
        $svg_type = $svg_types['laptop'];
        break;

      case 'email';
      case 'mail':
        $svg_type = $svg_types['mail'];
        break;

    }
    $variables['svg_type'] = $svg_type;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__contact(&$variables) {
  if ($variables['paragraph']->get('field_phone')->first()) {
    $phone = $variables['paragraph']->get('field_phone')->first()->getValue()['value'];
    $variables['phone_clean'] = preg_replace('/[^0-9]+/', '', $phone);
  }
  if ($variables['paragraph']->get('field_fax')->first()) {
    $fax = $variables['paragraph']->get('field_fax')->first()->getValue()['value'];
    $variables['fax_clean'] = preg_replace('/[^0-9]+/', '', $fax);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for contacts.
 */
function mass_theme_preprocess_paragraph__action_address(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_address_url = $paragraph->get('field_address_url');

  if ($field_address_url->count() > 0) {
    $address = $field_address_url->first()->getValue();
    $direction_url = 'https://www.google.com/maps/place/' . $address['value'];
    $variables['direction_url'] = $direction_url;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Process various fields for downloads.
 */
function mass_theme_preprocess_paragraph__file_download(&$variables) {
  $paragraph = $variables['paragraph'];
  $actionDownloads = array();
  $field_downloads = $paragraph->get('field_downloads');
  $files = '';

  if ($field_downloads->count() > 0) {
    $file_list = $field_downloads->getValue();
    $files = $field_downloads->referencedEntities();
  }

  if (!empty($files)) {
    foreach ($files as $id => $file) {
      // Get the human readable file size.
      $bytes = $file->getSize();
      $readable_size = format_size($bytes);

      // Use the description as the link text if available,
      // if not, use the file name.
      $filename = $file->getFilename();

      if (empty($file_list[$id]['description'])) {
        $linktext = $filename;
      }
      else {
        $linktext = $file_list[$id]['description'];
      }

      // Set the file link variable.
      $url = file_create_url($file->getFileUri());

      // Get the file extension.
      // see: http://php.net/manual/en/splfileinfo.getextension.php
      $file_info = new SplFileInfo($filename);
      $file_extension = $file_info->getExtension();

      // Set the file type based on extesnion.
      $file_type = $file_extension;

      // Set the icon name.
      $icon_name = 'doc-' . $file_extension;

      $actionDownloads[] = array(
        'icon' => '@atoms/05-icons/svg-' . $icon_name . '.twig',
        'title' => $linktext,
        'url' => $url,
        'size' => $readable_size,
        'type' => $file_extension,
      );
    }
  }
  $variables['actionDownloads'] = $actionDownloads;
}

/**
 * Helper function to sort a list of items by title.
 */
function compare_by_title($a, $b) {
  return strcasecmp($a['content']['#title'], $b['content']['#title']);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Sort items array case insensitively, since twig won't.
 */
function mass_theme_preprocess_field__field_topic_callout_links(&$variables) {
  if (isset($variables['element']['#view_mode']) && $variables['element']['#view_mode'] == 'teaser') {
    // Don't have to do anything with this since usort acts on the actual
    // array but returns a boolean.
    $items_lower = usort($variables['items'], 'compare_by_title');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add theme suggestions for Footer Menus.
 */
function mass_theme_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (strpos($variables['menu_name'], 'footer') > -1) {
    $suggestions[] = "menu__footer_layout";
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add theme suggestions to fields for separate view modes.
 */
function mass_theme_theme_suggestions_field_alter(&$suggestions, $variables) {
  $suggestions[] = 'field__' .
    $variables['element']['#field_name'] . '__' .
    $variables['element']['#view_mode'];

  $suggestions[] = 'field__' .
    $variables['element']['#entity_type'] . '__' .
    $variables['element']['#field_name'] . '__' .
    $variables['element']['#bundle'] . '__' .
    $variables['element']['#view_mode'];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add title to 3up Container from the current page.
 */
function mass_theme_preprocess_ma_section3up_container_style(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
  $variables['label'] = $title;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Parse file attributes for file link template.
 * Default template: file-link.html.twig.
 */
function mass_theme_preprocess_file_link(&$variables) {
  // Get file attributes for ct.action file download links.
  $file = $variables['file'];
  $file_entity = ($file instanceof File) ? $file : File::load($file->fid);

  // Get the human readable file size.
  $bytes = $file->getSize();
  $readable_size = format_size($bytes);
  $variables['download']['size'] = $readable_size;

  // Use the description as the link text if available,
  // if not, use the file name.
  $filename = $file_entity->getFilename();
  if (empty($variables['description'])) {
    $variables['download']['linktext'] = $filename;
  }
  else {
    $variables['download']['linktext'] = $variables['description'];
  }

  // Set the file link variable.
  $variables['download']['link'] = file_create_url($file_entity->getFileUri());

  // Get the file extension.
  // see: http://php.net/manual/en/splfileinfo.getextension.php
  $file_info = new SplFileInfo($filename);
  $file_extension = $file_info->getExtension();

  // Set the file type based on extesnion.
  $variables['download']['filetype'] = $file_extension;

  // Set the icon name.
  $variables['download']['iconName'] = 'doc-' . $file_extension;
}

/**
 * Implements template_preprocess_views_view().
 */
function mass_theme_preprocess_views_view(&$variables) {
  $variables['row_count'] = 0;
  $variables['filter_value'] = '';

  if (isset($variables['exposed']['filter']['#value'])) {
    $variables['filter_value'] = $variables['exposed']['filter']['#value'];
  }
  if (isset($variables['rows'][0]['#rows'])) {
    $variables['row_count'] = count($variables['rows'][0]['#rows']);
  }
}

/**
 * Implements template_preprocess_views_view_list().
 */
function mass_theme_preprocess_views_view_list(&$variables) {
  $view = $variables['view'];
  $rows = $variables['rows'];

  if ($view->storage->id() == 'subtopics_all_actions') {
    $nodes = array();

    foreach ($rows as $row) {
      $result = $row['content']['#row'];
      $nid = $result->nid;

      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
      $storage = \Drupal::entityTypeManager()->getStorage('node');
      $node = $storage->load($nid);
      $build = $view_builder->view($node, 'teaser_simple');
      $nodes[] = $build;
    }
    $variables['nodes'] = $nodes;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mass_theme_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-subtopics-all-actions-block-1') {
    if (isset($form['actions']['submit']['#attributes'])) {
      $attributes = $form['actions']['submit']['#attributes'];
      $form['actions']['submit']['#attributes'] = $attributes + array('data-theming-id' => 'filter-submit');
    }
    else {
      $form['actions']['submit']['#attributes'] = array('data-theming-id' => 'filter-submit');
    }
  }
}

/**
 * Check for icon twig templates.
 */
function icon_path($icon) {
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
  $path = DRUPAL_ROOT . '/' . $theme_path . '/patterns/atoms/';

  // Check if this template exists.
  if (file_exists($path . '07-user-added-icons/svg-' . strtolower($icon) . '.twig')) {
    return '@atoms/07-user-added-icons/svg-' . strtolower($icon) . '.twig';
  }

  if (file_exists($path . '05-icons/svg-' . strtolower($icon) . '.twig')) {
    return '@atoms/05-icons/svg-' . strtolower($icon) . '.twig';
  }

  if (file_exists($path . '06-icons-location/svg-loc-' . strtolower($icon) . '.twig')) {
    return '@atoms/06-icons-location/svg-' . strtolower($icon) . '.twig';
  }

  return '@atoms/05-icons/svg-marker.twig';
}
