<?php

/**
 * @file
 * Functions to support theming in the mass.gov theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;
use Drupal\block\Entity\Block;

/**
 * Implements hook_preprocess_block().
 */
function mass_theme_preprocess_block(&$variables) {
  // Get base_path into our block.twig templates
  // http://data.agaric.com/how-get-base-path-your-drupal-8-site-twig-template
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_node().
 */
function mass_theme_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Retrieve view mode.
  $view_mode = $variables['view_mode'];

  // Array of allowed view modes (for performance so as to not execute on unneeded nodes).
  $allowed_view_modes = ['full'];

  // If view mode is in allowed view modes list, pass to mass_theme_add_regions_to_node().
  if (in_array($view_mode, $allowed_view_modes)) {
    // Allowed regions (for performance so as to not execute for unneeded region).
    $allowed_regions = ['section_topics'];
    mass_theme_add_regions_to_node($allowed_regions, $variables);
  }

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_node_page() or foo_preprocess_section_landing().
  $function = __FUNCTION__ . '_' . $node->getType();
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Preprocess our Section Landing node content.
 */
function mass_theme_preprocess_node_section_landing(&$variables) {
  $node = $variables['node'];

  if ($node->field_featured_image->entity) {
    $variables['hero800x400_image_url'] = ImageStyle::load('hero800x400')->buildUrl($node->field_featured_image->entity->getFileUri());
  }

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Various global preprocessing.
 */
function mass_theme_preprocess_html(&$variables) {
  // Add a body class for Action nodes.
  if ($variables['node_type'] == 'action') {
    $variables['attributes']['class'][] = 'action-page';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function mass_theme_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];

  // Get the subheads for the action jump menu.
  if ($element['#field_name'] == 'field_action_details') {
    $delta = 0;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      if ($paragraph->getType() == 'subhead') {
        $title = $paragraph->field_title->value;
        $key = strtolower($title);
        $key = Html::cleanCssIdentifier($key);
        $variables['subheads'][$key] = $title;
      }
      $delta++;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_link(&$variables) {
  $url = $variables['paragraph']->get('field_link')->first()->getUrl();

  $variables['calloutLink']['text'] = $variables['paragraph']->get('field_link')->first()->getValue()['title'];
  $variables['calloutLink']['href'] = $url->toString();
  $variables['calloutLink']['type'] = substr($url->toString(), 0, 4) === "http" ? 'external' : 'internal';
}

/**
 * Implements mass_theme_add_regions_to_node().
 *
 * Add regions to node templates.
 */
function mass_theme_add_regions_to_node($allowed_regions, &$variables) {
  // Retrieve active theme.
  $theme = \Drupal::theme()->getActiveTheme()->getName();

  // Retrieve theme regions.
  $available_regions = system_region_list($theme, 'REGIONS_ALL');

  // Validate allowed regions with available regions.
  $regions = array_intersect(array_keys($available_regions), $allowed_regions);

  // For each region.
  foreach ($regions as $key => $region) {

    // Load region blocks.
    $blocks = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->loadByProperties(array('theme' => $theme, 'region' => $region));

    // Sort â€˜em.
    uasort($blocks, 'Drupal\block\Entity\Block::sort');

    // Capture viewable blocks and their settings to $build.
    $build = array();
    foreach ($blocks as $key => $block) {
      if ($block->access('view')) {
        $block = Block::load($key);
        $block_content = \Drupal::entityTypeManager()
          ->getViewBuilder('block')
          ->view($block);
        $build[$key] = $block_content;
      }
    }

    // Add build to region.
    $variables[$region] = $build;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add theme suggestions for Footer Menus.
 */
function mass_theme_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (strpos($variables['menu_name'], 'footer') > -1) {
    $suggestions[] = "menu__footer_layout";
  }
}
