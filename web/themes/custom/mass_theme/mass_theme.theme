<?php

/**
 * @file
 * Functions to support theming in the mass.gov theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_preprocess_block().
 */
function mass_theme_preprocess_block(&$variables) {
  // Get base_path into our block.twig templates
  // http://data.agaric.com/how-get-base-path-your-drupal-8-site-twig-template
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Various global preprocessing.
 */
function mass_theme_preprocess_html(&$variables) {
  // Add a body class for Action nodes.
  if ($variables['node_type'] == 'action') {
    $variables['attributes']['class'][] = 'action-page';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function mass_theme_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];

  // Get the subheads for the action jump menu.
  if ($element['#field_name'] == 'field_action_details') {
    $delta = 0;
    while (!empty($element[$delta])) {
      $paragraph = $element[$delta]['#paragraph'];
      if ($paragraph->getType() == 'subhead') {
        $title = $paragraph->field_title->value;
        $key = strtolower($title);
        $key = Html::cleanCssIdentifier($key);
        $variables['subheads'][$key] = $title;
      }
      $delta++;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Break out url pieces for callout link paragraphs.
 */
function mass_theme_preprocess_paragraph__callout_link(&$variables) {
  $url = $variables['paragraph']->get('field_link')->first()->getUrl();

  $variables['calloutLink']['text'] = $variables['paragraph']->get('field_link')->first()->getValue()['title'];
  $variables['calloutLink']['href'] = $url->toString();
  $variables['calloutLink']['type'] = substr($url->toString(), 0, 4) === "http" ? 'external' : 'internal';
}

/**
 * Implements hook_preprocess_node().
 */
function mass_theme_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Optionally, run node-type-specific preprocess functions, like
  // foo_preprocess_node_page() or foo_preprocess_node_story().
  $function = __FUNCTION__ . '_' . $node->getType();
  if (function_exists($function)) {
    $function($variables);
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Node subtopic alterations
 */
function mass_theme_preprocess_node_subtopic(&$variables) {
  $node = $variables['node'];

  $variables['desktop_finder_image'] = mass_theme_get_field_image_url($node, 'action_finder', 'field_featured_image');
  $variables['mobile_finder_image'] = mass_theme_get_field_image_url($node, 'action_finder_mobile', 'field_featured_image');
}

/**
 * Provide the URL of an image.
 *
 * @param $node
 *   The node with the field on it.
 * @param string $style_name
 *   The name of an image style.
 * @param string $field
 *   The name of an the image field.
 *
 * @return string
 *   The URL to the styled image, or to the original image if the style does not
 *   exist.
 */
function mass_theme_get_field_image_url($node, $style_name = NULL, $field = NULL) {
  $url = '';

  $fields = $node->get($field);
  if ($fields) {
    $images = $fields->referencedEntities();
  }

  if (!empty($images)) {
    $image = current($images);

    if (!empty($style_name) && ($style = ImageStyle::load($style_name))) {
      $url = $style->buildUrl($image->getFileUri());
    }
    else {
      $url = $image->url();
    }
  }

  return $url;
}